################################################################################
# 
#     Makefile for Eta Coordinate Post
#
#     Use:
#     make         -  build the executable
#     make clean   -  start with a clean slate
#
#     The following macros will be of interest:
#
#         TARGET   - name of the executable
#         FC       - name of Fortran compiler
#         CPP      - name of CPP
#         ARCH     - architecture
#         CPPFLAGS - CPP flags
#         OPTS     - compiler code optimizations
#         LIST     - source listing
#         SMP      - threading
#         TRAPS    - runtime traps for floating point exceptions
#         PROFILE  - source code profiling ( -pg )
#         DEBUG    - -g
#         MEM      - user data area and stack size
#         MAP      - load map
#         W3LIB    - w3lib
#         BACIO    - bacio lib
#         ESSL     - ESSL library
#         MASS     - MASS library
#         HPMLIB   - hpm lib
#         SEARCH   - library search location
# 
#         This version for eta_post with more intelligent memory allocation
#         Jim Tuccillo   Feb 2001
# 
#         This version for eta_post with asynchronous I/O server.   
#         Jim Tuccillo   June 2001
#
#################################################################################
#
# Define the name of the executable
#
#TARGET = wrfpost.x_bintest
#TARGET = wrfpost.x_netcdf
#TARGET = wrfpost.x_west08
#TARGET = wrfpost.x_emwest 
TARGET = wrfpost.x_223x501
#TARGET = wrfpost.x_hi
#
# CPP, Compiler, and Linker Options
#



#WRFPATH = /emc2/wx20py/WRFV1
#WRFPATH = /emc2/wx22tb/NMM_WRF_update
#WRFPATH = /emc2/wx20hc/NMM_WRF_update
WRFPATH = /emc2/wx20hc/wrf_nmm/WRFV1
NETCDFPATH = /usrx/local/netcdf3.5
#WRFPATH = /nfsuser/g01/emcsrc/wx20hc/WRF/WRFV1
#NETCDFPATH = /emc2/wx22tb/netcdf-3.5.0
FC       = mpxlf_r
CPP      = /lib/cpp -P
ARCH     = auto
CPPFLAGS = 
#OPTS     = -O -qnosave -qarch=$(ARCH) -qmaxmem=-1 -NS2000
#OPTS     = -C -O -qnosave -qarch=$(ARCH) -qmaxmem=-1 -NS2000
OPTS     = -O0 -g -qnosave -qarch=$(ARCH) -qmaxmem=-1 -NS2000
LIST     = 
FREE     = -qfree
TRAPS    = 
PROFILE  = 
DEBUG    = -g 
MEM      =
MAP      = 
W3LIBDIR = /nwprod/lib
ESSL     = -lessl
MASS     = -lmass
NCDLIBS = -L$(NETCDFPATH)/lib -lnetcdf
NCDFFLAGS = -I$(NETCDFPATH)/include
WRFFFLAGS = -I$(WRFPATH)/external/io_quilt
WRFLIB    = $(WRFPATH)/main/libwrflib.a $(WRFPATH)/frame/internal_header_util.o  $(WRFPATH)/external/io_int/libwrfio_int.a $(WRFPATH)/external/io_netcdf/libwrfio_nf.a $(WRFPATH)/frame/pack_utils.o $(WRFPATH)/external/esmf_time_f90/libesmf_time.a 

SEARCH   =
#
# Assemble Options
#
FFLAGS   = $(OPTS) $(LIST) $(TRAPS) $(PROFILE) $(DEBUG) $(NCDFFLAGS) $(WRFFLAGS)
FFLAGST  = $(OPTS) $(LIST) $(FREE) $(TRAPS) $(PROFILE) $(DEBUG) $(NCDFFLAGS) $(WRFFLAGS)
LDFLAGS  = $(MEM) $(MAP) $(SMP) $(PROFILE)
LIBS     = $(ESSL) $(MASS) $(SEARCH) $(NCDLIBS) $(WRFLIB) -L$(W3LIBDIR) -lw3_4 -lbacio_4
#
#
# Threaded object files
#
OBJST=	getVariable.o getIVariable.o getVariableB.o getIVariableN.o
#
# Non-threaded object files
#
OBJS=	MASKS_mod.o SOIL_mod.o VRBLS2D_mod.o VRBLS3D_mod.o \
	BNDLYR.o  BOUND.o  CALCAPE.o  CALDWP.o  CALDRG.o CALHEL.o  CALLCL.o  \
	CALMCVG.o  CALMXW.o  CALPOT.o  CALPW.o CALRH.o  CALRCH.o  \
	CALSTRM.o CALTAU.o CALTHTE.o CALVIS.o CALVOR.o CALWXT.o \
	CLDRAD.o  CLMAX.o COLLECT.o  COLLECT_LOC.o \
	DEWPOINT.o \
	FDLVL.o  FIXED.o  FRZLVL.o  FRZLVL2.o \
	GET_BITS.o  GRIBIT.o INITPOST.o LFMFLD.o  INITPOST_BIN.o \
	MISCLN.o MIXLEN.o MDL2P.o MDLFLD.o MPI_FIRST.o  MPI_LAST.o \
	NGMFLD.o NGMSLP.o  OTLFT.o OTLIFT.o SLP_new.o SLP_NMM.o EXCH.o \
	PARA_RANGE.o  POSTDATA.o  PROCESS.o INITPOST_NMM.o EXCH2.o \
	READCNTRL.o  SCLFLD.o  SERVER.o  SETUP_SERVERS.o SURFCE.o \
	SPLINE.o  TABLE.o  TABLEQ.o  TRPAUS.o  TTBLEX.o WETBULB.o WRFPOST.o \
        INITPOST_NMM_BIN.o
#
# Includes
#
INCLUDES= parm.tbl parmeta parmout parmsoil cuparm
#
# Common Blocks
#
COMMS=	LOOKUP.comm   RQSTFLD.comm   CTLBLK.comm  SOILDEPTH.comm \
        GRIDSPEC.comm

DEPS= $(COMMS) $(INCLUDES)

.SUFFIXES:	.F .f .o

.F.f:
	$(CPP) $(CPPFLAGS) $< > $*.f

$(TARGET):	$(OBJS) $(OBJST)
	$(FC) $(LDFLAGS) -o $@ $(OBJS) $(OBJST) $(LIBS) 

$(OBJS):	$(DEPS)
	$(FC) $(FFLAGS) -c $<

$(OBJST):	$(DEPS)
	$(FC) $(FFLAGST) -c $<

clean:	
	/bin/rm -f  $(TARGET) *.lst *.o *.mod
#
