#!/bin/ksh 
#
# Author:        Geoff Manikin       Org: NP22         Date: 2007-08-06
#
# Script history log:
# 2007-08-06  Geoff Manikin
# 2012-07-24  Jeff McQueen  cleaned up redundant codes
#    Created precip threshold loop for creating sref prob precip files
# 2012-09-26  JTM : Modified for wcoss
#                   Combined on & off cycles options into one script 
# 2012-10-22  JTM : Combined addprecip and makeprecip codes
# 2012-10-26  JTM : Combined various nam region scripts
#                   smartinit: getgrib.f: fixed bug with reading sref prob file
# 2012-10-31  JTM : moved smartinit system to tide
# 2012-12-03  JTM : Unified for nam parent and nested region runs
# 2014-01-23  Matthew Pyle : Overhaul for HiresWindow purposes
#======================================================================
#  Set Defaults fcst hours,cycle,model,region in config_nam_nwpara called in parent job


set -x 

# Check if this is a nest run
# inest=`echo $RUNTYP|awk '{ print( index($0,"nest") )}' `
# export rg=`echo $RUNTYP |cut -c1-2` 

echo RUNTYP $RUNTYP

inest=1  # treat hiresw domains like they are nests


export rg=$RUNTYP

#=====================================================================
# Set special filename extensions for mdl,sref,master,wgt,output files
# mdl input file         : mdlgrd,natgrd
# eg: nam.t12z.conusnest.bsmart.tm00

# prdgen master ctl file : RUNTYPE
# eg: nam_smartmasteraknest3.ctl     

# prdgen wgt ctl file    : mdlgrd, ogrd
# eg: nam_wgt_184_conusnest

# smartinit in/out file  : rg / outreg
# eg: MESOAK.NDFD
# eg: nam.t12z.smartconus2p5.f03
#=====================================================================

#INPUT MODEL GRID filename extension
export mdlgrd=$RUNTYP  
export mdl=$RUNTYP

cd $DATA/smartinit

#SMARTINIT OUTPUT grid filename extension
outreg=$rg
case $RUNTYP in
  conusarw|conusnmmb) rg=conus; outreg=conus;;
  hiarw|hinmmb) rg=hi; outreg=hi;;
  prarw|prnmmb) rg=pr; outreg=pr;;
  akarw|aknmmb) rg=ak; outreg=ak;;
  guamarw|guamnmmb) rg=guam; outreg=guam;;
esac

cycon=0

# case $cyc in 
#    00|12 ) cycon=1;; 
# esac




# 12 hour max/mins must be computed at 00 and 12 UTC

# FOR NESTS,parent script, exnam, sets forecast range (60 or 54h)
case $cyc in
  00|12) set -A A6HR 12 24 36 48 999;;
  * )    set -A A6HR 18 30 42 999;;
esac

# srefcyc and gefscyc set in parent job (JNAM_SMINIT)
typeset -Z2 srefcyc gefscyc pcphrl


#======================================================================
#  Configure input met grib, land-sea mask and topo file names
#======================================================================

#  Set indices to determine input met file name 
#       eg: MDL.tCYCz.MDLGRD.NATGRD${FHR}.tm00
#       eg: nam.t12z.bgrd3d24.tm00
#       eg: nam.t12z.conusnest.bsmart24.tm00

# prdgfl=meso${rg}.NDFD  # output prdgen grid name (eg: mesocon.NDFD,mesoak...)

if [ $rg = "hi" ]
then
rgprdgen=HI
elif [ $rg = "pr" ]
then
rgprdgen=PR
elif [ $rg = "conus" ]
then
rgprdgen=CONUS
elif [ $rg = "ak" ]
then
rgprdgen=AK
elif [ $rg = "guam" ]
then
rgprdgen=GU
fi
echo set rgprdgen to $rgprdgen

if [ $MODEL = "nmmb" ]
then
prdgfl=wrf.${rgprdgen}04
elif [ $MODEL = "arw" ]
then
prdgfl=wrf.EM${rgprdgen}04
fi

echo prdgfl $prdgfl

# if [ $inest -eq 0 ];then 
#   natgrd="bgrd3d"
#   if [ $rg = con ];then prdgfl=meso.NDFD;fi
# else

  natgrd="wrfprs"       # native model type grid extension (eg: bgrd3d, bsmart)

#  if [ $RUNTYP = aknest3 ];then prdgfl=mesoak.NDFD;fi
# fi
#-------------------------------------------------------------------------
#   For all grids, set the following:
#   sgrb : Input SREF grid grib number (eg: 212, 216, 243)
#   grid : output grid to copygb sref precip and nam precip buckets to 
#          one exception for non-nests where nam precip buckets are 
#          interpolated to smartinit output (ogrd)
#   ogrd : output grib number for prdgen and smartinit codes 
#          (eg: 197,196,195,184)
#--------------------------------------------------------------------------
grdext=" 0 64 25000 25000"

# case $RUNTYP in 
#   conus|conusnest)
#     maskpre=ruc2_vegtype_ndfd
#     topopre=ruc2_ndfdtopo
#     ext=dat
#     grid="255 3 1073 689 20192 238446 8 265000 5079 5079 $grdext"
#     sgrb=212       # SREF input GRIB File grid indicator
#     ogrd=197;;     # smartinit output grid number
#   *) 

   maskpre=hiresw_smartmask${rg}
   topopre=hiresw_smarttopo${rg}
   ext=grb
   case $RUNTYP in
     guamnmmb|guamarw)          sgrb=999;ogrd=199
      grid="255 1 193 193 12350 143687 128 16794 148280 20000  $grdext";;
     hiarw)            sgrb=243;ogrd=196
      grid="255 1 321 225 18067 -161626 128 23082 -153969 20000 $grdext";;
     hinmmb)            sgrb=243;ogrd=196
      grid="255 1 321 225 18067 -161626 128 23082 -153969 20000 $grdext";;
     prarw)            sgrb=212;ogrd=195
      grid="255 1 177 129 16829  -68196 128 19747  -63972 20000 $grdext";;
     prnmmb)            sgrb=212;ogrd=195
      grid="255 1 177 129 16829  -68196 128 19747  -63972 20000 $grdext";;
     akarw)  sgrb=216;ogrd=91
      grid="255 5 1649 1105 40530 181429 8 210000 2976 2976 0 64 0 25000 25000";;
     aknmmb)  sgrb=216;ogrd=91
      grid="255 5 1649 1105 40530 181429 8 210000 2976 2976 0 64 0 25000 25000";;
     conusarw)  sgrb=212;ogrd=184 
      grid="255 3 2145 1377 20192 238446 8 265000 2540 2540 $grdext"
      topopre=ruc2_ndfd_elevtiles.ndfd2.5
      maskpre=ruc2_ndfd_vegtiles.ndfd2.5;;
     conusnmmb)  sgrb=212;ogrd=184 
      grid="255 3 2145 1377 20192 238446 8 265000 2540 2540 $grdext"
      topopre=ruc2_ndfd_elevtiles.ndfd2.5
      maskpre=ruc2_ndfd_vegtiles.ndfd2.5;;
#  NESTS--------------------------------------------------------------------
   *)
      echo RUNTYP  ${RUNTYP} configuration not available $mdlgrd $rg
      exit;;
   esac
# esac

maskfl=${maskpre}.${ext}
topofl=${topopre}.${ext}


typeset -Z2 fhr1 fhr2 fhr3 fhr6 fhr9 fhr12 fhr ffhr

echo
echo "============================================================"
echo BEGIN SMARTINIT PROCESSING FOR FFHR $ffhr  CYCLE $cyc
echo RUNTYP:  $RUNTYP $mdlgrd  $rg
echo INTERP GRID: $grid
echo OUTPUT GRID: $ogrd $outreg

datestr=`date`
echo starting at $datestr

echo "============================================================"
echo 

#  Set Defaults pcp hours and frequencies
let pcphr=ffhr+3
let pcphrl=ffhr+3
let pcphr12=pcphr-12
let pcphr6=pcphr-6
let pcphr3=pcphr-3

let ffhr1=ffhr-1
let ffhr2=ffhr-2
hours="${ffhr}"
if [ $ffhr -ge 3 ];then hours="${ffhr2} ${ffhr1} ${ffhr}";fi


#### TOP OF LOOP
#####
for fhr in $hours
do
#####

  mk3p=0;mk6p=0;mk12p=0
  let check=fhr%3
  let check6=fhr%6

  if [ $fhr -eq 0 ]
  then
    check=9
    check6=9
  fi

  let fhr1=fhr-1
  let fhr2=fhr-2
  let fhr3=fhr-3
  let fhr6=fhr-6
  let fhr9=fhr-9
  let fhr12=fhr-12

    if [ $check -eq 0 -a $MODEL = "arw" ]
    then
        echo MADE to mk3p definition
      mk3p=3
      ppgm=make
    else
      mk3p=0
    fi
    if [ $check6 -eq 0 ];then
      mk6p=6
        if [ MODEL = "nmmb" ]
        then
      ppgm=add
        else
      ppgm=make
        fi
    fi



typeset -Z2 fhr1 fhr2 fhr3 fhr6 fhr9 fhr12 fhr ffhr

echo here with  $fhr



#=================================================================
#   DECLARE INPUTS and RUN SMARTINIT 
#=================================================================

# CHANGE : for non-conus look in FIXnam for topo,land files
  cp $FIXhiresw/${topofl} TOPONDFD
  cp $FIXhiresw/${maskfl} LANDNDFD
  ln -sf TOPONDFD     fort.46
  ln -sf LANDNDFD     fort.48
  if [ $ext = grb ];then
    $utilexec/grbindex TOPONDFD TOPONDFDi
    $utilexec/grbindex LANDNDFD LANDNDFDi
    ln -sf TOPONDFDi  fort.47
    ln -sf LANDNDFDi  fort.49
  fi

  mksmart=1
  if [ $check -eq 0 -a $fhr -ne 00 ];then 


	if [ $sgrb -ne 999 ] ; then
	echo try to copy srefpcp file
	ls -l srefpcp${rg}_${SREF_PDY}${srefcyc}f0${pcphrl}
    cp srefpcp${rg}_${SREF_PDY}${srefcyc}f0${pcphrl} SREFPCP
    cp srefpcp${rg}i_${SREF_PDY}${srefcyc}f0${pcphrl} SREFPCPi
        fi
    cp MAXMIN${fhr2}.tm00 MAXMIN2
    cp MAXMIN${fhr1}.tm00 MAXMIN1
    $utilexec/grbindex MAXMIN1 MAXMIN1i
    $utilexec/grbindex MAXMIN2 MAXMIN2i
  fi

  freq=6;fmx=21   #fmx =  maxmin unit number for 1st maxmin file

### if arw, should freq be 3 here?

#  if [ $cycon -eq 1 ];then 
#    if [ $inest -eq 0 ];then 
#      freq=3;fmx=23
#    fi
#  else
#    fmx=19   
#  fi

     cpgbgrd=$grid
     if [ $inest -gt 0 ];then cpgbgrd=$ogrd;fi


### add a check?

	if [ $check6 -eq 0 ]
	then

     $utilexec/copygb -g "$cpgbgrd" -i3 -x ${freq}precip.${fhr} ${freq}precip
     $utilexec/grbindex ${freq}precip ${freq}precipi
     $utilexec/copygb -g "$cpgbgrd" -i3 -x ${freq}snow.${fhr} ${freq}snow
     $utilexec/grbindex ${freq}snow ${freq}snowi

	fi

	if [ $MODEL = "arw" -a $check -eq 0 ]
	then
	$utilexec/copygb -g "$cpgbgrd" -i3 -x 3precip.${fhr} 3precip
	fi



	if [ $MODEL = "arw" -a $check -eq 0 ]
	then
	cat 3precip meso${rg}.NDFDf${fhr} > new_meso${rg}.NDFDf${fhr}
	mv new_meso${rg}.NDFDf${fhr} meso${rg}.NDFDf${fhr}
        $utilexec/grbindex meso${rg}.NDFDf${fhr} meso${rg}.NDFDif${fhr}
        fi

  ln -sf "meso${rg}.NDFDf${fhr}"    fort.11
  ln -sf "meso${rg}.NDFDif${fhr}"   fort.12

	ls -l meso${rg}.NDFDf${fhr} meso${rg}.NDFDif${fhr}

        if [ ${fhr} -ne 00 -a $check -eq 0 -a $sgrb -ne 999 ]; then
        ln -sf "SREFPCP"                  fort.13

	if [ -e SREFPCPi ] 
        then
          rm SREFPCPi
        fi

        $utilexec/grbindex SREFPCP SREFPCPi
        ln -sf "SREFPCPi"                 fort.14

	if [ $check6 -eq 0 ]
	then

ls -l ${freq}precip ${freq}precipi

  ln -sf "${freq}precip"            fort.15

mv ${freq}precipi ${freq}precipi_was

$utilexec/grbindex ${freq}precip ${freq}precipi

  ln -sf "${freq}precipi"           fort.16
        fi

	fi

# At 12-hr times, input 12-hr max/min temps and 3 and 6-hr buckets

  case $fhr in 
    ${A6HR[0]}|${A6HR[1]}|${A6HR[2]}|${A6HR[3]}|${A6HR[4]}|${A6HR[5]}|${A6HR[6]} )
    echo "********************************************************"
    echo RUN SMARTINIT for 12h valid 00 or 12Z fcst hours: $fhr

	fmx=21

#    if [ $cycon -eq 0 ];then fmx=21;fi
    cp $COMOUT/${mdl}.t${cyc}z.smart${outreg}f${fhr3} MAXMIN3
    cp $COMOUT/${mdl}.t${cyc}z.smart${outreg}f${fhr6} MAXMIN4
    cp $COMOUT/${mdl}.t${cyc}z.smart${outreg}f${fhr9} MAXMIN5
    $utilexec/grbindex MAXMIN3 MAXMIN3i
    $utilexec/grbindex MAXMIN4 MAXMIN4i
    $utilexec/grbindex MAXMIN5 MAXMIN5i


###  revisit this....we might need 3 precip for ARW

#    if [ $cycon -eq 1 -a inest -eq 0 ];then
#     READ 3/6 hr precip from special files created by makeprecip
#      ln -sf "6precip"   fort.17
#      ln -sf "6precipi"  fort.18
#      ln -sf "3snow"     fort.19
#      ln -sf "3snowi"    fort.20
#      ln -sf "6snow"     fort.21
#      ln -sf "6snowi"    fort.22
#    else     
#     READ 6/12 hr precip from special files created by makeprecip

     cpgbgrd=$grid
     if [ $inest -gt 0 ];then cpgbgrd=$ogrd;fi
     $utilexec/copygb -g "$cpgbgrd" -i3 -x 12precip.${fhr} 12precip
     $utilexec/grbindex 12precip 12precipi
     $utilexec/copygb -g "$cpgbgrd" -i3 -x 6snow.${fhr} 6snow
     $utilexec/grbindex 6snow 6snowi

      ln -sf "6snow"      fort.17
      ln -sf "6snowi"     fort.18
      ln -sf "12precip"   fort.19
      ln -sf "12precipi"  fort.20
#    fi   
    ln -sf "MAXMIN1"   fort.$fmx
    ln -sf "MAXMIN2"   fort.$((fmx+1))
    ln -sf "MAXMIN3"   fort.$((fmx+2))
    ln -sf "MAXMIN4"   fort.$((fmx+3))
    ln -sf "MAXMIN5"   fort.$((fmx+4))
    ln -sf "MAXMIN1i"  fort.$((fmx+5))
    ln -sf "MAXMIN2i"  fort.$((fmx+6))
    ln -sf "MAXMIN3i"  fort.$((fmx+7))
    ln -sf "MAXMIN4i"  fort.$((fmx+8))
    ln -sf "MAXMIN5i"  fort.$((fmx+9));;

    *)   # Not 00/12 UTC valid times

     if [ $check -eq 0 -a $fhr -ne 00 ];then

#      READ PRECIP FROM SPECIAL FILES CREATED BY SMARTPRECIP
#      ON-CYC: All forecast hours divisible by 3 except for (3,15,27....), 
#      read  3-hr buckets max/min temp data for the previous 2 hours
#      OFF-CYC: Set input files to read 6 hr prcp from makeprecip files

#mptest       if [ $hr3bkt -ne 0 -o $mk6p -ne 0 ];then
       if [ $mk6p -ne 0 ];then
         echo "****************************************************************"

         case $cycon in
          1) echo RUN SMARTINIT for ON-CYC  hrs without 3 hr buckets : $fhr;;
          *) echo RUN SMARTINIT for OFF-CYC hrs without 6 hr buckets : $fhr;;
         esac

 echo "here with freq " $freq

         ln -fs "${freq}snow"  fort.17
         ln -sf "${freq}snowi" fort.18
         ln -sf "MAXMIN2"   fort.19
         ln -sf "MAXMIN1"   fort.20
         ln -sf "MAXMIN2i"  fort.21
         ln -sf "MAXMIN1i"  fort.22

       else           
#        READ PRECIP FROM INPUT NAM GRIB FILE 
#        ON-CYC:  Forecast hours 3,15,27,39....already  have 3-hr buckets,
#        OFF-CYC: 3 hour buckets available for all 3 hour forecast times
#        ALL-CYC: Input only  max/min temp data for the previous 2 hours

         echo "****************************************************"
         echo RUN SMARTINIT for hours with 3 hr buckets: $fhr
         ln -sf "MAXMIN2"   fort.15
         ln -sf "MAXMIN1"   fort.16
         ln -sf "MAXMIN2i"  fort.17
         ln -sf "MAXMIN1i"  fort.18
       fi  

     else   # fhr%3 -ne 0
#    For all "in-between" forecast hours (13,14,16....)
#    No special data needed
       echo "*****************************************************"
       echo RUN SMARTINIT for in-between hour: $fhr
       ln -fs " " fort.13
       ln -fs " " fort.14
       ln -fs " " fort.15

       ln -fs " " fort.16
       mksmart=0
       if [ $fhr -eq 00 ];then mksmart=1;fi
     fi;;
  esac

#========================================================
# Run Smartinit
#========================================================
  case $RUNTYP in
   conus|conusnest) RGIN=CS;;
      conusnest2p5) RGIN=CS2P;;
        ak_rtmages) RGIN=AKRT;;
                 *) RGIN=`echo $rg |tr '[a-z]'  '[A-Z]' `;;
  esac

	echo linked files into hiresw_smartinit

ls -l fort.??

	echo end linked files into hiresw_smartinit

datestr=`date`
echo TO SMARTINIT RUN $datestr

	echo RGIN into smartinit $RGIN
  export pgm=hiresw_smartinit;. prep_step
  $EXEChiresw/hiresw_smartinit $cyc $fhr $ogrd $RGIN $inest $MODEL >smartinit.out${fhr}
  export err=$?; err_chk
datestr=`date`
echo PAST SMARTINIT RUN $datestr

  if [ $mksmart -eq 1 ];then
# Run NCO processing to convert output to grib2 and awips
   export RUNTYP
   export RGIN=$RGIN  # Region id (eg: CS, HI, PR,AK..)
   export outreg
   export cyc  
   export fhr=$fhr
   export ogrd 
   ${USHhiresw}/hiresw_ncoproc.sh
datestr=`date`
echo PAST NCOPROC $datestr
echo "- - - - - - - - - - - - - - - - -     " $datestr

else

datestr=`date`
echo "- - - - - INTERMEDIATE TIME FINISH - - - - - - - - - - -     " $datestr


  fi
  echo
done  #fhr loop

exit
