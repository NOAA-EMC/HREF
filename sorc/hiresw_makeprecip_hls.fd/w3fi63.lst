IBM XL Fortran for AIX, V12.1 (5724-U82) Version 12.01.0000.0001 --- /gpfs/c/nco/ops/nwprod/sorc/hiresw_makeprecip_hls.fd/w3fi63.f 12/22/08 15:32:53
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              DBG             DDIM            ESCAPE
         FULLPATH        I4              INLGLUE         NOLIBESSL
         NOLIBPOSIX      OBJECT          SOURCE          STRICT
         SWAPOMP         THREADED        UNWIND          NOZEROSIZE
  
         ==  Options Of Integer Type ==
         ALIAS_SIZE(65536)     FIXED(72)             MAXMEM(-1)
         OPTIMIZE(2)           SPILLSIZE(548)        STACKTEMP(0)
  
  
         ==  Options Of Character Type  ==
         64(LARGETYPE)         ALIAS(STD,INTPTR)     ALIGN(BINDC(POWER),STRUCT(NATURAL))
         ARCH(PWR6)            ATTR()                AUTODBL(NONE)
         DESCRIPTOR(V1)        DIRECTIVE(IBM*,IBMT)  ENUM()
         FLAG(I,I)             FLOAT(RNDSNGL,MAF,FOLD,RNGCHK,SINGLE)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LANGLVL(EXTENDED)     POSITION(APPENDOLD)   REALSIZE(4)
         NOSAVE()              TUNE(PWR6)            UNROLL(AUTO)
         XREF(FULL)            XLF2003(NOPOLYMORPHIC,NOBOZLITARGS,NOSTOPEXCEPT,NOVOLATILE,NOAUTOREALLOC,OLDNANINF)
         XLF77(NOLEADZERO,GEDIT77,NOBLANKPAD,OLDBOZ,INTARG,INTXOR,PERSISTENT,SOFTEOF)
         XLF90(NOSIGNEDZERO,NOAUTODEALLOC,OLDPAD)
  
>>>>> SOURCE SECTION <<<<<
          1 |      SUBROUTINE W3FI63(MSGA,KPDS,KGDS,KBMS,DATA,KPTR,KRET)
          2 |C$$$  SUBPROGRAM DOCUMENTATION  BLOCK
          3 |C                .      .    .                                       .
          4 |C SUBPROGRAM:  W3FI63        UNPK GRIB FIELD TO GRIB GRID
          5 |C   PRGMMR: FARLEY           ORG: NMC421      DATE:94-11-22
          6 |C
          7 |C ABSTRACT: UNPACK A GRIB (EDITION 1) FIELD TO THE EXACT GRID
          8 |C   SPECIFIED IN THE GRIB MESSAGE, ISOLATE THE BIT MAP, AND MAKE
          9 |C   THE VALUES OF THE PRODUCT DESCRIPTON SECTION (PDS) AND THE
         10 |C   GRID DESCRIPTION SECTION (GDS) AVAILABLE IN RETURN ARRAYS.
         11 |C
         12 |C   WHEN DECODING IS COMPLETED, DATA AT EACH GRID POINT HAS BEEN
         13 |C          RETURNED IN THE UNITS SPECIFIED IN THE GRIB MANUAL.
         14 |C
         15 |C PROGRAM HISTORY LOG:
         16 |C   91-09-13  CAVANAUGH
         17 |C   91-11-12  CAVANAUGH   MODIFIED SIZE OF ECMWF GRIDS 5-8
         18 |C   91-12-22  CAVANAUGH   CORRECTED PROCESSING OF MERCATOR PROJECTIONS
         19 |C                         IN GRID DEFINITION SECTION (GDS) IN
         20 |C                         ROUTINE FI633
         21 |C   92-08-05  CAVANAUGH   CORRECTED MAXIMUM GRID SIZE TO ALLOW FOR
         22 |C                         ONE DEGREE BY ONE DEGREE GLOBAL GRIDS
         23 |C   92-08-27  CAVANAUGH   CORRECTED TYPO ERROR, ADDED CODE TO COMPARE
         24 |C                         TOTAL BYTE SIZE FROM SECTION 0 WITH SUM OF
         25 |C                         SECTION SIZES.
         26 |C   92-10-21  CAVANAUGH   CORRECTIONS WERE MADE (IN FI634) TO REDUCE
         27 |C                         PROCESSING TIME FOR INTERNATIONAL GRIDS.
         28 |C                         REMOVED A TYPOGRAPHICAL ERROR IN FI635.
         29 |C   93-01-07  CAVANAUGH   CORRECTIONS WERE MADE (IN FI635) TO
         30 |C                         FACILITATE USE OF THESE ROUTINES ON A PC.
         31 |C                         A TYPOGRAPHICAL ERROR WAS ALSO CORRECTED
         32 |C   93-01-13  CAVANAUGH   CORRECTIONS WERE MADE (IN FI632) TO
         33 |C                         PROPERLY HANDLE CONDITION WHEN
         34 |C                         TIME RANGE INDICATOR = 10.
         35 |C                         ADDED U.S.GRID 87.
         36 |C   93-02-04  CAVANAUGH   ADDED U.S.GRIDS 85 AND 86
         37 |C   93-02-26  CAVANAUGH   ADDED GRIDS 2, 3, 37 THRU 44,AND
         38 |C                         GRIDS 55, 56, 90, 91, 92, AND 93 TO
         39 |C                         LIST OF U.S. GRIDS.
         40 |C   93-04-07  CAVANAUGH   ADDED GRIDS 67 THRU 77 TO
         41 |C                         LIST OF U.S. GRIDS.
         42 |C   93-04-20  CAVANAUGH   INCREASED MAX SIZE TO ACCOMODATE
         43 |C                         GAUSSIAN GRIDS.
         44 |C   93-05-26  CAVANAUGH   CORRECTED GRID RANGE SELECTION IN FI634
         45 |C                         FOR RANGES 67-71 & 75-77
         46 |C   93-06-08  CAVANAUGH   CORRECTED FI635 TO ACCEPT GRIB MESSAGES
         47 |C                         WITH SECOND ORDER PACKING. ADDED ROUTINE FI636
         48 |C                         TO PROCESS MESSAGES WITH SECOND ORDER PACKING.
         49 |C   93-09-22  CAVANAUGH   MODIFIED TO EXTRACT SUB-CENTER NUMBER FROM
         50 |C                         PDS BYTE 26
         51 |C   93-10-13  CAVANAUGH   MODIFIED FI634 TO CORRECT GRID SIZES FOR
         52 |C                         GRIDS 204 AND 208
         53 |C   93-10-14  CAVANAUGH   INCREASED SIZE OF KGDS TO INCLUDE ENTRIES FOR
         54 |C                         NUMBER OF POINTS IN GRID AND NUMBER OF WORDS
         55 |C                         IN EACH ROW
         56 |C   93-12-08  CAVANAUGH   CORRECTED TEST FOR EDITION NUMBER INSTEAD
         57 |C                         OF VERSION NUMBER
         58 |C   93-12-15  CAVANAUGH   MODIFIED SECOND ORDER POINTERS TO FIRST ORDER
         59 |C                         VALUES AND SECOND ORDER VALUES CORRECTLY
         60 |C                         IN ROUTINE FI636
         61 |C   94-03-02  CAVANAUGH   ADDED CALL TO W3FI83 WITHIN DECODER.  USER
         62 |C                         NO LONGER NEEDS TO MAKE CALL TO THIS ROUTINE
         63 |C   94-04-22  CAVANAUGH   MODIFIED FI635, FI636 TO PROCESS ROW BY ROW
         64 |C                         SECOND ORDER PACKING, ADDED SCALING CORRECTION
         65 |C                         TO FI635, AND CORRECTED TYPOGRAPHICAL ERRORS
         66 |C                         IN COMMENT FIELDS IN FI634
         67 |C   94-05-17  CAVANAUGH   CORRECTED ERROR IN FI633 TO EXTRACT RESOLUTION
         68 |C                         FOR LAMBERT-CONFORMAL GRIDS. ADDED CLARIFYING
         69 |C                         INFORMATION TO DOCBLOCK ENTRIES
         70 |C   94-05-25  CAVANAUGH   ADDED CODE TO PROCESS COLUMN BY COLUMN AS WELL
         71 |C                         AS ROW BY ROW ORDERING OF SECOND ORDER DATA
         72 |C   94-06-27  CAVANAUGH   ADDED PROCESSING FOR GRIDS 45, 94 AND 95.
         73 |C                         INCLUDES CONSTRUCTION OF SECOND ORDER BIT MAPS
         74 |C                         FOR THINNED GRIDS IN FI636.
         75 |C   94-07-08  CAVANAUGH   COMMENTED OUT PRINT OUTS USED FOR DEBUGGING
         76 |C   94-09-08  CAVANAUGH   ADDED GRIDS 220, 221, 223 FOR FNOC
         77 |C   94-11-10  FARLEY      INCREASED MXSIZE FROM 72960 TO 260000
         78 |C                         FOR .5 DEGREE SST ANALYSIS FIELDS
         79 |C   94-12-06  R.E.JONES   CHANGES IN FI632 FOR PDS GREATER THAN 28
         80 |C   95-02-14  R.E.JONES   CORRECT IN FI633 FOR NAVY WAFS GRIB
         81 |C   95-03-20  M.BALDWIN   FI633 MODIFICATION TO GET
         82 |C                         DATA REP TYPES [KGDS(1)] 201 AND 202 TO WORK.
         83 |C   95-04-10  E.ROGERS    ADDED GRIDS 96 AND 97 FOR ETA MODEL IN FI634.
         84 |C   95-04-26  R.E.JONES   FI636 CORECTION FOR 2ND ORDER COMPLEX
         85 |C                         UNPACKING. R
         86 |C   95-05-19  R.E.JONES   ADDED GRID 215, 20 KM AWIPS GRID
         87 |C   95-07-06  R.E.JONES   ADDED GAUSSIAN T62, T126 GRID 98, 126
         88 |C   95-10-19  R.E.JONES   ADDED GRID 216, 45 KM ETA AWIPS ALASKA GRID
         89 |C   95-10-31  IREDELL     REMOVED SAVES AND PRINTS
         90 |C   96-03-07  R.E.JONES   CONTINUE UNPACK WITH KRET ERROR 9 IN FI631.
         91 |C   96-08-19  R.E.JONES   ADDED MERCATOR GRIDS 8 AND 53, AND GRID 196
         92 |C   97-02-12  W BOSTELMAN CORRECTS ECMWF US GRID 2 PROCESSING
         93 |C   98-06-17  IREDELL     REMOVED ALTERNATE RETURN IN FI637
         94 |C   98-08-31  IREDELL     ELIMINATED NEED FOR MXSIZE
         95 |C   98-09-02  Gilbert     Corrected error in map size for U.S. Grid 92
         96 |C   98-09-08  BALDWIN     ADD DATA REP TYPE [KGDS(1)] 203
         97 |C
         98 |C USAGE:    CALL W3FI63(MSGA,KPDS,KGDS,KBMS,DATA,KPTR,KRET)
         99 |C   INPUT ARGUMENT LIST:
        100 |C     MSGA     - GRIB FIELD - "GRIB" THRU "7777"   CHAR*1
        101 |C                   (MESSAGE CAN BE PRECEDED BY JUNK CHARS)
        102 |C
        103 |C   OUTPUT ARGUMENT LIST:
        104 |C     DATA     - ARRAY CONTAINING DATA ELEMENTS
        105 |C     KPDS     - ARRAY CONTAINING PDS ELEMENTS.  (EDITION 1)
        106 |C          (1)   - ID OF CENTER
        107 |C          (2)   - GENERATING PROCESS ID NUMBER
        108 |C          (3)   - GRID DEFINITION
        109 |C          (4)   - GDS/BMS FLAG (RIGHT ADJ COPY OF OCTET 8)
        110 |C          (5)   - INDICATOR OF PARAMETER
        111 |C          (6)   - TYPE OF LEVEL
        112 |C          (7)   - HEIGHT/PRESSURE , ETC OF LEVEL
        113 |C          (8)   - YEAR INCLUDING (CENTURY-1)
        114 |C          (9)   - MONTH OF YEAR
        115 |C          (10)  - DAY OF MONTH
        116 |C          (11)  - HOUR OF DAY
        117 |C          (12)  - MINUTE OF HOUR
        118 |C          (13)  - INDICATOR OF FORECAST TIME UNIT
        119 |C          (14)  - TIME RANGE 1
        120 |C          (15)  - TIME RANGE 2
        121 |C          (16)  - TIME RANGE FLAG
        122 |C          (17)  - NUMBER INCLUDED IN AVERAGE
        123 |C          (18)  - VERSION NR OF GRIB SPECIFICATION
        124 |C          (19)  - VERSION NR OF PARAMETER TABLE
        125 |C          (20)  - NR MISSING FROM AVERAGE/ACCUMULATION
        126 |C          (21)  - CENTURY OF REFERENCE TIME OF DATA
        127 |C          (22)  - UNITS DECIMAL SCALE FACTOR
        128 |C          (23)  - SUBCENTER NUMBER
        129 |C          (24)  - PDS BYTE 29, FOR NMC ENSEMBLE PRODUCTS
        130 |C                  128 IF FORECAST FIELD ERROR
        131 |C                   64 IF BIAS CORRECTED FCST FIELD
        132 |C                   32 IF SMOOTHED FIELD
        133 |C                  WARNING: CAN BE COMBINATION OF MORE THAN 1
        134 |C          (25)  - PDS BYTE 30, NOT USED
        135 |C       (26-35)  - RESERVED
        136 |C       (36-N)   - CONSECUTIVE BYTES EXTRACTED FROM PROGRAM
        137 |C                  DEFINITION SECTION (PDS) OF GRIB MESSAGE
        138 |C     KGDS     - ARRAY CONTAINING GDS ELEMENTS.
        139 |C          (1)   - DATA REPRESENTATION TYPE
        140 |C          (19)  - NUMBER OF VERTICAL COORDINATE PARAMETERS
        141 |C          (20)  - OCTET NUMBER OF THE LIST OF VERTICAL COORDINATE
        142 |C                  PARAMETERS
        143 |C                  OR
        144 |C                  OCTET NUMBER OF THE LIST OF NUMBERS OF POINTS
        145 |C                  IN EACH ROW
        146 |C                  OR
        147 |C                  255 IF NEITHER ARE PRESENT
        148 |C          (21)  - FOR GRIDS WITH PL, NUMBER OF POINTS IN GRID
        149 |C          (22)  - NUMBER OF WORDS IN EACH ROW
        150 |C       LATITUDE/LONGITUDE GRIDS
        151 |C          (2)   - N(I) NR POINTS ON LATITUDE CIRCLE
        152 |C          (3)   - N(J) NR POINTS ON LONGITUDE MERIDIAN
        153 |C          (4)   - LA(1) LATITUDE OF ORIGIN
        154 |C          (5)   - LO(1) LONGITUDE OF ORIGIN
        155 |C          (6)   - RESOLUTION FLAG (RIGHT ADJ COPY OF OCTET 17)
        156 |C          (7)   - LA(2) LATITUDE OF EXTREME POINT
        157 |C          (8)   - LO(2) LONGITUDE OF EXTREME POINT
        158 |C          (9)   - DI LATITUDINAL DIRECTION OF INCREMENT
        159 |C          (10)  - DJ LONGITUDINAL DIRECTION INCREMENT
        160 |C          (11)  - SCANNING MODE FLAG (RIGHT ADJ COPY OF OCTET 28)
        161 |C       GAUSSIAN  GRIDS
        162 |C          (2)   - N(I) NR POINTS ON LATITUDE CIRCLE
        163 |C          (3)   - N(J) NR POINTS ON LONGITUDE MERIDIAN
        164 |C          (4)   - LA(1) LATITUDE OF ORIGIN
        165 |C          (5)   - LO(1) LONGITUDE OF ORIGIN
        166 |C          (6)   - RESOLUTION FLAG  (RIGHT ADJ COPY OF OCTET 17)
        167 |C          (7)   - LA(2) LATITUDE OF EXTREME POINT
        168 |C          (8)   - LO(2) LONGITUDE OF EXTREME POINT
        169 |C          (9)   - DI LATITUDINAL DIRECTION OF INCREMENT
        170 |C          (10)  - N - NR OF CIRCLES POLE TO EQUATOR
        171 |C          (11)  - SCANNING MODE FLAG (RIGHT ADJ COPY OF OCTET 28)
        172 |C          (12)  - NV - NR OF VERT COORD PARAMETERS
        173 |C          (13)  - PV - OCTET NR OF LIST OF VERT COORD PARAMETERS
        174 |C                             OR
        175 |C                  PL - LOCATION OF THE LIST OF NUMBERS OF POINTS IN
        176 |C                       EACH ROW (IF NO VERT COORD PARAMETERS
        177 |C                       ARE PRESENT
        178 |C                             OR
        179 |C                  255 IF NEITHER ARE PRESENT
        180 |C       POLAR STEREOGRAPHIC GRIDS
        181 |C          (2)   - N(I) NR POINTS ALONG LAT CIRCLE
        182 |C          (3)   - N(J) NR POINTS ALONG LON CIRCLE
        183 |C          (4)   - LA(1) LATITUDE OF ORIGIN
        184 |C          (5)   - LO(1) LONGITUDE OF ORIGIN
        185 |C          (6)   - RESOLUTION FLAG  (RIGHT ADJ COPY OF OCTET 17)
        186 |C          (7)   - LOV GRID ORIENTATION
        187 |C          (8)   - DX - X DIRECTION INCREMENT
        188 |C          (9)   - DY - Y DIRECTION INCREMENT
        189 |C          (10)  - PROJECTION CENTER FLAG
        190 |C          (11)  - SCANNING MODE (RIGHT ADJ COPY OF OCTET 28)
        191 |C       SPHERICAL HARMONIC COEFFICIENTS
        192 |C          (2)   - J PENTAGONAL RESOLUTION PARAMETER
        193 |C          (3)   - K      "          "         "
        194 |C          (4)   - M      "          "         "
        195 |C          (5)   - REPRESENTATION TYPE
        196 |C          (6)   - COEFFICIENT STORAGE MODE
        197 |C       MERCATOR GRIDS
        198 |C          (2)   - N(I) NR POINTS ON LATITUDE CIRCLE
        199 |C          (3)   - N(J) NR POINTS ON LONGITUDE MERIDIAN
        200 |C          (4)   - LA(1) LATITUDE OF ORIGIN
        201 |C          (5)   - LO(1) LONGITUDE OF ORIGIN
        202 |C          (6)   - RESOLUTION FLAG (RIGHT ADJ COPY OF OCTET 17)
        203 |C          (7)   - LA(2) LATITUDE OF LAST GRID POINT
        204 |C          (8)   - LO(2) LONGITUDE OF LAST GRID POINT
        205 |C          (9)   - LATIT - LATITUDE OF PROJECTION INTERSECTION
        206 |C          (10)  - RESERVED
        207 |C          (11)  - SCANNING MODE FLAG (RIGHT ADJ COPY OF OCTET 28)
        208 |C          (12)  - LONGITUDINAL DIR GRID LENGTH
        209 |C          (13)  - LATITUDINAL DIR GRID LENGTH
        210 |C       LAMBERT CONFORMAL GRIDS
        211 |C          (2)   - NX NR POINTS ALONG X-AXIS
        212 |C          (3)   - NY NR POINTS ALONG Y-AXIS
        213 |C          (4)   - LA1 LAT OF ORIGIN (LOWER LEFT)
        214 |C          (5)   - LO1 LON OF ORIGIN (LOWER LEFT)
        215 |C          (6)   - RESOLUTION (RIGHT ADJ COPY OF OCTET 17)
        216 |C          (7)   - LOV - ORIENTATION OF GRID
        217 |C          (8)   - DX - X-DIR INCREMENT
        218 |C          (9)   - DY - Y-DIR INCREMENT
        219 |C          (10)  - PROJECTION CENTER FLAG
        220 |C          (11)  - SCANNING MODE FLAG (RIGHT ADJ COPY OF OCTET 28)
        221 |C          (12)  - LATIN 1 - FIRST LAT FROM POLE OF SECANT CONE INTER
        222 |C          (13)  - LATIN 2 - SECOND LAT FROM POLE OF SECANT CONE INTER
        223 |C       STAGGERED ARAKAWA ROTATED LAT/LON GRIDS (TYPE 203)
        224 |C          (2)   - N(I) NR POINTS ON LATITUDE CIRCLE
        225 |C          (3)   - N(J) NR POINTS ON LONGITUDE MERIDIAN
        226 |C          (4)   - LA(1) LATITUDE OF ORIGIN
        227 |C          (5)   - LO(1) LONGITUDE OF ORIGIN
        228 |C          (6)   - RESOLUTION FLAG (RIGHT ADJ COPY OF OCTET 17)
        229 |C          (7)   - LA(2) LATITUDE OF CENTER
        230 |C          (8)   - LO(2) LONGITUDE OF CENTER
        231 |C          (9)   - DI LATITUDINAL DIRECTION OF INCREMENT
        232 |C          (10)  - DJ LONGITUDINAL DIRECTION INCREMENT
        233 |C          (11)  - SCANNING MODE FLAG (RIGHT ADJ COPY OF OCTET 28)
        234 |C     KBMS       - BITMAP DESCRIBING LOCATION OF OUTPUT ELEMENTS.
        235 |C                            (ALWAYS CONSTRUCTED)
        236 |C     KPTR       - ARRAY CONTAINING STORAGE FOR FOLLOWING PARAMETERS
        237 |C          (1)   - TOTAL LENGTH OF GRIB MESSAGE
        238 |C          (2)   - LENGTH OF INDICATOR (SECTION  0)
        239 |C          (3)   - LENGTH OF PDS       (SECTION  1)
        240 |C          (4)   - LENGTH OF GDS       (SECTION  2)
        241 |C          (5)   - LENGTH OF BMS       (SECTION  3)
        242 |C          (6)   - LENGTH OF BDS       (SECTION  4)
        243 |C          (7)   - VALUE OF CURRENT BYTE
        244 |C          (8)   - BIT POINTER
        245 |C          (9)   - GRIB START BIT NR
        246 |C         (10)   - GRIB/GRID ELEMENT COUNT
        247 |C         (11)   - NR UNUSED BITS AT END OF SECTION 3
        248 |C         (12)   - BIT MAP FLAG (COPY OF BMS OCTETS 5,6)
        249 |C         (13)   - NR UNUSED BITS AT END OF SECTION 2
        250 |C         (14)   - BDS FLAGS (RIGHT ADJ COPY OF OCTET 4)
        251 |C         (15)   - NR UNUSED BITS AT END OF SECTION 4
        252 |C     KRET       - FLAG INDICATING QUALITY OF COMPLETION
        253 |C
        254 |C REMARKS: WHEN DECODING IS COMPLETED, DATA AT EACH GRID POINT HAS BEEN
        255 |C          RETURNED IN THE UNITS SPECIFIED IN THE GRIB MANUAL.
        256 |C
        257 |C          VALUES FOR RETURN FLAG (KRET)
        258 |C     KRET = 0 - NORMAL RETURN, NO ERRORS
        259 |C          = 1 - 'GRIB' NOT FOUND IN FIRST 100 CHARS
        260 |C          = 2 - '7777' NOT IN CORRECT LOCATION
        261 |C          = 3 - UNPACKED FIELD IS LARGER THAN 260000
        262 |C          = 4 - GDS/ GRID NOT ONE OF CURRENTLY ACCEPTED VALUES
        263 |C          = 5 - GRID NOT CURRENTLY AVAIL FOR CENTER INDICATED
        264 |C          = 8 - TEMP GDS INDICATED, BUT GDS FLAG IS OFF
        265 |C          = 9 - GDS INDICATES SIZE MISMATCH WITH STD GRID
        266 |C          =10 - INCORRECT CENTER INDICATOR
        267 |C          =11 - BINARY DATA SECTION (BDS) NOT COMPLETELY PROCESSED.
        268 |C                PROGRAM IS NOT SET TO PROCESS FLAG COMBINATIONS
        269 |C                SHOWN IN OCTETS 4 AND 14.
        270 |C          =12 - BINARY DATA SECTION (BDS) NOT COMPLETELY PROCESSED.
        271 |C                PROGRAM IS NOT SET TO PROCESS FLAG COMBINATIONS
        272 |C
        273 |C   SUBPROGRAM CAN BE CALLED FROM A MULTIPROCESSING ENVIRONMENT.
        274 |C
        275 |C ATTRIBUTES:
        276 |C   LANGUAGE: FORTRAN 90
        277 |C
        278 |C$$$
        279 |C                                                         4 AUG 1988
        280 |C                               W3FI63
        281 |C
        282 |C
        283 |C                       GRIB UNPACKING ROUTINE
        284 |C
        285 |C
        286 |C       THIS ROUTINE WILL UNPACK A 'GRIB' FIELD TO THE EXACT GRID
        287 |C  TYPE SPECIFIED IN THE MESSAGE, RETURN A BIT MAP AND MAKE THE
        288 |C  VALUES OF THE PRODUCT DEFINITION SEC   (PDS) AND THE GRID
        289 |C  DESCRIPTION SEC   (GDS) AVAILABLE IN RETURN ARRAYS.
        290 |C  SEE "GRIB - THE WMO FORMAT FOR THE STORAGE OF WEATHER PRODUCT
        291 |C  INFORMATION AND THE EXCHANGE OF WEATHER PRODUCT MESSAGES IN
        292 |C  GRIDDED BINARY FORM" DATED JULY 1, 1988 BY JOHN D. STACKPOLE
        293 |C  DOC, NOAA, NWS, NATIONAL METEOROLOGICAL CENTER.
        294 |C
        295 |C       THE CALL TO THE GRIB UNPACKING ROUTINE IS AS FOLLOWS:
        296 |C
        297 |C            CALL W3FI63(MSGA,KPDS,KGDS,LBMS,DATA,KPTR,KRET)
        298 |C
        299 |C  INPUT:
        300 |C
        301 |C       MSGA  = CONTAINS THE GRIB MESSAGE TO BE UNPACKED. CHARACTERS
        302 |C               "GRIB" MAY BEGIN ANYWHERE WITHIN FIRST 100 BYTES.
        303 |C
        304 |C  OUTPUT:
        305 |C
        306 |C       KPDS(100)      INTEGER*4
        307 |C               ARRAY TO CONTAIN THE ELEMENTS OF THE PRODUCT
        308 |C               DEFINITION SEC  .
        309 |C         (VERSION 1)
        310 |C            KPDS(1)  - ID OF CENTER
        311 |C            KPDS(2)  - MODEL IDENTIFICATION (SEE "GRIB" TABLE 1)
        312 |C            KPDS(3)  - GRID IDENTIFICATION (SEE "GRIB" TABLE 2)
        313 |C            KPDS(4)  - GDS/BMS FLAG
        314 |C                           BIT       DEFINITION
        315 |C                            25        0 - GDS OMITTED
        316 |C                                      1 - GDS INCLUDED
        317 |C                            26        0 - BMS OMITTED
        318 |C                                      1 - BMS INCLUDED
        319 |C                        NOTE:- LEFTMOST BIT = 1,
        320 |C                               RIGHTMOST BIT = 32
        321 |C            KPDS(5)  - INDICATOR OF PARAMETER (SEE "GRIB" TABLE 5)
        322 |C            KPDS(6)  - TYPE OF LEVEL (SEE "GRIB" TABLES 6 & 7)
        323 |C            KPDS(7)  - HEIGHT,PRESSURE,ETC  OF LEVEL
        324 |C            KPDS(8)  - YEAR INCLUDING CENTURY
        325 |C            KPDS(9)  - MONTH OF YEAR
        326 |C            KPDS(10) - DAY OF MONTH
        327 |C            KPDS(11) - HOUR OF DAY
        328 |C            KPDS(12) - MINUTE OF HOUR
        329 |C            KPDS(13) - INDICATOR OF FORECAST TIME UNIT (SEE "GRIB"
        330 |C                       TABLE 8)
        331 |C            KPDS(14) - TIME 1               (SEE "GRIB" TABLE 8A)
        332 |C            KPDS(15) - TIME 2               (SEE "GRIB" TABLE 8A)
        333 |C            KPDS(16) - TIME RANGE INDICATOR (SEE "GRIB" TABLE 8A)
        334 |C            KPDS(17) - NUMBER INCLUDED IN AVERAGE
        335 |C            KPDS(18) - EDITION NR OF GRIB SPECIFICATION
        336 |C            KPDS(19) - VERSION NR OF PARAMETER TABLE
        337 |C
        338 |C       KGDS(13)       INTEGER*4
        339 |C             ARRAY CONTAINING GDS ELEMENTS.
        340 |C
        341 |C            KGDS(1)  - DATA REPRESENTATION TYPE
        342 |C
        343 |C         LATITUDE/LONGITUDE GRIDS (SEE "GRIB" TABLE 10)
        344 |C            KGDS(2)  - N(I) NUMBER OF POINTS ON LATITUDE
        345 |C                       CIRCLE
        346 |C            KGDS(3)  - N(J) NUMBER OF POINTS ON LONGITUDE
        347 |C                       CIRCLE
        348 |C            KGDS(4)  - LA(1) LATITUDE OF ORIGIN
        349 |C            KGDS(5)  - LO(1) LONGITUDE OF ORIGIN
        350 |C            KGDS(6)  - RESOLUTION FLAG
        351 |C                           BIT       MEANING
        352 |C                            25       0 - DIRECTION INCREMENTS NOT
        353 |C                                         GIVEN
        354 |C                                     1 - DIRECTION INCREMENTS GIVEN
        355 |C            KGDS(7)  - LA(2) LATITUDE OF EXTREME POINT
        356 |C            KGDS(8)  - LO(2) LONGITUDE OF EXTREME POINT
        357 |C            KGDS(9)  - DI LATITUDINAL DIRECTION INCREMENT
        358 |C            KGDS(10) - REGULAR LAT/LON GRID
        359 |C                           DJ - LONGITUDINAL DIRECTION
        360 |C                                INCREMENT
        361 |C                       GAUSSIAN GRID
        362 |C                           N  - NUMBER OF LATITUDE CIRCLES
        363 |C                                BETWEEN A POLE AND THE EQUATOR
        364 |C            KGDS(11) - SCANNING MODE FLAG
        365 |C                           BIT       MEANING
        366 |C                            25       0 - POINTS ALONG A LATITUDE
        367 |C                                         SCAN FROM WEST TO EAST
        368 |C                                     1 - POINTS ALONG A LATITUDE
        369 |C                                         SCAN FROM EAST TO WEST
        370 |C                            26       0 - POINTS ALONG A MERIDIAN
        371 |C                                         SCAN FROM NORTH TO SOUTH
        372 |C                                     1 - POINTS ALONG A MERIDIAN
        373 |C                                         SCAN FROM SOUTH TO NORTH
        374 |C                            27       0 - POINTS SCAN FIRST ALONG
        375 |C                                         CIRCLES OF LATITUDE, THEN
        376 |C                                         ALONG MERIDIANS
        377 |C                                         (FORTRAN: (I,J))
        378 |C                                     1 - POINTS SCAN FIRST ALONG
        379 |C                                         MERIDIANS THEN ALONG
        380 |C                                         CIRCLES OF LATITUDE
        381 |C                                         (FORTRAN: (J,I))
        382 |C
        383 |C         POLAR STEREOGRAPHIC GRIDS  (SEE GRIB TABLE 12)
        384 |C            KGDS(2)  - N(I) NR POINTS ALONG LAT CIRCLE
        385 |C            KGDS(3)  - N(J) NR POINTS ALONG LON CIRCLE
        386 |C            KGDS(4)  - LA(1) LATITUDE OF ORIGIN
        387 |C            KGDS(5)  - LO(1) LONGITUDE OF ORIGIN
        388 |C            KGDS(6)  - RESERVED
        389 |C            KGDS(7)  - LOV GRID ORIENTATION
        390 |C            KGDS(8)  - DX - X DIRECTION INCREMENT
        391 |C            KGDS(9)  - DY - Y DIRECTION INCREMENT
        392 |C            KGDS(10) - PROJECTION CENTER FLAG
        393 |C            KGDS(11) - SCANNING MODE
        394 |C
        395 |C         SPHERICAL HARMONIC COEFFICIENTS (SEE "GRIB" TABLE 14)
        396 |C            KGDS(2)  - J PENTAGONAL RESOLUTION PARAMETER
        397 |C            KGDS(3)  - K PENTAGONAL RESOLUTION PARAMETER
        398 |C            KGDS(4)  - M PENTAGONAL RESOLUTION PARAMETER
        399 |C            KGDS(5)  - REPRESENTATION TYPE
        400 |C            KGDS(6)  - COEFFICIENT STORAGE MODE
        401 |C
        402 |C       MERCATOR GRIDS
        403 |C            KGDS(2)   - N(I) NR POINTS ON LATITUDE CIRCLE
        404 |C            KGDS(3)   - N(J) NR POINTS ON LONGITUDE MERIDIAN
        405 |C            KGDS(4)   - LA(1) LATITUDE OF ORIGIN
        406 |C            KGDS(5)   - LO(1) LONGITUDE OF ORIGIN
        407 |C            KGDS(6)   - RESOLUTION FLAG
        408 |C            KGDS(7)   - LA(2) LATITUDE OF LAST GRID POINT
        409 |C            KGDS(8)   - LO(2) LONGITUDE OF LAST GRID POINT
        410 |C            KGDS(9)   - LATIN - LATITUDE OF PROJECTION INTERSECTION
        411 |C            KGDS(10)  - RESERVED
        412 |C            KGDS(11)  - SCANNING MODE FLAG
        413 |C            KGDS(12)  - LONGITUDINAL DIR GRID LENGTH
        414 |C            KGDS(13)  - LATITUDINAL DIR GRID LENGTH
        415 |C       LAMBERT CONFORMAL GRIDS
        416 |C            KGDS(2)   - NX NR POINTS ALONG X-AXIS
        417 |C            KGDS(3)   - NY NR POINTS ALONG Y-AXIS
        418 |C            KGDS(4)   - LA1 LAT OF ORIGIN (LOWER LEFT)
        419 |C            KGDS(5)   - LO1 LON OF ORIGIN (LOWER LEFT)
        420 |C            KGDS(6)   - RESOLUTION (RIGHT ADJ COPY OF OCTET 17)
        421 |C            KGDS(7)   - LOV - ORIENTATION OF GRID
        422 |C            KGDS(8)   - DX - X-DIR INCREMENT
        423 |C            KGDS(9)   - DY - Y-DIR INCREMENT
        424 |C            KGDS(10)  - PROJECTION CENTER FLAG
        425 |C            KGDS(11)  - SCANNING MODE FLAG
        426 |C            KGDS(12)  - LATIN 1 - FIRST LAT FROM POLE OF
        427 |C                        SECANT CONE INTERSECTION
        428 |C            KGDS(13)  - LATIN 2 - SECOND LAT FROM POLE OF
        429 |C                        SECANT CONE INTERSECTION
        430 |C
        431 |C       LBMS(*)    LOGICAL
        432 |C               ARRAY TO CONTAIN THE BIT MAP DESCRIBING THE
        433 |C               PLACEMENT OF DATA IN THE OUTPUT ARRAY.  IF A
        434 |C               BIT MAP IS NOT INCLUDED IN THE SOURCE MESSAGE,
        435 |C               ONE WILL BE GENERATED AUTOMATICALLY BY THE
        436 |C               UNPACKING ROUTINE.
        437 |C
        438 |C
        439 |C       DATA(*)    REAL*4
        440 |C               THIS ARRAY WILL CONTAIN THE UNPACKED DATA POINTS.
        441 |C
        442 |C                      NOTE:- 65160 IS MAXIMUN FIELD SIZE ALLOWABLE
        443 |C
        444 |C       KPTR(10)       INTEGER*4
        445 |C               ARRAY CONTAINING STORAGE FOR THE FOLLOWING
        446 |C               PARAMETERS.
        447 |C
        448 |C                 (1)  -    UNUSED
        449 |C                 (2)  -    UNUSED
        450 |C                 (3)  -    LENGTH OF PDS (IN BYTES)
        451 |C                 (4)  -    LENGTH OF GDS (IN BYTES)
        452 |C                 (5)  -    LENGTH OF BMS (IN BYTES)
        453 |C                 (6)  -    LENGTH OF BDS (IN BYTES)
        454 |C                 (7)  -    USED BY UNPACKING ROUTINE
        455 |C                 (8)  -    NUMBER OF DATA POINTS FOR GRID
        456 |C                 (9)  -    "GRIB" CHARACTERS START IN BYTE NUMBER
        457 |C                 (10) -    USED BY UNPACKING ROUTINE
        458 |C
        459 |C
        460 |C       KRET      INTEGER*4
        461 |C                 THIS VARIABLE WILL CONTAIN THE RETURN INDICATOR.
        462 |C
        463 |C                 0    -    NO ERRORS DETECTED.
        464 |C
        465 |C                 1    -    'GRIB' NOT FOUND IN FIRST 100
        466 |C                           CHARACTERS.
        467 |C
        468 |C                 2    -    '7777' NOT FOUND, EITHER MISSING OR
        469 |C                           TOTAL OF SEC   COUNTS OF INDIVIDUAL
        470 |C                           SECTIONS  IS INCORRECT.
        471 |C
        472 |C                 3    -    UNPACKED FIELD IS LARGER THAN 65160.
        473 |C
        474 |C                 4    -    IN GDS, DATA REPRESENTATION TYPE
        475 |C                           NOT ONE OF THE CURRENTLY ACCEPTABLE
        476 |C                           VALUES. SEE "GRIB" TABLE 9. VALUE
        477 |C                           OF INCORRECT TYPE RETURNED IN KGDS(1).
        478 |C
        479 |C                 5    -    GRID INDICATED IN KPDS(3) IS NOT
        480 |C                           AVAILABLE FOR THE CENTER INDICATED IN
        481 |C                           KPDS(1) AND NO GDS SENT.
        482 |C
        483 |C                 7    -    EDITION INDICATED IN KPDS(18) HAS NOT
        484 |C                           YET BEEN INCLUDED IN THE DECODER.
        485 |C
        486 |C                 8    -    GRID IDENTIFICATION = 255 (NOT STANDARD
        487 |C                           GRID) BUT FLAG INDICATING PRESENCE OF
        488 |C                           GDS IS TURNED OFF. NO METHOD OF
        489 |C                           GENERATING PROPER GRID.
        490 |C
        491 |C                 9    -    PRODUCT OF KGDS(2) AND KGDS(3) DOES NOT
        492 |C                           MATCH STANDARD NUMBER OF POINTS FOR THIS
        493 |C                           GRID (FOR OTHER THAN SPECTRALS). THIS
        494 |C                           WILL OCCUR ONLY IF THE GRID.
        495 |C                           IDENTIFICATION, KPDS(3), AND A
        496 |C                           TRANSMITTED GDS ARE INCONSISTENT.
        497 |C
        498 |C                10    -    CENTER INDICATOR WAS NOT ONE INDICATED
        499 |C                           IN "GRIB" TABLE 1.  PLEASE CONTACT AD
        500 |C                           PRODUCTION MANAGEMENT BRANCH (W/NMC42)
        501 |C                                     IF THIS ERROR IS ENCOUNTERED.
        502 |C
        503 |C                11    -    BINARY DATA SECTION (BDS) NOT COMPLETELY
        504 |C                           PROCESSED.  PROGRAM IS NOT SET TO PROCESS
        505 |C                           FLAG COMBINATIONS AS SHOWN IN
        506 |C                           OCTETS 4 AND 14.
        507 |C
        508 |C
        509 |C  LIST OF TEXT MESSAGES FROM CODE
        510 |C
        511 |C
        512 |C  W3FI63/FI632
        513 |C
        514 |C            'HAVE ENCOUNTERED A NEW GRID FOR NMC, PLEASE NOTIFY
        515 |C            AUTOMATION DIVISION, PRODUCTION MANAGEMENT BRANCH
        516 |C            (W/NMC42)'
        517 |C
        518 |C            'HAVE ENCOUNTERED A NEW GRID FOR ECMWF, PLEASE NOTIFY
        519 |C            AUTOMATION DIVISION, PRODUCTION MANAGEMENT BRANCH
        520 |C            (W/NMC42)'
        521 |C
        522 |C            'HAVE ENCOUNTERED A NEW GRID FOR U.K. METEOROLOGICAL
        523 |C            OFFICE, BRACKNELL.  PLEASE NOTIFY AUTOMATION DIVISION,
        524 |C            PRODUCTION MANAGEMENT BRANCH (W/NMC42)'
        525 |C
        526 |C            'HAVE ENCOUNTERED A NEW GRID FOR FNOC, PLEASE NOTIFY
        527 |C            AUTOMATION DIVISION, PRODUCTION MANAGEMENT BRANCH
        528 |C            (W/NMC42)'
        529 |C
        530 |C
        531 |C  W3FI63/FI633
        532 |C
        533 |C            'POLAR STEREO PROCESSING NOT AVAILABLE'  *
        534 |C
        535 |C  W3FI63/FI634
        536 |C
        537 |C            'WARNING - BIT MAP MAY NOT BE ASSOCIATED WITH SPHERICAL
        538 |C            COEFFICIENTS'
        539 |C
        540 |C
        541 |C  W3FI63/FI637
        542 |C
        543 |C            'NO CURRENT LISTING OF FNOC GRIDS'      *
        544 |C
        545 |C
        546 |C  * WILL BE AVAILABLE IN NEXT UPDATE
        547 |C  ***************************************************************
        548 |C
        549 |C                       INCOMING MESSAGE HOLDER
        550 |      CHARACTER*1   MSGA(*)
        551 |C                       BIT MAP
        552 |      LOGICAL*1     KBMS(*)
        553 |C
        554 |C                       ELEMENTS OF PRODUCT DESCRIPTION SEC   (PDS)
        555 |      INTEGER       KPDS(*)
        556 |C                       ELEMENTS OF GRID DESCRIPTION SEC   (PDS)
        557 |      INTEGER       KGDS(*)
        558 |C
        559 |C                       CONTAINER FOR GRIB GRID
        560 |      REAL          DATA(*)
        561 |C
        562 |C                       ARRAY OF POINTERS AND COUNTERS
        563 |      INTEGER       KPTR(*)
        564 |C
        565 |C  *****************************************************************
        566 |      INTEGER       KKK,JSGN,JEXP,IFR,NPTS
        567 |      CHARACTER     KK(8)
        568 |      REAL          REALKK,FVAL1,FDIFF1
        569 |      EQUIVALENCE   (KK(1),KKK)
        570 |C  *****************************************************************
        571 |C        1.0 LOCATE BEGINNING OF 'GRIB' MESSAGE
        572 |C             FIND 'GRIB' CHARACTERS
        573 |C        2.0  USE COUNTS IN EACH DESCRIPTION SEC   TO DETERMINE
        574 |C             IF '7777' IS IN PROPER PLACE.
        575 |C        3.0  PARSE PRODUCT DEFINITION SECTION.
        576 |C        4.0  PARSE GRID DESCRIPTION SEC   (IF INCLUDED)
        577 |C        5.0  PARSE BIT MAP SEC   (IF INCLUDED)
        578 |C        6.0  USING INFORMATION FROM PRODUCT DEFINITION, GRID
        579 |C                  DESCRIPTION, AND BIT MAP SECTIONS.. EXTRACT
        580 |C                  DATA AND PLACE INTO PROPER ARRAY.
        581 |C  *******************************************************************
        582 |C
        583 |C                      MAIN DRIVER
        584 |C
        585 |C  *******************************************************************
        586 |      KPTR(10) = 0
        587 |C                  SEE IF PROPER 'GRIB' KEY EXISTS, THEN
        588 |C                  USING SEC   COUNTS, DETERMINE IF '7777'
        589 |C                  IS IN THE PROPER LOCATION
        590 |C
        591 |      CALL FI631(MSGA,KPTR,KPDS,KRET)
        592 |      IF(KRET.NE.0) THEN
        593 |          GO TO 900
        594 |      END IF
        595 |C     PRINT *,'FI631 KPTR',(KPTR(I),I=1,16)
        596 |C
        597 |C                  PARSE PARAMETERS FROM PRODUCT DESCRIPTION SECTION
        598 |C
        599 |      CALL FI632(MSGA,KPTR,KPDS,KRET)
        600 |      IF(KRET.NE.0) THEN
        601 |          GO TO 900
        602 |      END IF
        603 |C     PRINT *,'FI632 KPTR',(KPTR(I),I=1,16)
        604 |C
        605 |C                  IF AVAILABLE, EXTRACT NEW GRID DESCRIPTION
        606 |C
        607 |      IF (IAND(KPDS(4),128).NE.0) THEN
        608 |          CALL FI633(MSGA,KPTR,KGDS,KRET)
        609 |          IF(KRET.NE.0) THEN
        610 |              GO TO 900
        611 |          END IF
        612 |C         PRINT *,'FI633 KPTR',(KPTR(I),I=1,16)
        613 |      END IF
        614 |C
        615 |C                  EXTRACT OR GENERATE BIT MAP
        616 |C
        617 |      CALL FI634(MSGA,KPTR,KPDS,KGDS,KBMS,KRET)
        618 |      IF (KRET.NE.0) THEN
        619 |        IF (KRET.NE.9) THEN
        620 |          GO TO 900
        621 |        END IF
        622 |      END IF
        623 |C     PRINT *,'FI634 KPTR',(KPTR(I),I=1,16)
        624 |C
        625 |C                  USING INFORMATION FROM PDS, BMS AND BIT DATA SEC  ,
        626 |C                  EXTRACT AND SAVE IN GRIB GRID, ALL DATA ENTRIES.
        627 |C
        628 |      IF (KPDS(18).EQ.1) THEN
        629 |          CALL FI635(MSGA,KPTR,KPDS,KGDS,KBMS,DATA,KRET)
        630 |          IF (KPTR(3).EQ.50) THEN
        631 |C
        632 |C                     PDS EQUAL 50 BYTES
        633 |C                        THEREFORE SOMETHING SPECIAL IS GOING ON
        634 |C
        635 |C                        IN THIS CASE 2ND DIFFERENCE PACKING
        636 |C                                NEEDS TO BE UNDONE.
        637 |C
        638 |C                   EXTRACT FIRST VALUE FROM BYTE 41-44 PDS
        639 |C                              KPTR(9) CONTAINS OFFSET TO START OF
        640 |C                              GRIB MESSAGE.
        641 |C                   EXTRACT FIRST FIRST-DIFFERENCE FROM BYTES 45-48 PDS
        642 |C
        643 |C                  AND EXTRACT SCALE FACTOR (E) TO UNDO 2**E
        644 |C                  THAT WAS APPLIED PRIOR TO 2ND ORDER PACKING
        645 |C                  AND PLACED IN PDS BYTES 49-51
        646 |C                  FACTOR IS A SIGNED TWO BYTE INTEGER
        647 |C
        648 |C                  ALSO NEED THE DECIMAL SCALING FROM PDS(27-28)
        649 |C                  (AVAILABLE IN KPDS(22) FROM UNPACKER)
        650 |C                  TO UNDO THE DECIMAL SCALING APPLIED TO THE
        651 |C                  SECOND DIFFERENCES DURING UNPACKING.
        652 |C                  SECOND DIFFS ALWAYS PACKED WITH 0 DECIMAL SCALE
        653 |C                  BUT UNPACKER DOESNT KNOW THAT.
        654 |C
        655 |C             CALL GBYTE  (MSGA,FVAL1,KPTR(9)+384,32)
        656 |C
        657 |C         NOTE INTEGERS, CHARACTERS AND EQUIVALENCES
        658 |C         DEFINED ABOVE TO MAKE THIS KKK EXTRACTION
        659 |C         WORK AND LINE UP ON WORD BOUNDARIES
        660 |C
        661 |          CALL GBYTE (MSGA,KKK,KPTR(9)+384,32)
        662 |C
        663 |C       THE NEXT CODE WILL CONVERT THE IBM370 FOATING POINT
        664 |C       TO THE FLOATING POINT USED ON YOUR MACHINE.
        665 |C
        666 |C       1ST TEST TO SEE IN ON 32 OR 64 BIT WORD MACHINE
        667 |C       LW = 4 OR 8; IF 8 MAY BE A CRAY
        668 |C
        669 |              CALL W3FI01(LW)
        670 |              IF (LW.EQ.4) THEN
        671 |                  CALL GBYTE (KK,JSGN,0,1)
        672 |                  CALL GBYTE (KK,JEXP,1,7)
        673 |                  CALL GBYTE (KK,IFR,8,24)
        674 |              ELSE
        675 |                  CALL GBYTE (KK,JSGN,32,1)
        676 |                  CALL GBYTE (KK,JEXP,33,7)
        677 |                  CALL GBYTE (KK,IFR,40,24)
        678 |              ENDIF
        679 |C
        680 |              IF (IFR.EQ.0) THEN
        681 |                  REALKK = 0.0
        682 |              ELSE IF (JEXP.EQ.0.AND.IFR.EQ.0) THEN
        683 |                  REALKK = 0.0
        684 |              ELSE
        685 |                  REALKK = FLOAT(IFR) * 16.0 ** (JEXP - 64 - 6)
        686 |                  IF (JSGN.NE.0) REALKK = -REALKK
        687 |              END IF
        688 |              FVAL1 = REALKK
        689 |C
        690 |C             CALL GBYTE  (MSGA,FDIFF1,KPTR(9)+416,32)
        691 |C          (REPLACED BY FOLLOWING EXTRACTION)
        692 |C
        693 |              CALL GBYTE (MSGA,KKK,KPTR(9)+416,32)
        694 |C
        695 |C       THE NEXT CODE WILL CONVERT THE IBM370 FOATING POINT
        696 |C       TO THE FLOATING POINT USED ON YOUR MACHINE.
        697 |C
        698 |C       1ST TEST TO SEE IN ON 32 OR 64 BIT WORD MACHINE
        699 |C       LW = 4 OR 8; IF 8 MAY BE A CRAY
        700 |C
        701 |              CALL W3FI01(LW)
        702 |              IF (LW.EQ.4) THEN
        703 |                  CALL GBYTE (KK,JSGN,0,1)
        704 |                  CALL GBYTE (KK,JEXP,1,7)
        705 |                  CALL GBYTE (KK,IFR,8,24)
        706 |              ELSE
        707 |                  CALL GBYTE (KK,JSGN,32,1)
        708 |                  CALL GBYTE (KK,JEXP,33,7)
        709 |                  CALL GBYTE (KK,IFR,40,24)
        710 |              ENDIF
        711 |C
        712 |              IF (IFR.EQ.0) THEN
        713 |                  REALKK = 0.0
        714 |              ELSE IF (JEXP.EQ.0.AND.IFR.EQ.0) THEN
        715 |                  REALKK = 0.0
        716 |              ELSE
        717 |                  REALKK = FLOAT(IFR) * 16.0 ** (JEXP - 64 - 6)
        718 |                  IF (JSGN.NE.0) REALKK = -REALKK
        719 |              END IF
        720 |              FDIFF1 = REALKK
        721 |C
        722 |              CALL GBYTE  (MSGA,ISIGN,KPTR(9)+448,1)
        723 |              CALL GBYTE  (MSGA,ISCAL2,KPTR(9)+449,15)
        724 |              IF(ISIGN.GT.0) THEN
        725 |                  ISCAL2 = - ISCAL2
        726 |              ENDIF
        727 |C             PRINT *,'DELTA POINT 1-',FVAL1
        728 |C             PRINT *,'DELTA POINT 2-',FDIFF1
        729 |C             PRINT *,'DELTA POINT 3-',ISCAL2
        730 |              NPTS  = KPTR(10)
        731 |C             WRITE (6,FMT='(''  2ND DIFF POINTS IN FIELD = '',/,
        732 |C    &         10(3X,10F12.2,/))') (DATA(I),I=1,NPTS)
        733 |C             PRINT *,'DELTA POINT 4-',KPDS(22)
        734 |              CALL W3FI83 (DATA,NPTS,FVAL1,FDIFF1,
        735 |     &                            ISCAL2,KPDS(22),KPDS,KGDS)
        736 |C             WRITE (6,FMT='(''  2ND DIFF EXPANDED POINTS IN FIELD = '',
        737 |C    &            /,10(3X,10F12.2,/))') (DATA(I),I=1,NPTS)
        738 |C             WRITE (6,FMT='(''  END OF ARRAY IN FIELD = '',/,
        739 |C    &         10(3X,10F12.2,/))') (DATA(I),I=NPTS-5,NPTS)
        740 |          END IF
        741 |      ELSE
        742 |C         PRINT *,'FI635 NOT PROGRAMMED FOR EDITION NR',KPDS(18)
        743 |          KRET   = 7
        744 |      END IF
        745 |C
        746 |  900 RETURN
        747 |      END
 
>>>>> ATTRIBUTE AND CROSS REFERENCE SECTION <<<<<
 
 
 
IDENTIFIER NAME                  CROSS REFERENCE AND ATTRIBUTES
 
data                             Reference argument, Real(4) (1:*), Offset: 0, Alignment: full word
                                 0-560.21$  0-1.45  0-629.47  0-734.28
 
fdiff1                           Automatic, Real(4), Offset: 0, Alignment: full word
                                 0-568.34$  0-720.15@  0-734.44
 
fi631                            External Subroutine
                                 0-591.12
 
fi632                            External Subroutine
                                 0-599.12
 
fi633                            External Subroutine
                                 0-608.16
 
fi634                            External Subroutine
                                 0-617.12
 
fi635                            External Subroutine
                                 0-629.16
 
float                            Pure Intrinsic
                                 0-685.28  0-717.28
 
fval1                            Automatic, Real(4), Offset: 0, Alignment: full word
                                 0-568.28$  0-688.15@  0-734.38
 
gbyte                            External Subroutine
                                 0-661.16  0-671.24  0-672.24  0-673.24  0-675.24  0-676.24  0-677.24  0-693.20  0-703.24  0-704.24
                                 0-705.24  0-707.24  0-708.24  0-709.24  0-722.20  0-723.20
 
iand                             Pure Intrinsic
                                 0-607.11
 
ifr                              Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-566.35$  0-673.34  0-677.34  0-680.19  0-682.38  0-685.34  0-705.34  0-709.34  0-712.19  0-714.38
                                 0-717.34
 
iscal2                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-723.33  0-725.19@  0-725.30  0-735.35
 
isign                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-722.33  0-724.18
 
jexp                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-566.30$  0-672.34  0-676.34  0-682.24  0-685.50  0-704.34  0-708.34  0-714.24  0-717.50
 
jsgn                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-566.25$  0-671.34  0-675.34  0-686.23  0-703.34  0-707.34  0-718.23
 
kbms                             Reference argument, Logical(1) (1:*), Offset: 0, Alignment: byte
                                 0-552.21$  0-1.40  0-617.38  0-629.42
 
kgds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-557.21$  0-1.35  0-608.32  0-617.33  0-629.37  0-735.56
 
kk                               Automatic, Character(1) (1:8), Offset: 0, Alignment: quadruple word
                                 0-567.21$  0-569.22  0-671.31  0-672.31  0-673.31  0-675.31  0-676.31  0-677.31  0-703.31  0-704.31
                                 0-705.31  0-707.31  0-708.31  0-709.31
 
kkk                              Automatic, Integer(4), Offset: 0, Alignment: quadruple word
                                 0-566.21$  0-569.28  0-661.28  0-693.32
 
kpds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-555.21$  0-1.30  0-591.28  0-599.28  0-607.16  0-617.28  0-628.11  0-629.32  0-735.42  0-735.51
 
kptr                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-563.21$  0-1.50  0-586.7@  0-591.23  0-599.23  0-608.27  0-617.23  0-629.27  0-630.15  0-661.32
                                 0-693.36  0-722.39  0-723.40  0-730.23
 
kret                             Reference argument, Integer(4), Offset: 0, Alignment: full word
                                 0-1.55  0-591.33  0-592.10  0-599.33  0-600.10  0-608.37  0-609.14  0-617.43  0-618.11  0-619.13
                                 0-629.52  0-743.11@
 
lw                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-669.27  0-670.19  0-701.27  0-702.19
 
msga                             Reference argument, Character(1) (1:*), Offset: 0, Alignment: byte
                                 0-550.21$  0-1.25  0-591.18  0-599.18  0-608.22  0-617.18  0-629.22  0-661.23  0-693.27  0-722.28
                                 0-723.28
 
npts                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-566.39$  0-730.15@  0-734.33
 
realkk                           Automatic, Real(4), Offset: 0, Alignment: full word
                                 0-568.21$  0-681.18@  0-683.18@  0-685.18@  0-686.32@  0-686.44  0-688.23  0-713.18@  0-715.18@
                                 0-717.18@  0-718.32@  0-718.44  0-720.24
 
w3fi01                           External Subroutine
                                 0-669.20  0-701.20
 
w3fi63                           Subroutine
                                 0-1.18$
 
w3fi83                           External Subroutine
                                 0-734.20
 
** w3fi63   === End of Compilation 1 ===
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              DBG             DDIM            ESCAPE
         FULLPATH        I4              INLGLUE         NOLIBESSL
         NOLIBPOSIX      OBJECT          SOURCE          STRICT
         SWAPOMP         THREADED        UNWIND          NOZEROSIZE
  
         ==  Options Of Integer Type ==
         ALIAS_SIZE(65536)     FIXED(72)             MAXMEM(-1)
         OPTIMIZE(2)           SPILLSIZE(548)        STACKTEMP(0)
  
  
         ==  Options Of Character Type  ==
         64(LARGETYPE)         ALIAS(STD,INTPTR)     ALIGN(BINDC(POWER),STRUCT(NATURAL))
         ARCH(PWR6)            ATTR()                AUTODBL(NONE)
         DESCRIPTOR(V1)        DIRECTIVE(IBM*,IBMT)  ENUM()
         FLAG(I,I)             FLOAT(RNDSNGL,MAF,FOLD,RNGCHK,SINGLE)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LANGLVL(EXTENDED)     POSITION(APPENDOLD)   REALSIZE(4)
         NOSAVE()              TUNE(PWR6)            UNROLL(AUTO)
         XREF(FULL)            XLF2003(NOPOLYMORPHIC,NOBOZLITARGS,NOSTOPEXCEPT,NOVOLATILE,NOAUTOREALLOC,OLDNANINF)
         XLF77(NOLEADZERO,GEDIT77,NOBLANKPAD,OLDBOZ,INTARG,INTXOR,PERSISTENT,SOFTEOF)
         XLF90(NOSIGNEDZERO,NOAUTODEALLOC,OLDPAD)
  
>>>>> SOURCE SECTION <<<<<
        748 |      SUBROUTINE FI631(MSGA,KPTR,KPDS,KRET)
        749 |C$$$  SUBPROGRAM DOCUMENTATION  BLOCK
        750 |C                .      .    .                                       .
        751 |C SUBPROGRAM:    FI631       FIND 'GRIB' CHARS & RESET POINTERS
        752 |C   PRGMMR: BILL CAVANAUGH   ORG: W/NMC42    DATE: 91-09-13
        753 |C
        754 |C ABSTRACT: FIND 'GRIB; CHARACTERS AND SET POINTERS TO THE NEXT
        755 |C   BYTE FOLLOWING 'GRIB'. IF THEY EXIST EXTRACT COUNTS FROM GDS AND
        756 |C   BMS. EXTRACT COUNT FROM BDS. DETERMINE IF SUM OF COUNTS ACTUALLY
        757 |C   PLACES TERMINATOR '7777' AT THE CORRECT LOCATION.
        758 |C
        759 |C PROGRAM HISTORY LOG:
        760 |C   91-09-13  CAVANAUGH
        761 |C   95-10-31  IREDELL     REMOVED SAVES AND PRINTS
        762 |C
        763 |C USAGE:    CALL FI631(MSGA,KPTR,KPDS,KRET)
        764 |C   INPUT ARGUMENT LIST:
        765 |C     MSGA       - GRIB FIELD - "GRIB" THRU "7777"
        766 |C     KPTR       - ARRAY CONTAINING STORAGE FOR FOLLOWING PARAMETERS
        767 |C          (1)   - TOTAL LENGTH OF GRIB MESSAGE
        768 |C          (2)   - LENGTH OF INDICATOR (SECTION  0)
        769 |C          (3)   - LENGTH OF PDS       (SECTION  1)
        770 |C          (4)   - LENGTH OF GDS       (SECTION  2)
        771 |C          (5)   - LENGTH OF BMS       (SECTION  3)
        772 |C          (6)   - LENGTH OF BDS       (SECTION  4)
        773 |C          (7)   - VALUE OF CURRENT BYTE
        774 |C          (8)   - BIT POINTER
        775 |C          (9)   - GRIB START BIT NR
        776 |C         (10)   - GRIB/GRID ELEMENT COUNT
        777 |C         (11)   - NR UNUSED BITS AT END OF SECTION 3
        778 |C         (12)   - BIT MAP FLAG
        779 |C         (13)   - NR UNUSED BITS AT END OF SECTION 2
        780 |C         (14)   - BDS FLAGS
        781 |C         (15)   - NR UNUSED BITS AT END OF SECTION 4
        782 |C
        783 |C   OUTPUT ARGUMENT LIST:      (INCLUDING WORK ARRAYS)
        784 |C     KPDS     - ARRAY CONTAINING PDS ELEMENTS.
        785 |C          (1)   - ID OF CENTER
        786 |C          (2)   - MODEL IDENTIFICATION
        787 |C          (3)   - GRID IDENTIFICATION
        788 |C          (4)   - GDS/BMS FLAG
        789 |C          (5)   - INDICATOR OF PARAMETER
        790 |C          (6)   - TYPE OF LEVEL
        791 |C          (7)   - HEIGHT/PRESSURE , ETC OF LEVEL
        792 |C          (8)   - YEAR OF CENTURY
        793 |C          (9)   - MONTH OF YEAR
        794 |C          (10)  - DAY OF MONTH
        795 |C          (11)  - HOUR OF DAY
        796 |C          (12)  - MINUTE OF HOUR
        797 |C          (13)  - INDICATOR OF FORECAST TIME UNIT
        798 |C          (14)  - TIME RANGE 1
        799 |C          (15)  - TIME RANGE 2
        800 |C          (16)  - TIME RANGE FLAG
        801 |C          (17)  - NUMBER INCLUDED IN AVERAGE
        802 |C     KPTR       - SEE INPUT LIST
        803 |C     KRET       - ERROR RETURN
        804 |C
        805 |C REMARKS:
        806 |C     ERROR RETURNS
        807 |C     KRET  = 1  -  NO 'GRIB'
        808 |C             2  -  NO '7777' OR MISLOCATED (BY COUNTS)
        809 |C
        810 |C   SUBPROGRAM CAN BE CALLED FROM A MULTIPROCESSING ENVIRONMENT.
        811 |C
        812 |C ATTRIBUTES:
        813 |C   LANGUAGE: FORTRAN 77
        814 |C   MACHINE:  HDS9000
        815 |C
        816 |C$$$
        817 |C
        818 |C                       INCOMING MESSAGE HOLDER
        819 |      CHARACTER*1   MSGA(*)
        820 |C                       ARRAY OF POINTERS AND COUNTERS
        821 |      INTEGER       KPTR(*)
        822 |C                       PRODUCT DESCRIPTION SECTION DATA.
        823 |      INTEGER       KPDS(*)
        824 |C
        825 |      INTEGER       KRET
        826 |C
        827 |C  ******************************************************************
        828 |      KRET = 0
        829 |C  -------------------  FIND 'GRIB' KEY
        830 |      DO 50 I = 0, 839, 8
        831 |          CALL GBYTE (MSGA,MGRIB,I,32)
        832 |          IF (MGRIB.EQ.1196575042) THEN
        833 |              KPTR(9)   = I
        834 |              GO TO 60
        835 |          END IF
        836 |   50 CONTINUE
        837 |      KRET  = 1
        838 |      RETURN
        839 |   60 CONTINUE
        840 |C  -------------FOUND 'GRIB'
        841 |C                        SKIP GRIB CHARACTERS
        842 |C     PRINT *,'FI631 GRIB AT',I
        843 |      KPTR(8)   = KPTR(9) + 32
        844 |      CALL GBYTE (MSGA,ITOTAL,KPTR(8),24)
        845 |C                    HAVE LIFTED WHAT MAY BE A MSG TOTAL BYTE COUNT
        846 |      IPOINT    = KPTR(9) + ITOTAL * 8 - 32
        847 |      CALL GBYTE (MSGA,I7777,IPOINT,32)
        848 |      IF (I7777.EQ.926365495) THEN
        849 |C                 HAVE FOUND END OF MESSAGE '7777' IN PROPER LOCATION
        850 |C                 MARK AND PROCESS AS GRIB VERSION 1 OR HIGHER
        851 |C         PRINT *,'FI631 7777 AT',IPOINT
        852 |          KPTR(8)   = KPTR(8) + 24
        853 |          KPTR(1)   = ITOTAL
        854 |          KPTR(2)   = 8
        855 |          CALL GBYTE (MSGA,KPDS(18),KPTR(8),8)
        856 |          KPTR(8)   = KPTR(8) + 8
        857 |      ELSE
        858 |C                 CANNOT FIND END OF GRIB EDITION 1 MESSAGE
        859 |          KRET      = 2
        860 |          RETURN
        861 |      END IF
        862 |C  -------------------  PROCESS SECTION 1
        863 |C                   EXTRACT COUNT FROM PDS
        864 |C     PRINT *,'START OF PDS',KPTR(8)
        865 |      CALL GBYTE (MSGA,KPTR(3),KPTR(8),24)
        866 |      LOOK      = KPTR(8) + 56
        867 |C                   EXTRACT GDS/BMS FLAG
        868 |      CALL GBYTE (MSGA,KPDS(4),LOOK,8)
        869 |      KPTR(8)   = KPTR(8) + KPTR(3) * 8
        870 |C     PRINT *,'START OF GDS',KPTR(8)
        871 |      IF (IAND(KPDS(4),128).NE.0) THEN
        872 |C                   EXTRACT COUNT FROM GDS
        873 |          CALL GBYTE (MSGA,KPTR(4),KPTR(8),24)
        874 |          KPTR(8)   = KPTR(8) + KPTR(4) * 8
        875 |      ELSE
        876 |          KPTR(4)   = 0
        877 |      END IF
        878 |C     PRINT *,'START OF BMS',KPTR(8)
        879 |      IF (IAND(KPDS(4),64).NE.0) THEN
        880 |C                   EXTRACT COUNT FROM BMS
        881 |          CALL GBYTE (MSGA,KPTR(5),KPTR(8),24)
        882 |      ELSE
        883 |          KPTR(5)   = 0
        884 |      END IF
        885 |      KPTR(8)   = KPTR(8) + KPTR(5) * 8
        886 |C     PRINT *,'START OF BDS',KPTR(8)
        887 |C                   EXTRACT COUNT FROM BDS
        888 |      CALL GBYTE (MSGA,KPTR(6),KPTR(8),24)
        889 |C  ---------------  TEST FOR '7777'
        890 |C     PRINT *,(KPTR(KJ),KJ=1,10)
        891 |      KPTR(8)   = KPTR(8) + KPTR(6) * 8
        892 |C                   EXTRACT FOUR BYTES FROM THIS LOCATION
        893 |C     PRINT *,'FI631 LOOKING FOR 7777 AT',KPTR(8)
        894 |      CALL GBYTE (MSGA,K7777,KPTR(8),32)
        895 |      MATCH  = KPTR(2) + KPTR(3) + KPTR(4) + KPTR(5) + KPTR(6) + 4
        896 |      IF (K7777.NE.926365495.OR.MATCH.NE.KPTR(1)) THEN
        897 |          KRET  = 2
        898 |      ELSE
        899 |C         PRINT *,'FI631 7777 AT',KPTR(8)
        900 |          IF (KPDS(18).EQ.0) THEN
        901 |              KPTR(1)  = KPTR(2) + KPTR(3) + KPTR(4) + KPTR(5) +
        902 |     *                KPTR(6) + 4
        903 |          END IF
        904 |      END IF
        905 |C     PRINT *,'KPTR',(KPTR(I),I=1,16)
        906 |      RETURN
        907 |      END
 
>>>>> ATTRIBUTE AND CROSS REFERENCE SECTION <<<<<
 
 
 
IDENTIFIER NAME                  CROSS REFERENCE AND ATTRIBUTES
 
fi631                            Subroutine
                                 0-748.18$
 
gbyte                            External Subroutine
                                 0-831.16  0-844.12  0-847.12  0-855.16  0-865.12  0-868.12  0-873.16  0-881.16  0-888.12  0-894.12
 
i                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-830.13@  0-831.34  0-833.27
 
i7777                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-847.24  0-848.11
 
iand                             Pure Intrinsic
                                 0-871.11  0-879.11
 
ipoint                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-846.7@  0-847.30
 
itotal                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-844.24  0-846.29  0-853.23
 
k7777                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-894.24  0-896.11
 
kpds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-823.21$  0-748.34  0-855.28  0-868.24  0-871.16  0-879.16  0-900.15
 
kptr                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-821.21$  0-748.29  0-833.15@  0-843.7@  0-843.19  0-844.31  0-846.19  0-852.11@  0-852.23
                                 0-853.11@  0-854.11@  0-855.37  0-856.11@  0-856.23  0-865.24  0-865.32  0-866.19  0-869.7@
                                 0-869.19  0-869.29  0-873.28  0-873.36  0-874.11@  0-874.23  0-874.33  0-876.11@  0-881.28
                                 0-881.36  0-883.11@  0-885.7@  0-885.19  0-885.29  0-888.24  0-888.32  0-891.7@  0-891.19  0-891.29
                                 0-894.30  0-895.16  0-895.26  0-895.36  0-895.46  0-895.56  0-896.42  0-901.15@  0-901.26  0-901.36
                                 0-901.46  0-901.56  0-902.23
 
kret                             Reference argument, Integer(4), Offset: 0, Alignment: full word
                                 0-825.21$  0-748.39  0-828.7@  0-837.7@  0-859.11@  0-897.11@
 
look                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-866.7@  0-868.32
 
match                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-895.7@  0-896.33
 
mgrib                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-831.28  0-832.15
 
msga                             Reference argument, Character(1) (1:*), Offset: 0, Alignment: byte
                                 0-819.21$  0-748.24  0-831.23  0-844.19  0-847.19  0-855.23  0-865.19  0-868.19  0-873.23  0-881.23
                                 0-888.19  0-894.19
 
** fi631   === End of Compilation 2 ===
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              DBG             DDIM            ESCAPE
         FULLPATH        I4              INLGLUE         NOLIBESSL
         NOLIBPOSIX      OBJECT          SOURCE          STRICT
         SWAPOMP         THREADED        UNWIND          NOZEROSIZE
  
         ==  Options Of Integer Type ==
         ALIAS_SIZE(65536)     FIXED(72)             MAXMEM(-1)
         OPTIMIZE(2)           SPILLSIZE(548)        STACKTEMP(0)
  
  
         ==  Options Of Character Type  ==
         64(LARGETYPE)         ALIAS(STD,INTPTR)     ALIGN(BINDC(POWER),STRUCT(NATURAL))
         ARCH(PWR6)            ATTR()                AUTODBL(NONE)
         DESCRIPTOR(V1)        DIRECTIVE(IBM*,IBMT)  ENUM()
         FLAG(I,I)             FLOAT(RNDSNGL,MAF,FOLD,RNGCHK,SINGLE)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LANGLVL(EXTENDED)     POSITION(APPENDOLD)   REALSIZE(4)
         NOSAVE()              TUNE(PWR6)            UNROLL(AUTO)
         XREF(FULL)            XLF2003(NOPOLYMORPHIC,NOBOZLITARGS,NOSTOPEXCEPT,NOVOLATILE,NOAUTOREALLOC,OLDNANINF)
         XLF77(NOLEADZERO,GEDIT77,NOBLANKPAD,OLDBOZ,INTARG,INTXOR,PERSISTENT,SOFTEOF)
         XLF90(NOSIGNEDZERO,NOAUTODEALLOC,OLDPAD)
  
>>>>> SOURCE SECTION <<<<<
        908 |      SUBROUTINE FI632(MSGA,KPTR,KPDS,KRET)
        909 |C$$$  SUBPROGRAM DOCUMENTATION  BLOCK
        910 |C                .      .    .                                       .
        911 |C SUBPROGRAM:    FI632       GATHER INFO FROM PRODUCT DEFINITION SEC
        912 |C   PRGMMR: BILL CAVANAUGH   ORG: W/NMC42    DATE: 91-09-13
        913 |C
        914 |C ABSTRACT: EXTRACT INFORMATION FROM THE PRODUCT DESCRIPTION
        915 |C   SEC  , AND GENERATE LABEL INFORMATION TO PERMIT STORAGE
        916 |C   IN OFFICE NOTE 84 FORMAT.
        917 |C
        918 |C PROGRAM HISTORY LOG:
        919 |C   91-09-13  CAVANAUGH
        920 |C   93-12-08  CAVANAUGH   CORRECTED TEST FOR EDITION NUMBER INSTEAD
        921 |C                         OF VERSION NUMBER
        922 |C   95-10-31  IREDELL     REMOVED SAVES AND PRINTS
        923 |C   99-01-20  BALDWIN     MODIFIED TO HANDLE GRID 237
        924 |C
        925 |C USAGE:    CALL FI632(MSGA,KPTR,KPDS,KRET)
        926 |C   INPUT ARGUMENT LIST:
        927 |C     MSGA      - ARRAY CONTAINING GRIB MESSAGE
        928 |C     KPTR       - ARRAY CONTAINING STORAGE FOR FOLLOWING PARAMETERS
        929 |C          (1)   - TOTAL LENGTH OF GRIB MESSAGE
        930 |C          (2)   - LENGTH OF INDICATOR (SECTION  0)
        931 |C          (3)   - LENGTH OF PDS       (SECTION  1)
        932 |C          (4)   - LENGTH OF GDS       (SECTION  2)
        933 |C          (5)   - LENGTH OF BMS       (SECTION  3)
        934 |C          (6)   - LENGTH OF BDS       (SECTION  4)
        935 |C          (7)   - VALUE OF CURRENT BYTE
        936 |C          (8)   - BIT POINTER
        937 |C          (9)   - GRIB START BIT NR
        938 |C         (10)   - GRIB/GRID ELEMENT COUNT
        939 |C         (11)   - NR UNUSED BITS AT END OF SECTION 3
        940 |C         (12)   - BIT MAP FLAG
        941 |C         (13)   - NR UNUSED BITS AT END OF SECTION 2
        942 |C         (14)   - BDS FLAGS
        943 |C         (15)   - NR UNUSED BITS AT END OF SECTION 4
        944 |C
        945 |C   OUTPUT ARGUMENT LIST:      (INCLUDING WORK ARRAYS)
        946 |C     KPDS     - ARRAY CONTAINING PDS ELEMENTS.
        947 |C          (1)   - ID OF CENTER
        948 |C          (2)   - MODEL IDENTIFICATION
        949 |C          (3)   - GRID IDENTIFICATION
        950 |C          (4)   - GDS/BMS FLAG
        951 |C          (5)   - INDICATOR OF PARAMETER
        952 |C          (6)   - TYPE OF LEVEL
        953 |C          (7)   - HEIGHT/PRESSURE , ETC OF LEVEL
        954 |C          (8)   - YEAR OF CENTURY
        955 |C          (9)   - MONTH OF YEAR
        956 |C          (10)  - DAY OF MONTH
        957 |C          (11)  - HOUR OF DAY
        958 |C          (12)  - MINUTE OF HOUR
        959 |C          (13)  - INDICATOR OF FORECAST TIME UNIT
        960 |C          (14)  - TIME RANGE 1
        961 |C          (15)  - TIME RANGE 2
        962 |C          (16)  - TIME RANGE FLAG
        963 |C          (17)  - NUMBER INCLUDED IN AVERAGE
        964 |C          (18)  -
        965 |C          (19)  -
        966 |C          (20)  - NUMBER MISSING FROM AVGS/ACCUMULATIONS
        967 |C          (21)  - CENTURY
        968 |C          (22)  - UNITS DECIMAL SCALE FACTOR
        969 |C          (23)  - SUBCENTER
        970 |C     KPTR       - ARRAY CONTAINING STORAGE FOR FOLLOWING PARAMETERS
        971 |C                  SEE INPUT LIST
        972 |C     KRET   - ERROR RETURN
        973 |C
        974 |C REMARKS:
        975 |C        ERROR RETURN = 0 - NO ERRORS
        976 |C                     = 8 - TEMP GDS INDICATED, BUT NO GDS
        977 |C
        978 |C   SUBPROGRAM CAN BE CALLED FROM A MULTIPROCESSING ENVIRONMENT.
        979 |C
        980 |C ATTRIBUTES:
        981 |C   LANGUAGE: FORTRAN 77
        982 |C   MACHINE:  HDS9000
        983 |C
        984 |C$$$
        985 |C
        986 |C                       INCOMING MESSAGE HOLDER
        987 |      CHARACTER*1   MSGA(*)
        988 |C
        989 |C                       ARRAY OF POINTERS AND COUNTERS
        990 |      INTEGER       KPTR(*)
        991 |C                       PRODUCT DESCRIPTION SECTION ENTRIES
        992 |      INTEGER       KPDS(*)
        993 |C
        994 |      INTEGER       KRET
        995 |C  -------------------  PROCESS SECTION 1
        996 |      KPTR(8)  = KPTR(9) + KPTR(2) * 8 + 24
        997 |C  BYTE 4
        998 |C                   PARAMETER TABLE VERSION NR
        999 |          CALL GBYTE (MSGA,KPDS(19),KPTR(8),8)
       1000 |          KPTR(8)   = KPTR(8) + 8
       1001 |C  BYTE 5           IDENTIFICATION OF CENTER
       1002 |      CALL GBYTE (MSGA,KPDS(1),KPTR(8),8)
       1003 |      KPTR(8)   = KPTR(8) + 8
       1004 |C  BYTE 6
       1005 |C                       GET GENERATING PROCESS ID NR
       1006 |      CALL GBYTE (MSGA,KPDS(2),KPTR(8),8)
       1007 |      KPTR(8)   = KPTR(8) + 8
       1008 |C  BYTE 7
       1009 |C                      GRID DEFINITION
       1010 |      CALL GBYTE (MSGA,KPDS(3),KPTR(8),8)
       1011 |      KPTR(8)   = KPTR(8) + 8
       1012 |C  BYTE 8
       1013 |C                      GDS/BMS FLAGS
       1014 |C     CALL GBYTE (MSGA,KPDS(4),KPTR(8),8)
       1015 |      KPTR(8)   = KPTR(8) + 8
       1016 |C  BYTE 9
       1017 |C                      INDICATOR OF PARAMETER
       1018 |      CALL GBYTE (MSGA,KPDS(5),KPTR(8),8)
       1019 |      KPTR(8)   = KPTR(8) + 8
       1020 |C  BYTE 10
       1021 |C                      TYPE OF LEVEL
       1022 |      CALL GBYTE (MSGA,KPDS(6),KPTR(8),8)
       1023 |      KPTR(8)   = KPTR(8) + 8
       1024 |C  BYTE 11,12
       1025 |C                      HEIGHT/PRESSURE
       1026 |      CALL GBYTE (MSGA,KPDS(7),KPTR(8),16)
       1027 |      KPTR(8)   = KPTR(8) + 16
       1028 |C  BYTE 13
       1029 |C                      YEAR OF CENTURY
       1030 |      CALL GBYTE (MSGA,KPDS(8),KPTR(8),8)
       1031 |      KPTR(8)   = KPTR(8) + 8
       1032 |C  BYTE 14
       1033 |C                      MONTH OF YEAR
       1034 |      CALL GBYTE (MSGA,KPDS(9),KPTR(8),8)
       1035 |      KPTR(8)   = KPTR(8) + 8
       1036 |C  BYTE 15
       1037 |C                      DAY OF MONTH
       1038 |      CALL GBYTE (MSGA,KPDS(10),KPTR(8),8)
       1039 |      KPTR(8)   = KPTR(8) + 8
       1040 |C  BYTE 16
       1041 |C                      HOUR OF DAY
       1042 |      CALL GBYTE (MSGA,KPDS(11),KPTR(8),8)
       1043 |      KPTR(8)   = KPTR(8) + 8
       1044 |C  BYTE 17
       1045 |C                      MINUTE
       1046 |      CALL GBYTE (MSGA,KPDS(12),KPTR(8),8)
       1047 |      KPTR(8)   = KPTR(8) + 8
       1048 |C  BYTE 18
       1049 |C                      INDICATOR TIME UNIT RANGE
       1050 |      CALL GBYTE (MSGA,KPDS(13),KPTR(8),8)
       1051 |      KPTR(8)   = KPTR(8) + 8
       1052 |C  BYTE 19
       1053 |C                      P1 - PERIOD OF TIME
       1054 |      CALL GBYTE (MSGA,KPDS(14),KPTR(8),8)
       1055 |      KPTR(8)   = KPTR(8) + 8
       1056 |C  BYTE 20
       1057 |C                      P2 - PERIOD OF TIME
       1058 |      CALL GBYTE (MSGA,KPDS(15),KPTR(8),8)
       1059 |      KPTR(8)   = KPTR(8) + 8
       1060 |C  BYTE 21
       1061 |C                      TIME RANGE INDICATOR
       1062 |      CALL GBYTE (MSGA,KPDS(16),KPTR(8),8)
       1063 |      KPTR(8)   = KPTR(8) + 8
       1064 |C
       1065 |C     IF TIME RANGE INDICATOR IS 10, P1 IS PACKED IN
       1066 |C     PDS BYTES 19-20
       1067 |C
       1068 |      IF (KPDS(16).EQ.10) THEN
       1069 |          KPDS(14)  = KPDS(14) * 256 + KPDS(15)
       1070 |          KPDS(15)  = 0
       1071 |      END IF
       1072 |C  BYTE 22,23
       1073 |C                      NUMBER INCLUDED IN AVERAGE
       1074 |      CALL GBYTE (MSGA,KPDS(17),KPTR(8),16)
       1075 |      KPTR(8)   = KPTR(8) + 16
       1076 |C  BYTE 24
       1077 |C                      NUMBER MISSING FROM AVERAGES/ACCUMULATIONS
       1078 |      CALL GBYTE (MSGA,KPDS(20),KPTR(8),8)
       1079 |      KPTR(8)   = KPTR(8) + 8
       1080 |C  BYTE 25
       1081 |C                      IDENTIFICATION OF CENTURY
       1082 |      CALL GBYTE (MSGA,KPDS(21),KPTR(8),8)
       1083 |      KPTR(8)   = KPTR(8) + 8
       1084 |      IF (KPTR(3).GT.25) THEN
       1085 |C  BYTE 26              SUB CENTER NUMBER
       1086 |          CALL GBYTE (MSGA,KPDS(23),KPTR(8),8)
       1087 |          KPTR(8)   = KPTR(8) + 8
       1088 |          IF (KPTR(3).GE.28) THEN
       1089 |C  BYTE 27-28
       1090 |C                          UNITS DECIMAL SCALE FACTOR
       1091 |              CALL GBYTE (MSGA,ISIGN,KPTR(8),1)
       1092 |              KPTR(8)  = KPTR(8) + 1
       1093 |              CALL GBYTE (MSGA,IDEC,KPTR(8),15)
       1094 |              KPTR(8)  = KPTR(8) + 15
       1095 |              IF (ISIGN.GT.0) THEN
       1096 |                  KPDS(22)  = - IDEC
       1097 |              ELSE
       1098 |                  KPDS(22)  = IDEC
       1099 |              END IF
       1100 |              ISIZ  = KPTR(3) - 28
       1101 |              IF (ISIZ.LE.12) THEN
       1102 |C  BYTE  29
       1103 |                  CALL GBYTE (MSGA,KPDS(24),KPTR(8)+8,8)
       1104 |C  BYTE  30
       1105 |                  CALL GBYTE (MSGA,KPDS(25),KPTR(8)+16,8)
       1106 |C  BYTES 31-40                  CURRENTLY RESERVED FOR FUTURE USE
       1107 |                  KPTR(8)  = KPTR(8) + ISIZ * 8
       1108 |              ELSE
       1109 |C  BYTE  29
       1110 |                  CALL GBYTE (MSGA,KPDS(24),KPTR(8)+8,8)
       1111 |C  BYTE  30
       1112 |                  CALL GBYTE (MSGA,KPDS(25),KPTR(8)+16,8)
       1113 |C  BYTES 31-40                  CURRENTLY RESERVED FOR FUTURE USE
       1114 |                  KPTR(8)  = KPTR(8) + 12 * 8
       1115 |C  BYTES 41 - N                 LOCAL USE DATA
       1116 |                  CALL W3FI01(LW)
       1117 |                  MWDBIT  = LW * 8
       1118 |                  ISIZ    = KPTR(3) - 40
       1119 |                  ITER    = ISIZ / LW
       1120 |                  IF (MOD(ISIZ,LW).NE.0) ITER = ITER + 1
       1121 |                  CALL GBYTES (MSGA,KPDS(36),KPTR(8),MWDBIT,0,ITER)
       1122 |                  KPTR(8)  = KPTR(8) + ISIZ * 8
       1123 |              END IF
       1124 |          END IF
       1125 |      END IF
       1126 |C  ----------- TEST FOR NEW GRID
       1127 |      IF (IAND(KPDS(4),128).NE.0) THEN
       1128 |          IF (IAND(KPDS(4),64).NE.0) THEN
       1129 |              IF (KPDS(3).NE.255) THEN
       1130 |                  IF (KPDS(3).GE.21.AND.KPDS(3).LE.26)THEN
       1131 |                      RETURN
       1132 |                  ELSE IF (KPDS(3).GE.37.AND.KPDS(3).LE.44)THEN
       1133 |                      RETURN
       1134 |                  ELSE IF (KPDS(3).GE.61.AND.KPDS(3).LE.64) THEN
       1135 |                      RETURN
       1136 |                  END IF
       1137 |                  IF (KPDS(1).EQ.7) THEN
       1138 |                      IF (KPDS(3).GE.2.AND.KPDS(3).LE.3) THEN
       1139 |                      ELSE IF (KPDS(3).GE.5.AND.KPDS(3).LE.6) THEN
       1140 |                      ELSE IF (KPDS(3).EQ.8) THEN
       1141 |                      ELSE IF (KPDS(3).GE.27.AND.KPDS(3).LE.34) THEN
       1142 |                      ELSE IF (KPDS(3).EQ.50) THEN
       1143 |                      ELSE IF (KPDS(3).EQ.53) THEN
       1144 |                      ELSE IF (KPDS(3).GE.70.AND.KPDS(3).LE.77) THEN
       1145 |                      ELSE IF (KPDS(3).EQ.94) THEN
       1146 |                      ELSE IF (KPDS(3).EQ.98) THEN
       1147 |                      ELSE IF (KPDS(3).GE.100.AND.KPDS(3).LE.105) THEN
       1148 |                      ELSE IF (KPDS(3).EQ.126) THEN
       1149 |                      ELSE IF (KPDS(3).EQ.138) THEN
       1150 |                      ELSE IF (KPDS(3).GE.150.AND.KPDS(3).LE.176) THEN
       1151 |                      ELSE IF (KPDS(3).EQ.196) THEN
       1152 |                      ELSE IF (KPDS(3).GE.201.AND.KPDS(3).LE.254) THEN
       1153 |                      ELSE
       1154 |C                         PRINT *,' HAVE ENCOUNTERED A NEW GRID FOR',
       1155 |C    *                    ' NMC WITHOUT A GRID DESCRIPTION SECTION'
       1156 |C                         PRINT *,' PLEASE NOTIFY AUTOMATION DIVISION'
       1157 |C                         PRINT *,' PRODUCTION MANAGEMENT BRANCH'
       1158 |C                         PRINT *,' W/NMC42)'
       1159 |                      END IF
       1160 |                  ELSE IF (KPDS(1).EQ.98) THEN
       1161 |                      IF (KPDS(3).GE.1.AND.KPDS(3).LE.16) THEN
       1162 |                      ELSE
       1163 |C                         PRINT *,' HAVE ENCOUNTERED A NEW GRID FOR',
       1164 |C    *                    ' ECMWF WITHOUT A GRID DESCRIPTION SECTION'
       1165 |C                         PRINT *,' PLEASE NOTIFY AUTOMATION DIVISION'
       1166 |C                         PRINT *,' PRODUCTION MANAGEMENT BRANCH'
       1167 |C                         PRINT *,' W/NMC42)'
       1168 |                      END IF
       1169 |                  ELSE IF (KPDS(1).EQ.74) THEN
       1170 |                      IF (KPDS(3).GE.1.AND.KPDS(3).LE.12) THEN
       1171 |                      ELSE IF (KPDS(3).GE.21.AND.KPDS(3).LE.26)THEN
       1172 |                      ELSE IF (KPDS(3).GE.61.AND.KPDS(3).LE.64) THEN
       1173 |                      ELSE IF (KPDS(3).GE.70.AND.KPDS(3).LE.77) THEN
       1174 |                      ELSE
       1175 |C                         PRINT *,' HAVE ENCOUNTERED A NEW GRID FOR',
       1176 |C    *                            ' U.K. MET OFFICE, BRACKNELL',
       1177 |C    *                            ' WITHOUT A GRID DESCRIPTION SECTION'
       1178 |C                         PRINT *,' PLEASE NOTIFY AUTOMATION DIVISION'
       1179 |C                         PRINT *,' PRODUCTION MANAGEMENT BRANCH'
       1180 |C                         PRINT *,' W/NMC42)'
       1181 |                      END IF
       1182 |                  ELSE IF (KPDS(1).EQ.58) THEN
       1183 |                      IF (KPDS(3).GE.1.AND.KPDS(3).LE.12) THEN
       1184 |                      ELSE
       1185 |C                         PRINT *,' HAVE ENCOUNTERED A NEW GRID FOR',
       1186 |C    *                      ' FNOC WITHOUT A GRID DESCRIPTION SECTION'
       1187 |C                         PRINT *,' PLEASE NOTIFY AUTOMATION DIVISION'
       1188 |C                         PRINT *,' PRODUCTION MANAGEMENT BRANCH'
       1189 |C                         PRINT *,' W/NMC42)'
       1190 |                      END IF
       1191 |                  END IF
       1192 |              END IF
       1193 |          END IF
       1194 |      END IF
       1195 |      RETURN
       1196 |      END
 
>>>>> ATTRIBUTE AND CROSS REFERENCE SECTION <<<<<
 
 
 
IDENTIFIER NAME                  CROSS REFERENCE AND ATTRIBUTES
 
fi632                            Subroutine
                                 0-908.18$
 
gbyte                            External Subroutine
                                 0-999.16  0-1002.12  0-1006.12  0-1010.12  0-1018.12  0-1022.12  0-1026.12  0-1030.12  0-1034.12
                                 0-1038.12  0-1042.12  0-1046.12  0-1050.12  0-1054.12  0-1058.12  0-1062.12  0-1074.12  0-1078.12
                                 0-1082.12  0-1086.16  0-1091.20  0-1093.20  0-1103.24  0-1105.24  0-1110.24  0-1112.24
 
gbytes                           External Subroutine
                                 0-1121.24
 
iand                             Pure Intrinsic
                                 0-1127.11  0-1128.15
 
idec                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1093.32  0-1096.33  0-1098.31
 
isign                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1091.32  0-1095.19
 
isiz                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1100.15@  0-1101.19  0-1107.40  0-1118.19@  0-1119.29  0-1120.27  0-1122.40
 
iter                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1119.19@  0-1120.42@  0-1120.49  0-1121.63
 
kpds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-992.21$  0-908.34  0-999.28  0-1002.24  0-1006.24  0-1010.24  0-1018.24  0-1022.24  0-1026.24
                                 0-1030.24  0-1034.24  0-1038.24  0-1042.24  0-1046.24  0-1050.24  0-1054.24  0-1058.24  0-1062.24
                                 0-1068.11  0-1069.11@  0-1069.23  0-1069.40  0-1070.11@  0-1074.24  0-1078.24  0-1082.24  0-1086.28
                                 0-1096.19@  0-1098.19@  0-1103.36  0-1105.36  0-1110.36  0-1112.36  0-1121.37  0-1127.16  0-1128.20
                                 0-1129.19  0-1130.23  0-1130.41  0-1132.28  0-1132.46  0-1134.28  0-1134.46  0-1137.23  0-1138.27
                                 0-1138.44  0-1139.32  0-1139.49  0-1140.32  0-1141.32  0-1141.50  0-1142.32  0-1143.32  0-1144.32
                                 0-1144.50  0-1145.32  0-1146.32  0-1147.32  0-1147.51  0-1148.32  0-1149.32  0-1150.32  0-1150.51
                                 0-1151.32  0-1152.32  0-1152.51  0-1160.28  0-1161.27  0-1161.44  0-1169.28  0-1170.27  0-1170.44
                                 0-1171.32  0-1171.50  0-1172.32  0-1172.50  0-1173.32  0-1173.50  0-1182.28  0-1183.27  0-1183.44
 
kptr                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-990.21$  0-908.29  0-996.7@  0-996.18  0-996.28  0-999.37  0-1000.11@  0-1000.23  0-1002.32
                                 0-1003.7@  0-1003.19  0-1006.32  0-1007.7@  0-1007.19  0-1010.32  0-1011.7@  0-1011.19  0-1015.7@
                                 0-1015.19  0-1018.32  0-1019.7@  0-1019.19  0-1022.32  0-1023.7@  0-1023.19  0-1026.32  0-1027.7@
                                 0-1027.19  0-1030.32  0-1031.7@  0-1031.19  0-1034.32  0-1035.7@  0-1035.19  0-1038.33  0-1039.7@
                                 0-1039.19  0-1042.33  0-1043.7@  0-1043.19  0-1046.33  0-1047.7@  0-1047.19  0-1050.33  0-1051.7@
                                 0-1051.19  0-1054.33  0-1055.7@  0-1055.19  0-1058.33  0-1059.7@  0-1059.19  0-1062.33  0-1063.7@
                                 0-1063.19  0-1074.33  0-1075.7@  0-1075.19  0-1078.33  0-1079.7@  0-1079.19  0-1082.33  0-1083.7@
                                 0-1083.19  0-1084.11  0-1086.37  0-1087.11@  0-1087.23  0-1088.15  0-1091.38  0-1092.15@  0-1092.26
                                 0-1093.37  0-1094.15@  0-1094.26  0-1100.23  0-1103.45  0-1105.45  0-1107.19@  0-1107.30  0-1110.45
                                 0-1112.45  0-1114.19@  0-1114.30  0-1118.29  0-1121.46  0-1122.19@  0-1122.30
 
kret                             Reference argument, Integer(4), Offset: 0, Alignment: full word
                                 0-994.21$  0-908.39
 
lw                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1116.31  0-1117.29  0-1119.36  0-1120.32
 
mod                              Pure Intrinsic
                                 0-1120.23
 
msga                             Reference argument, Character(1) (1:*), Offset: 0, Alignment: byte
                                 0-987.21$  0-908.24  0-999.23  0-1002.19  0-1006.19  0-1010.19  0-1018.19  0-1022.19  0-1026.19
                                 0-1030.19  0-1034.19  0-1038.19  0-1042.19  0-1046.19  0-1050.19  0-1054.19  0-1058.19  0-1062.19
                                 0-1074.19  0-1078.19  0-1082.19  0-1086.23  0-1091.27  0-1093.27  0-1103.31  0-1105.31  0-1110.31
                                 0-1112.31  0-1121.32
 
mwdbit                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1117.19@  0-1121.54
 
w3fi01                           External Subroutine
                                 0-1116.24
 
** fi632   === End of Compilation 3 ===
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              DBG             DDIM            ESCAPE
         FULLPATH        I4              INLGLUE         NOLIBESSL
         NOLIBPOSIX      OBJECT          SOURCE          STRICT
         SWAPOMP         THREADED        UNWIND          NOZEROSIZE
  
         ==  Options Of Integer Type ==
         ALIAS_SIZE(65536)     FIXED(72)             MAXMEM(-1)
         OPTIMIZE(2)           SPILLSIZE(548)        STACKTEMP(0)
  
  
         ==  Options Of Character Type  ==
         64(LARGETYPE)         ALIAS(STD,INTPTR)     ALIGN(BINDC(POWER),STRUCT(NATURAL))
         ARCH(PWR6)            ATTR()                AUTODBL(NONE)
         DESCRIPTOR(V1)        DIRECTIVE(IBM*,IBMT)  ENUM()
         FLAG(I,I)             FLOAT(RNDSNGL,MAF,FOLD,RNGCHK,SINGLE)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LANGLVL(EXTENDED)     POSITION(APPENDOLD)   REALSIZE(4)
         NOSAVE()              TUNE(PWR6)            UNROLL(AUTO)
         XREF(FULL)            XLF2003(NOPOLYMORPHIC,NOBOZLITARGS,NOSTOPEXCEPT,NOVOLATILE,NOAUTOREALLOC,OLDNANINF)
         XLF77(NOLEADZERO,GEDIT77,NOBLANKPAD,OLDBOZ,INTARG,INTXOR,PERSISTENT,SOFTEOF)
         XLF90(NOSIGNEDZERO,NOAUTODEALLOC,OLDPAD)
  
>>>>> SOURCE SECTION <<<<<
       1197 |      SUBROUTINE FI633(MSGA,KPTR,KGDS,KRET)
       1198 |C$$$  SUBPROGRAM DOCUMENTATION  BLOCK
       1199 |C                .      .    .                                       .
       1200 |C SUBPROGRAM:    FI633       EXTRACT INFO FROM GRIB-GDS
       1201 |C   PRGMMR: BILL CAVANAUGH   ORG: W/NMC42    DATE: 91-09-13
       1202 |C
       1203 |C ABSTRACT: EXTRACT INFORMATION ON UNLISTED GRID TO ALLOW
       1204 |C   CONVERSION TO OFFICE NOTE 84 FORMAT.
       1205 |C
       1206 |C PROGRAM HISTORY LOG:
       1207 |C   91-09-13  CAVANAUGH
       1208 |C   95-03-20  M.BALDWIN   FI633 MODIFICATION TO GET
       1209 |C                         DATA REP TYPES [KGDS(1)] 201 AND 202 TO WORK.
       1210 |C   95-10-31  IREDELL     REMOVED SAVES AND PRINTS
       1211 |C   98-09-08  BALDWIN     ADD DATA REP TYPE [KGDS(1)] 203
       1212 |C
       1213 |C
       1214 |C USAGE:    CALL FI633(MSGA,KPTR,KGDS,KRET)
       1215 |C   INPUT ARGUMENT LIST:
       1216 |C     MSGA      - ARRAY CONTAINING GRIB MESSAGE
       1217 |C     KPTR       - ARRAY CONTAINING STORAGE FOR FOLLOWING PARAMETERS
       1218 |C          (1)   - TOTAL LENGTH OF GRIB MESSAGE
       1219 |C          (2)   - LENGTH OF INDICATOR (SECTION  0)
       1220 |C          (3)   - LENGTH OF PDS       (SECTION  1)
       1221 |C          (4)   - LENGTH OF GDS       (SECTION  2)
       1222 |C          (5)   - LENGTH OF BMS       (SECTION  3)
       1223 |C          (6)   - LENGTH OF BDS       (SECTION  4)
       1224 |C          (7)   - VALUE OF CURRENT BYTE
       1225 |C          (8)   - BIT POINTER
       1226 |C          (9)   - GRIB START BIT NR
       1227 |C         (10)   - GRIB/GRID ELEMENT COUNT
       1228 |C         (11)   - NR UNUSED BITS AT END OF SECTION 3
       1229 |C         (12)   - BIT MAP FLAG
       1230 |C         (13)   - NR UNUSED BITS AT END OF SECTION 2
       1231 |C         (14)   - BDS FLAGS
       1232 |C         (15)   - NR UNUSED BITS AT END OF SECTION 4
       1233 |C
       1234 |C   OUTPUT ARGUMENT LIST:      (INCLUDING WORK ARRAYS)
       1235 |C     KGDS     - ARRAY CONTAINING GDS ELEMENTS.
       1236 |C          (1)   - DATA REPRESENTATION TYPE
       1237 |C          (19)  - NUMBER OF VERTICAL COORDINATE PARAMETERS
       1238 |C          (20)  - OCTET NUMBER OF THE LIST OF VERTICAL COORDINATE
       1239 |C                  PARAMETERS
       1240 |C                  OR
       1241 |C                  OCTET NUMBER OF THE LIST OF NUMBERS OF POINTS
       1242 |C                  IN EACH ROW
       1243 |C                  OR
       1244 |C                  255 IF NEITHER ARE PRESENT
       1245 |C          (21)  - FOR GRIDS WITH PL, NUMBER OF POINTS IN GRID
       1246 |C          (22)  - NUMBER OF WORDS IN EACH ROW
       1247 |C       LATITUDE/LONGITUDE GRIDS
       1248 |C          (2)   - N(I) NR POINTS ON LATITUDE CIRCLE
       1249 |C          (3)   - N(J) NR POINTS ON LONGITUDE MERIDIAN
       1250 |C          (4)   - LA(1) LATITUDE OF ORIGIN
       1251 |C          (5)   - LO(1) LONGITUDE OF ORIGIN
       1252 |C          (6)   - RESOLUTION FLAG
       1253 |C          (7)   - LA(2) LATITUDE OF EXTREME POINT
       1254 |C          (8)   - LO(2) LONGITUDE OF EXTREME POINT
       1255 |C          (9)   - DI LATITUDINAL DIRECTION OF INCREMENT
       1256 |C          (10)  - DJ LONGITUDINAL DIRECTION INCREMENT
       1257 |C          (11)  - SCANNING MODE FLAG
       1258 |C       POLAR STEREOGRAPHIC GRIDS
       1259 |C          (2)   - N(I) NR POINTS ALONG LAT CIRCLE
       1260 |C          (3)   - N(J) NR POINTS ALONG LON CIRCLE
       1261 |C          (4)   - LA(1) LATITUDE OF ORIGIN
       1262 |C          (5)   - LO(1) LONGITUDE OF ORIGIN
       1263 |C          (6)   - RESERVED
       1264 |C          (7)   - LOV GRID ORIENTATION
       1265 |C          (8)   - DX - X DIRECTION INCREMENT
       1266 |C          (9)   - DY - Y DIRECTION INCREMENT
       1267 |C          (10)  - PROJECTION CENTER FLAG
       1268 |C          (11)  - SCANNING MODE
       1269 |C       SPHERICAL HARMONIC COEFFICIENTS
       1270 |C          (2)   - J PENTAGONAL RESOLUTION PARAMETER
       1271 |C          (3)   - K      "          "         "
       1272 |C          (4)   - M      "          "         "
       1273 |C          (5)   - REPRESENTATION TYPE
       1274 |C          (6)   - COEFFICIENT STORAGE MODE
       1275 |C       MERCATOR GRIDS
       1276 |C          (2)   - N(I) NR POINTS ON LATITUDE CIRCLE
       1277 |C          (3)   - N(J) NR POINTS ON LONGITUDE MERIDIAN
       1278 |C          (4)   - LA(1) LATITUDE OF ORIGIN
       1279 |C          (5)   - LO(1) LONGITUDE OF ORIGIN
       1280 |C          (6)   - RESOLUTION FLAG
       1281 |C          (7)   - LA(2) LATITUDE OF LAST GRID POINT
       1282 |C          (8)   - LO(2) LONGITUDE OF LAST GRID POINT
       1283 |C          (9)   - LATIN - LATITUDE OF PROJECTION INTERSECTION
       1284 |C          (10)  - RESERVED
       1285 |C          (11)  - SCANNING MODE FLAG
       1286 |C          (12)  - LONGITUDINAL DIR GRID LENGTH
       1287 |C          (13)  - LATITUDINAL DIR GRID LENGTH
       1288 |C       LAMBERT CONFORMAL GRIDS
       1289 |C          (2)   - NX NR POINTS ALONG X-AXIS
       1290 |C          (3)   - NY NR POINTS ALONG Y-AXIS
       1291 |C          (4)   - LA1 LAT OF ORIGIN (LOWER LEFT)
       1292 |C          (5)   - LO1 LON OF ORIGIN (LOWER LEFT)
       1293 |C          (6)   - RESOLUTION (RIGHT ADJ COPY OF OCTET 17)
       1294 |C          (7)   - LOV - ORIENTATION OF GRID
       1295 |C          (8)   - DX - X-DIR INCREMENT
       1296 |C          (9)   - DY - Y-DIR INCREMENT
       1297 |C          (10)  - PROJECTION CENTER FLAG
       1298 |C          (11)  - SCANNING MODE FLAG
       1299 |C          (12)  - LATIN 1 - FIRST LAT FROM POLE OF SECANT CONE INTER
       1300 |C          (13)  - LATIN 2 - SECOND LAT FROM POLE OF SECANT CONE INTER
       1301 |C       STAGGERED ARAKAWA ROTATED LAT/LON GRIDS (203)
       1302 |C          (2)   - N(I) NR POINTS ON ROTATED LATITUDE CIRCLE
       1303 |C          (3)   - N(J) NR POINTS ON ROTATED LONGITUDE MERIDIAN
       1304 |C          (4)   - LA(1) LATITUDE OF ORIGIN
       1305 |C          (5)   - LO(1) LONGITUDE OF ORIGIN
       1306 |C          (6)   - RESOLUTION FLAG
       1307 |C          (7)   - LA(2) LATITUDE OF CENTER
       1308 |C          (8)   - LO(2) LONGITUDE OF CENTER
       1309 |C          (9)   - DI LATITUDINAL DIRECTION OF INCREMENT
       1310 |C          (10)  - DJ LONGITUDINAL DIRECTION INCREMENT
       1311 |C          (11)  - SCANNING MODE FLAG
       1312 |C     KPTR       - ARRAY CONTAINING STORAGE FOR FOLLOWING PARAMETERS
       1313 |C                  SEE INPUT LIST
       1314 |C     KRET       - ERROR RETURN
       1315 |C
       1316 |C REMARKS:
       1317 |C     KRET = 0
       1318 |C          = 4   - DATA REPRESENTATION TYPE NOT CURRENTLY ACCEPTABLE
       1319 |C
       1320 |C   SUBPROGRAM CAN BE CALLED FROM A MULTIPROCESSING ENVIRONMENT.
       1321 |C
       1322 |C ATTRIBUTES:
       1323 |C   LANGUAGE: FORTRAN 77
       1324 |C   MACHINE:  HDS9000
       1325 |C
       1326 |C$$$
       1327 |C  ************************************************************
       1328 |C                       INCOMING MESSAGE HOLDER
       1329 |      CHARACTER*1   MSGA(*)
       1330 |C
       1331 |C                       ARRAY GDS ELEMENTS
       1332 |      INTEGER       KGDS(*)
       1333 |C                       ARRAY OF POINTERS AND COUNTERS
       1334 |      INTEGER       KPTR(*)
       1335 |C
       1336 |      INTEGER       KRET
       1337 |C  ---------------------------------------------------------------
       1338 |      KRET    = 0
       1339 |C                PROCESS GRID DEFINITION SECTION (IF PRESENT)
       1340 |C             MAKE SURE BIT POINTER IS PROPERLY SET
       1341 |      KPTR(8)  = KPTR(9) + (KPTR(2)*8) + (KPTR(3)*8) + 24
       1342 |      NSAVE    = KPTR(8) - 24
       1343 |C  BYTE 4
       1344 |C                   NV - NR OF VERT COORD PARAMETERS
       1345 |      CALL GBYTE (MSGA,KGDS(19),KPTR(8),8)
       1346 |      KPTR(8)  = KPTR(8) + 8
       1347 |C  BYTE 5
       1348 |C                   PV - LOCATION - SEE FM92 MANUAL
       1349 |      CALL GBYTE (MSGA,KGDS(20),KPTR(8),8)
       1350 |      KPTR(8)  = KPTR(8) + 8
       1351 |C  BYTE 6
       1352 |C                      DATA REPRESENTATION TYPE
       1353 |      CALL GBYTE (MSGA,KGDS(1),KPTR(8),8)
       1354 |      KPTR(8)   = KPTR(8) + 8
       1355 |C           BYTES 7-32 ARE GRID DEFINITION DEPENDING ON
       1356 |C           DATA REPRESENTATION TYPE
       1357 |      IF (KGDS(1).EQ.0) THEN
       1358 |          GO TO 1000
       1359 |      ELSE IF (KGDS(1).EQ.1) THEN
       1360 |          GO TO 4000
       1361 |      ELSE IF (KGDS(1).EQ.2.OR.KGDS(1).EQ.5) THEN
       1362 |          GO TO 2000
       1363 |      ELSE IF (KGDS(1).EQ.3) THEN
       1364 |          GO TO 5000
       1365 |      ELSE IF (KGDS(1).EQ.4) THEN
       1366 |          GO TO 1000
       1367 |C     ELSE IF (KGDS(1).EQ.10) THEN
       1368 |C     ELSE IF (KGDS(1).EQ.14) THEN
       1369 |C     ELSE IF (KGDS(1).EQ.20) THEN
       1370 |C     ELSE IF (KGDS(1).EQ.24) THEN
       1371 |C     ELSE IF (KGDS(1).EQ.30) THEN
       1372 |C     ELSE IF (KGDS(1).EQ.34) THEN
       1373 |      ELSE IF (KGDS(1).EQ.50) THEN
       1374 |          GO TO 3000
       1375 |C     ELSE IF (KGDS(1).EQ.60) THEN
       1376 |C     ELSE IF (KGDS(1).EQ.70) THEN
       1377 |C     ELSE IF (KGDS(1).EQ.80) THEN
       1378 |      ELSE IF (KGDS(1).EQ.201.OR.KGDS(1).EQ.202.OR.KGDS(1).EQ.203) THEN
       1379 |          GO TO 1000
       1380 |      ELSE
       1381 |C                      MARK AS GDS/ UNKNOWN DATA REPRESENTATION TYPE
       1382 |          KRET     = 4
       1383 |          RETURN
       1384 |      END IF
       1385 |C     BYTE 33-N   VERTICAL COORDINATE PARAMETERS
       1386 |C  -----------
       1387 |C     BYTES 33-42 EXTENSIONS OF GRID DEFINITION FOR ROTATION
       1388 |C                 OR STRETCHING OF THE COORDINATE SYSTEM OR
       1389 |C                 LAMBERT CONFORMAL PROJECTION.
       1390 |C     BYTE 43-N   VERTICAL COORDINATE PARAMETERS
       1391 |C  -----------
       1392 |C     BYTES 33-52 EXTENSIONS OF GRID DEFINITION FOR STRETCHED
       1393 |C                 AND ROTATED COORDINATE SYSTEM
       1394 |C     BYTE 53-N   VERTICAL COORDINATE PARAMETERS
       1395 |C  -----------
       1396 |C ************************************************************
       1397 |C  ------------------- LATITUDE/LONGITUDE GRIDS
       1398 |C  ------------------- ARAKAWA STAGGERED, SEMI-STAGGERED, OR FILLED
       1399 |C                          ROTATED LAT/LON GRIDS
       1400 |C
       1401 |C  ------------------- BYTE 7-8     NR OF POINTS ALONG LATITUDE CIRCLE
       1402 | 1000 CONTINUE
       1403 |      CALL GBYTE (MSGA,KGDS(2),KPTR(8),16)
       1404 |      KPTR(8)  = KPTR(8) + 16
       1405 |C  ------------------- BYTE 9-10    NR OF POINTS ALONG LONG MERIDIAN
       1406 |      CALL GBYTE (MSGA,KGDS(3),KPTR(8),16)
       1407 |      KPTR(8)  = KPTR(8) + 16
       1408 |C  ------------------- BYTE 11-13   LATITUDE OF ORIGIN
       1409 |      CALL GBYTE (MSGA,KGDS(4),KPTR(8),24)
       1410 |      KPTR(8)  = KPTR(8) + 24
       1411 |      IF (IAND(KGDS(4),8388608).NE.0) THEN
       1412 |          KGDS(4)  =  IAND(KGDS(4),8388607) * (-1)
       1413 |      END IF
       1414 |C  ------------------- BYTE 14-16   LONGITUDE OF ORIGIN
       1415 |      CALL GBYTE (MSGA,KGDS(5),KPTR(8),24)
       1416 |      KPTR(8)  = KPTR(8) + 24
       1417 |      IF (IAND(KGDS(5),8388608).NE.0) THEN
       1418 |          KGDS(5)  =  - IAND(KGDS(5),8388607)
       1419 |      END IF
       1420 |C  ------------------- BYTE 17      RESOLUTION FLAG
       1421 |      CALL GBYTE (MSGA,KGDS(6),KPTR(8),8)
       1422 |      KPTR(8)  = KPTR(8) + 8
       1423 |C  ------------------- BYTE 18-20   LATITUDE OF LAST GRID POINT
       1424 |      CALL GBYTE (MSGA,KGDS(7),KPTR(8),24)
       1425 |      KPTR(8)  = KPTR(8) + 24
       1426 |      IF (IAND(KGDS(7),8388608).NE.0) THEN
       1427 |          KGDS(7)  =  - IAND(KGDS(7),8388607)
       1428 |      END IF
       1429 |C  ------------------- BYTE 21-23   LONGITUDE OF LAST GRID POINT
       1430 |      CALL GBYTE (MSGA,KGDS(8),KPTR(8),24)
       1431 |      KPTR(8)  = KPTR(8) + 24
       1432 |      IF (IAND(KGDS(8),8388608).NE.0) THEN
       1433 |          KGDS(8)  =  - IAND(KGDS(8),8388607)
       1434 |      END IF
       1435 |C  ------------------- BYTE 24-25   LATITUDINAL DIR INCREMENT
       1436 |      CALL GBYTE (MSGA,KGDS(9),KPTR(8),16)
       1437 |      KPTR(8)  = KPTR(8) + 16
       1438 |C  ------------------- BYTE 26-27   IF REGULAR LAT/LON GRID
       1439 |C                                       HAVE LONGIT DIR INCREMENT
       1440 |C                                   ELSE IF GAUSSIAN GRID
       1441 |C                                       HAVE NR OF LAT CIRCLES
       1442 |C                                       BETWEEN POLE AND EQUATOR
       1443 |      CALL GBYTE (MSGA,KGDS(10),KPTR(8),16)
       1444 |      KPTR(8)  = KPTR(8) + 16
       1445 |C  ------------------- BYTE 28      SCANNING MODE FLAGS
       1446 |      CALL GBYTE (MSGA,KGDS(11),KPTR(8),8)
       1447 |      KPTR(8)  = KPTR(8) + 8
       1448 |C  ------------------- BYTE 29-32   RESERVED
       1449 |C                             SKIP TO START OF BYTE 33
       1450 |      CALL GBYTE (MSGA,KGDS(12),KPTR(8),32)
       1451 |      KPTR(8)  = KPTR(8) + 32
       1452 |C  -------------------
       1453 |      GO TO 900
       1454 |C  ******************************************************************
       1455 |C            ' POLAR STEREO PROCESSING '
       1456 |C
       1457 |C  ------------------- BYTE 7-8     NR OF POINTS ALONG X=AXIS
       1458 | 2000 CONTINUE
       1459 |      CALL GBYTE (MSGA,KGDS(2),KPTR(8),16)
       1460 |      KPTR(8)  = KPTR(8) + 16
       1461 |C  ------------------- BYTE 9-10    NR OF POINTS ALONG Y-AXIS
       1462 |      CALL GBYTE (MSGA,KGDS(3),KPTR(8),16)
       1463 |      KPTR(8)  = KPTR(8) + 16
       1464 |C  ------------------- BYTE 11-13   LATITUDE OF ORIGIN
       1465 |      CALL GBYTE (MSGA,KGDS(4),KPTR(8),24)
       1466 |      KPTR(8)  = KPTR(8) + 24
       1467 |      IF (IAND(KGDS(4),8388608).NE.0) THEN
       1468 |          KGDS(4)  =  - IAND(KGDS(4),8388607)
       1469 |      END IF
       1470 |C  ------------------- BYTE 14-16   LONGITUDE OF ORIGIN
       1471 |      CALL GBYTE (MSGA,KGDS(5),KPTR(8),24)
       1472 |      KPTR(8)  = KPTR(8) + 24
       1473 |      IF (IAND(KGDS(5),8388608).NE.0) THEN
       1474 |          KGDS(5)  =   - IAND(KGDS(5),8388607)
       1475 |      END IF
       1476 |C  ------------------- BYTE 17      RESERVED
       1477 |      CALL GBYTE (MSGA,KGDS(6),KPTR(8),8)
       1478 |      KPTR(8)  = KPTR(8) + 8
       1479 |C  ------------------- BYTE 18-20   LOV ORIENTATION OF THE GRID
       1480 |      CALL GBYTE (MSGA,KGDS(7),KPTR(8),24)
       1481 |      KPTR(8)  = KPTR(8) + 24
       1482 |      IF (IAND(KGDS(7),8388608).NE.0) THEN
       1483 |          KGDS(7)  =  - IAND(KGDS(7),8388607)
       1484 |      END IF
       1485 |C  ------------------- BYTE 21-23   DX - THE X DIRECTION INCREMENT
       1486 |      CALL GBYTE (MSGA,KGDS(8),KPTR(8),24)
       1487 |      KPTR(8)  = KPTR(8) + 24
       1488 |      IF (IAND(KGDS(8),8388608).NE.0) THEN
       1489 |          KGDS(8)  =  - IAND(KGDS(8),8388607)
       1490 |      END IF
       1491 |C  ------------------- BYTE 24-26   DY - THE Y DIRECTION INCREMENT
       1492 |      CALL GBYTE (MSGA,KGDS(9),KPTR(8),24)
       1493 |      KPTR(8)  = KPTR(8) + 24
       1494 |      IF (IAND(KGDS(9),8388608).NE.0) THEN
       1495 |          KGDS(9)  =  - IAND(KGDS(9),8388607)
       1496 |      END IF
       1497 |C  ------------------- BYTE 27      PROJECTION CENTER FLAG
       1498 |      CALL GBYTE (MSGA,KGDS(10),KPTR(8),8)
       1499 |      KPTR(8)  = KPTR(8) + 8
       1500 |C  ------------------- BYTE 28      SCANNING MODE
       1501 |      CALL GBYTE (MSGA,KGDS(11),KPTR(8),8)
       1502 |      KPTR(8)  = KPTR(8) + 8
       1503 |C  ------------------- BYTE 29-32   RESERVED
       1504 |C                             SKIP TO START OF BYTE 33
       1505 |      CALL GBYTE (MSGA,KGDS(12),KPTR(8),32)
       1506 |      KPTR(8)  = KPTR(8) + 32
       1507 |C
       1508 |C  -------------------
       1509 |      GO TO 900
       1510 |C
       1511 |C  ******************************************************************
       1512 |C  ------------------- GRID DESCRIPTION FOR SPHERICAL HARMONIC COEFF.
       1513 |C
       1514 |C  ------------------- BYTE 7-8     J PENTAGONAL RESOLUTION PARAMETER
       1515 | 3000 CONTINUE
       1516 |      CALL GBYTE (MSGA,KGDS(2),KPTR(8),16)
       1517 |      KPTR(8)  = KPTR(8) + 16
       1518 |C  ------------------- BYTE 9-10    K PENTAGONAL RESOLUTION PARAMETER
       1519 |      CALL GBYTE (MSGA,KGDS(3),KPTR(8),16)
       1520 |      KPTR(8)  = KPTR(8) + 16
       1521 |C  ------------------- BYTE 11-12   M PENTAGONAL RESOLUTION PARAMETER
       1522 |      CALL GBYTE (MSGA,KGDS(4),KPTR(8),16)
       1523 |      KPTR(8)  = KPTR(8) + 16
       1524 |C  ------------------- BYTE 13 REPRESENTATION TYPE
       1525 |      CALL GBYTE (MSGA,KGDS(5),KPTR(8),8)
       1526 |      KPTR(8)  = KPTR(8) + 8
       1527 |C  ------------------- BYTE 14 COEFFICIENT STORAGE MODE
       1528 |      CALL GBYTE (MSGA,KGDS(6),KPTR(8),8)
       1529 |      KPTR(8)  = KPTR(8) + 8
       1530 |C  -------------------        EMPTY FIELDS - BYTES 15 - 32
       1531 |C                 SET TO START OF BYTE 33
       1532 |      KPTR(8)  = KPTR(8) + 18 * 8
       1533 |      GO TO 900
       1534 |C  ******************************************************************
       1535 |C                      PROCESS MERCATOR GRIDS
       1536 |C
       1537 |C  ------------------- BYTE 7-8     NR OF POINTS ALONG LATITUDE CIRCLE
       1538 | 4000 CONTINUE
       1539 |      CALL GBYTE (MSGA,KGDS(2),KPTR(8),16)
       1540 |      KPTR(8)  = KPTR(8) + 16
       1541 |C  ------------------- BYTE 9-10    NR OF POINTS ALONG LONG MERIDIAN
       1542 |      CALL GBYTE (MSGA,KGDS(3),KPTR(8),16)
       1543 |      KPTR(8)  = KPTR(8) + 16
       1544 |C  ------------------- BYTE 11-13   LATITUE OF ORIGIN
       1545 |      CALL GBYTE (MSGA,KGDS(4),KPTR(8),24)
       1546 |      KPTR(8)  = KPTR(8) + 24
       1547 |      IF (IAND(KGDS(4),8388608).NE.0) THEN
       1548 |          KGDS(4)  =  - IAND(KGDS(4),8388607)
       1549 |      END IF
       1550 |C  ------------------- BYTE 14-16   LONGITUDE OF ORIGIN
       1551 |      CALL GBYTE (MSGA,KGDS(5),KPTR(8),24)
       1552 |      KPTR(8)  = KPTR(8) + 24
       1553 |      IF (IAND(KGDS(5),8388608).NE.0) THEN
       1554 |          KGDS(5)  =  - IAND(KGDS(5),8388607)
       1555 |      END IF
       1556 |C  ------------------- BYTE 17      RESOLUTION FLAG
       1557 |      CALL GBYTE (MSGA,KGDS(6),KPTR(8),8)
       1558 |      KPTR(8)  = KPTR(8) + 8
       1559 |C  ------------------- BYTE 18-20   LATITUDE OF EXTREME POINT
       1560 |      CALL GBYTE (MSGA,KGDS(7),KPTR(8),24)
       1561 |      KPTR(8)  = KPTR(8) + 24
       1562 |      IF (IAND(KGDS(7),8388608).NE.0) THEN
       1563 |          KGDS(7)  =  - IAND(KGDS(7),8388607)
       1564 |      END IF
       1565 |C  ------------------- BYTE 21-23   LONGITUDE OF EXTREME POINT
       1566 |      CALL GBYTE (MSGA,KGDS(8),KPTR(8),24)
       1567 |      KPTR(8)  = KPTR(8) + 24
       1568 |      IF (IAND(KGDS(8),8388608).NE.0) THEN
       1569 |          KGDS(8)  =  - IAND(KGDS(8),8388607)
       1570 |      END IF
       1571 |C  ------------------- BYTE 24-26   LATITUDE OF PROJECTION INTERSECTION
       1572 |      CALL GBYTE (MSGA,KGDS(9),KPTR(8),24)
       1573 |      KPTR(8)  = KPTR(8) + 24
       1574 |      IF (IAND(KGDS(9),8388608).NE.0) THEN
       1575 |          KGDS(9)  =  - IAND(KGDS(9),8388607)
       1576 |      END IF
       1577 |C  ------------------- BYTE 27   RESERVED
       1578 |      CALL GBYTE (MSGA,KGDS(10),KPTR(8),8)
       1579 |      KPTR(8)  = KPTR(8) + 8
       1580 |C  ------------------- BYTE 28      SCANNING MODE
       1581 |      CALL GBYTE (MSGA,KGDS(11),KPTR(8),8)
       1582 |      KPTR(8)  = KPTR(8) + 8
       1583 |C  ------------------- BYTE 29-31   LONGITUDINAL DIR INCREMENT
       1584 |      CALL GBYTE (MSGA,KGDS(12),KPTR(8),24)
       1585 |      KPTR(8)  = KPTR(8) + 24
       1586 |      IF (IAND(KGDS(12),8388608).NE.0) THEN
       1587 |          KGDS(12)  =  - IAND(KGDS(12),8388607)
       1588 |      END IF
       1589 |C  ------------------- BYTE 32-34   LATITUDINAL DIR INCREMENT
       1590 |      CALL GBYTE (MSGA,KGDS(13),KPTR(8),24)
       1591 |      KPTR(8)  = KPTR(8) + 24
       1592 |      IF (IAND(KGDS(13),8388608).NE.0) THEN
       1593 |          KGDS(13)  =  - IAND(KGDS(13),8388607)
       1594 |      END IF
       1595 |C  ------------------- BYTE 35-42   RESERVED
       1596 |C                        SKIP TO START OF BYTE 43
       1597 |      KPTR(8)  = KPTR(8) + 8 * 8
       1598 |C  -------------------
       1599 |      GO TO 900
       1600 |C  ******************************************************************
       1601 |C                      PROCESS LAMBERT CONFORMAL
       1602 |C
       1603 |C  ------------------- BYTE 7-8     NR OF POINTS ALONG X-AXIS
       1604 | 5000 CONTINUE
       1605 |      CALL GBYTE (MSGA,KGDS(2),KPTR(8),16)
       1606 |      KPTR(8)  = KPTR(8) + 16
       1607 |C  ------------------- BYTE 9-10    NR OF POINTS ALONG Y-AXIS
       1608 |      CALL GBYTE (MSGA,KGDS(3),KPTR(8),16)
       1609 |      KPTR(8)  = KPTR(8) + 16
       1610 |C  ------------------- BYTE 11-13   LATITUDE OF ORIGIN
       1611 |      CALL GBYTE (MSGA,KGDS(4),KPTR(8),24)
       1612 |      KPTR(8)  = KPTR(8) + 24
       1613 |      IF (IAND(KGDS(4),8388608).NE.0) THEN
       1614 |          KGDS(4)  =  - IAND(KGDS(4),8388607)
       1615 |      END IF
       1616 |C  ------------------- BYTE 14-16   LONGITUDE OF ORIGIN (LOWER LEFT)
       1617 |      CALL GBYTE (MSGA,KGDS(5),KPTR(8),24)
       1618 |      KPTR(8)  = KPTR(8) + 24
       1619 |      IF (IAND(KGDS(5),8388608).NE.0) THEN
       1620 |          KGDS(5)  = - IAND(KGDS(5),8388607)
       1621 |      END IF
       1622 |C  ------------------- BYTE 17      RESOLUTION
       1623 |      CALL GBYTE (MSGA,KGDS(6),KPTR(8),8)
       1624 |      KPTR(8)  = KPTR(8) + 8
       1625 |C  ------------------- BYTE 18-20   LOV -ORIENTATION OF GRID
       1626 |      CALL GBYTE (MSGA,KGDS(7),KPTR(8),24)
       1627 |      KPTR(8)  = KPTR(8) + 24
       1628 |      IF (IAND(KGDS(7),8388608).NE.0) THEN
       1629 |          KGDS(7)  = - IAND(KGDS(7),8388607)
       1630 |      END IF
       1631 |C  ------------------- BYTE 21-23   DX - X-DIR INCREMENT
       1632 |      CALL GBYTE (MSGA,KGDS(8),KPTR(8),24)
       1633 |      KPTR(8)  = KPTR(8) + 24
       1634 |C  ------------------- BYTE 24-26   DY - Y-DIR INCREMENT
       1635 |      CALL GBYTE (MSGA,KGDS(9),KPTR(8),24)
       1636 |      KPTR(8)  = KPTR(8) + 24
       1637 |C  ------------------- BYTE 27       PROJECTION CENTER FLAG
       1638 |      CALL GBYTE (MSGA,KGDS(10),KPTR(8),8)
       1639 |      KPTR(8)  = KPTR(8) + 8
       1640 |C  ------------------- BYTE 28      SCANNING MODE
       1641 |      CALL GBYTE (MSGA,KGDS(11),KPTR(8),8)
       1642 |      KPTR(8)  = KPTR(8) + 8
       1643 |C  ------------------- BYTE 29-31   LATIN1 - 1ST LAT FROM POLE
       1644 |      CALL GBYTE (MSGA,KGDS(12),KPTR(8),24)
       1645 |      KPTR(8)  = KPTR(8) + 24
       1646 |      IF (IAND(KGDS(12),8388608).NE.0) THEN
       1647 |          KGDS(12)  =  - IAND(KGDS(12),8388607)
       1648 |      END IF
       1649 |C  ------------------- BYTE 32-34   LATIN2 - 2ND LAT FROM POLE
       1650 |      CALL GBYTE (MSGA,KGDS(13),KPTR(8),24)
       1651 |      KPTR(8)  = KPTR(8) + 24
       1652 |      IF (IAND(KGDS(13),8388608).NE.0) THEN
       1653 |          KGDS(13)  =  - IAND(KGDS(13),8388607)
       1654 |      END IF
       1655 |C  ------------------- BYTE 35-37   LATITUDE OF SOUTHERN POLE
       1656 |      CALL GBYTE (MSGA,KGDS(14),KPTR(8),24)
       1657 |      KPTR(8)  = KPTR(8) + 24
       1658 |      IF (IAND(KGDS(14),8388608).NE.0) THEN
       1659 |          KGDS(14)  =  - IAND(KGDS(14),8388607)
       1660 |      END IF
       1661 |C  ------------------- BYTE 38-40   LONGITUDE OF SOUTHERN POLE
       1662 |      CALL GBYTE (MSGA,KGDS(15),KPTR(8),24)
       1663 |      KPTR(8)  = KPTR(8) + 24
       1664 |      IF (IAND(KGDS(15),8388608).NE.0) THEN
       1665 |          KGDS(15)  =  - IAND(KGDS(15),8388607)
       1666 |      END IF
       1667 |C  ------------------- BYTE 41-42   RESERVED
       1668 |      CALL GBYTE (MSGA,KGDS(16),KPTR(8),16)
       1669 |      KPTR(8)  = KPTR(8) + 16
       1670 |C  -------------------
       1671 |  900 CONTINUE
       1672 |C
       1673 |C                        MORE CODE FOR GRIDS WITH PL
       1674 |C
       1675 |      IF (KGDS(19).EQ.0.OR.KGDS(19).EQ.255) THEN
       1676 |        IF (KGDS(20).NE.255) THEN
       1677 |          ISUM  = 0
       1678 |          KPTR(8)  = NSAVE + (KGDS(20) - 1) * 8
       1679 |          CALL GBYTES (MSGA,KGDS(22),KPTR(8),16,0,KGDS(3))
       1680 |          DO 910 J = 1, KGDS(3)
       1681 |              ISUM  = ISUM + KGDS(21+J)
       1682 |  910     CONTINUE
       1683 |          KGDS(21)  = ISUM
       1684 |        END IF
       1685 |      END IF
       1686 |      RETURN
       1687 |      END
 
>>>>> ATTRIBUTE AND CROSS REFERENCE SECTION <<<<<
 
 
 
IDENTIFIER NAME                  CROSS REFERENCE AND ATTRIBUTES
 
fi633                            Subroutine
                                 0-1197.18$
 
gbyte                            External Subroutine
                                 0-1345.12  0-1349.12  0-1353.12  0-1403.12  0-1406.12  0-1409.12  0-1415.12  0-1421.12  0-1424.12
                                 0-1430.12  0-1436.12  0-1443.12  0-1446.12  0-1450.12  0-1459.12  0-1462.12  0-1465.12  0-1471.12
                                 0-1477.12  0-1480.12  0-1486.12  0-1492.12  0-1498.12  0-1501.12  0-1505.12  0-1516.12  0-1519.12
                                 0-1522.12  0-1525.12  0-1528.12  0-1539.12  0-1542.12  0-1545.12  0-1551.12  0-1557.12  0-1560.12
                                 0-1566.12  0-1572.12  0-1578.12  0-1581.12  0-1584.12  0-1590.12  0-1605.12  0-1608.12  0-1611.12
                                 0-1617.12  0-1623.12  0-1626.12  0-1632.12  0-1635.12  0-1638.12  0-1641.12  0-1644.12  0-1650.12
                                 0-1656.12  0-1662.12  0-1668.12
 
gbytes                           External Subroutine
                                 0-1679.16
 
iand                             Pure Intrinsic
                                 0-1411.11  0-1412.23  0-1417.11  0-1418.25  0-1426.11  0-1427.25  0-1432.11  0-1433.25  0-1467.11
                                 0-1468.25  0-1473.11  0-1474.26  0-1482.11  0-1483.25  0-1488.11  0-1489.25  0-1494.11  0-1495.25
                                 0-1547.11  0-1548.25  0-1553.11  0-1554.25  0-1562.11  0-1563.25  0-1568.11  0-1569.25  0-1574.11
                                 0-1575.25  0-1586.11  0-1587.26  0-1592.11  0-1593.26  0-1613.11  0-1614.25  0-1619.11  0-1620.24
                                 0-1628.11  0-1629.24  0-1646.11  0-1647.26  0-1652.11  0-1653.26  0-1658.11  0-1659.26  0-1664.11
                                 0-1665.26
 
isum                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1677.11@  0-1681.15@  0-1681.23  0-1683.23
 
j                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1680.18@  0-1681.38
 
kgds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-1332.21$  0-1197.34  0-1345.24  0-1349.24  0-1353.24  0-1357.11  0-1359.16  0-1361.16  0-1361.32
                                 0-1363.16  0-1365.16  0-1373.16  0-1378.16  0-1378.34  0-1378.52  0-1403.24  0-1406.24  0-1409.24
                                 0-1411.16  0-1412.11@  0-1412.28  0-1415.24  0-1417.16  0-1418.11@  0-1418.30  0-1421.24  0-1424.24
                                 0-1426.16  0-1427.11@  0-1427.30  0-1430.24  0-1432.16  0-1433.11@  0-1433.30  0-1436.24  0-1443.24
                                 0-1446.24  0-1450.24  0-1459.24  0-1462.24  0-1465.24  0-1467.16  0-1468.11@  0-1468.30  0-1471.24
                                 0-1473.16  0-1474.11@  0-1474.31  0-1477.24  0-1480.24  0-1482.16  0-1483.11@  0-1483.30  0-1486.24
                                 0-1488.16  0-1489.11@  0-1489.30  0-1492.24  0-1494.16  0-1495.11@  0-1495.30  0-1498.24  0-1501.24
                                 0-1505.24  0-1516.24  0-1519.24  0-1522.24  0-1525.24  0-1528.24  0-1539.24  0-1542.24  0-1545.24
                                 0-1547.16  0-1548.11@  0-1548.30  0-1551.24  0-1553.16  0-1554.11@  0-1554.30  0-1557.24  0-1560.24
                                 0-1562.16  0-1563.11@  0-1563.30  0-1566.24  0-1568.16  0-1569.11@  0-1569.30  0-1572.24  0-1574.16
                                 0-1575.11@  0-1575.30  0-1578.24  0-1581.24  0-1584.24  0-1586.16  0-1587.11@  0-1587.31  0-1590.24
                                 0-1592.16  0-1593.11@  0-1593.31  0-1605.24  0-1608.24  0-1611.24  0-1613.16  0-1614.11@  0-1614.30
                                 0-1617.24  0-1619.16  0-1620.11@  0-1620.29  0-1623.24  0-1626.24  0-1628.16  0-1629.11@  0-1629.29
                                 0-1632.24  0-1635.24  0-1638.24  0-1641.24  0-1644.24  0-1646.16  0-1647.11@  0-1647.31  0-1650.24
                                 0-1652.16  0-1653.11@  0-1653.31  0-1656.24  0-1658.16  0-1659.11@  0-1659.31  0-1662.24  0-1664.16
                                 0-1665.11@  0-1665.31  0-1668.24  0-1675.11  0-1675.28  0-1676.13  0-1678.31  0-1679.29  0-1679.51
                                 0-1680.25  0-1681.30  0-1683.11@
 
kptr                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-1334.21$  0-1197.29  0-1341.7@  0-1341.18  0-1341.29  0-1341.43  0-1342.18  0-1345.33  0-1346.7@
                                 0-1346.18  0-1349.33  0-1350.7@  0-1350.18  0-1353.32  0-1354.7@  0-1354.19  0-1403.32  0-1404.7@
                                 0-1404.18  0-1406.32  0-1407.7@  0-1407.18  0-1409.32  0-1410.7@  0-1410.18  0-1415.32  0-1416.7@
                                 0-1416.18  0-1421.32  0-1422.7@  0-1422.18  0-1424.32  0-1425.7@  0-1425.18  0-1430.32  0-1431.7@
                                 0-1431.18  0-1436.32  0-1437.7@  0-1437.18  0-1443.33  0-1444.7@  0-1444.18  0-1446.33  0-1447.7@
                                 0-1447.18  0-1450.33  0-1451.7@  0-1451.18  0-1459.32  0-1460.7@  0-1460.18  0-1462.32  0-1463.7@
                                 0-1463.18  0-1465.32  0-1466.7@  0-1466.18  0-1471.32  0-1472.7@  0-1472.18  0-1477.32  0-1478.7@
                                 0-1478.18  0-1480.32  0-1481.7@  0-1481.18  0-1486.32  0-1487.7@  0-1487.18  0-1492.32  0-1493.7@
                                 0-1493.18  0-1498.33  0-1499.7@  0-1499.18  0-1501.33  0-1502.7@  0-1502.18  0-1505.33  0-1506.7@
                                 0-1506.18  0-1516.32  0-1517.7@  0-1517.18  0-1519.32  0-1520.7@  0-1520.18  0-1522.32  0-1523.7@
                                 0-1523.18  0-1525.32  0-1526.7@  0-1526.18  0-1528.32  0-1529.7@  0-1529.18  0-1532.7@  0-1532.18
                                 0-1539.32  0-1540.7@  0-1540.18  0-1542.32  0-1543.7@  0-1543.18  0-1545.32  0-1546.7@  0-1546.18
                                 0-1551.32  0-1552.7@  0-1552.18  0-1557.32  0-1558.7@  0-1558.18  0-1560.32  0-1561.7@  0-1561.18
                                 0-1566.32  0-1567.7@  0-1567.18  0-1572.32  0-1573.7@  0-1573.18  0-1578.33  0-1579.7@  0-1579.18
                                 0-1581.33  0-1582.7@  0-1582.18  0-1584.33  0-1585.7@  0-1585.18  0-1590.33  0-1591.7@  0-1591.18
                                 0-1597.7@  0-1597.18  0-1605.32  0-1606.7@  0-1606.18  0-1608.32  0-1609.7@  0-1609.18  0-1611.32
                                 0-1612.7@  0-1612.18  0-1617.32  0-1618.7@  0-1618.18  0-1623.32  0-1624.7@  0-1624.18  0-1626.32
                                 0-1627.7@  0-1627.18  0-1632.32  0-1633.7@  0-1633.18  0-1635.32  0-1636.7@  0-1636.18  0-1638.33
                                 0-1639.7@  0-1639.18  0-1641.33  0-1642.7@  0-1642.18  0-1644.33  0-1645.7@  0-1645.18  0-1650.33
                                 0-1651.7@  0-1651.18  0-1656.33  0-1657.7@  0-1657.18  0-1662.33  0-1663.7@  0-1663.18  0-1668.33
                                 0-1669.7@  0-1669.18  0-1678.11@  0-1679.38
 
kret                             Reference argument, Integer(4), Offset: 0, Alignment: full word
                                 0-1336.21$  0-1197.39  0-1338.7@  0-1382.11@
 
msga                             Reference argument, Character(1) (1:*), Offset: 0, Alignment: byte
                                 0-1329.21$  0-1197.24  0-1345.19  0-1349.19  0-1353.19  0-1403.19  0-1406.19  0-1409.19  0-1415.19
                                 0-1421.19  0-1424.19  0-1430.19  0-1436.19  0-1443.19  0-1446.19  0-1450.19  0-1459.19  0-1462.19
                                 0-1465.19  0-1471.19  0-1477.19  0-1480.19  0-1486.19  0-1492.19  0-1498.19  0-1501.19  0-1505.19
                                 0-1516.19  0-1519.19  0-1522.19  0-1525.19  0-1528.19  0-1539.19  0-1542.19  0-1545.19  0-1551.19
                                 0-1557.19  0-1560.19  0-1566.19  0-1572.19  0-1578.19  0-1581.19  0-1584.19  0-1590.19  0-1605.19
                                 0-1608.19  0-1611.19  0-1617.19  0-1623.19  0-1626.19  0-1632.19  0-1635.19  0-1638.19  0-1641.19
                                 0-1644.19  0-1650.19  0-1656.19  0-1662.19  0-1668.19  0-1679.24
 
nsave                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1342.7@  0-1678.22
 
** fi633   === End of Compilation 4 ===
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              DBG             DDIM            ESCAPE
         FULLPATH        I4              INLGLUE         NOLIBESSL
         NOLIBPOSIX      OBJECT          SOURCE          STRICT
         SWAPOMP         THREADED        UNWIND          NOZEROSIZE
  
         ==  Options Of Integer Type ==
         ALIAS_SIZE(65536)     FIXED(72)             MAXMEM(-1)
         OPTIMIZE(2)           SPILLSIZE(548)        STACKTEMP(0)
  
  
         ==  Options Of Character Type  ==
         64(LARGETYPE)         ALIAS(STD,INTPTR)     ALIGN(BINDC(POWER),STRUCT(NATURAL))
         ARCH(PWR6)            ATTR()                AUTODBL(NONE)
         DESCRIPTOR(V1)        DIRECTIVE(IBM*,IBMT)  ENUM()
         FLAG(I,I)             FLOAT(RNDSNGL,MAF,FOLD,RNGCHK,SINGLE)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LANGLVL(EXTENDED)     POSITION(APPENDOLD)   REALSIZE(4)
         NOSAVE()              TUNE(PWR6)            UNROLL(AUTO)
         XREF(FULL)            XLF2003(NOPOLYMORPHIC,NOBOZLITARGS,NOSTOPEXCEPT,NOVOLATILE,NOAUTOREALLOC,OLDNANINF)
         XLF77(NOLEADZERO,GEDIT77,NOBLANKPAD,OLDBOZ,INTARG,INTXOR,PERSISTENT,SOFTEOF)
         XLF90(NOSIGNEDZERO,NOAUTODEALLOC,OLDPAD)
  
>>>>> SOURCE SECTION <<<<<
       1688 |      SUBROUTINE FI634(MSGA,KPTR,KPDS,KGDS,KBMS,KRET)
       1689 |C$$$  SUBPROGRAM DOCUMENTATION  BLOCK
       1690 |C                .      .    .                                       .
       1691 |C SUBPROGRAM:    FI634       EXTRACT OR GENERATE BIT MAP FOR OUTPUT
       1692 |C   PRGMMR: BILL CAVANAUGH   ORG: W/NMC42    DATE: 91-09-13
       1693 |C
       1694 |C ABSTRACT: IF BIT MAP SEC   IS AVAILABLE IN GRIB MESSAGE, EXTRACT
       1695 |C   FOR PROGRAM USE, OTHERWISE GENERATE AN APPROPRIATE BIT MAP.
       1696 |C
       1697 |C PROGRAM HISTORY LOG:
       1698 |C   91-09-13  CAVANAUGH
       1699 |C   91-11-12  CAVANAUGH  MODIFIED SIZE OF ECMWF GRIDS 5 - 8.
       1700 |C   95-10-31  IREDELL     REMOVED SAVES AND PRINTS
       1701 |C   97-02-12  W BOSTELMAN CORRECTS ECMWF US GRID 2 PROCESSING
       1702 |C   97-09-19  IREDELL     VECTORIZED BITMAP DECODER
       1703 |C   98-09-02  Gilbert     Corrected error in map size for U.S. Grid 92
       1704 |C   98-09-08  BALDWIN    ADD GRIDS 190,192
       1705 |C   99-01-20  BALDWIN    ADD GRIDS 236,237
       1706 |C
       1707 |C USAGE:    CALL FI634(MSGA,KPTR,KPDS,KGDS,KBMS,KRET)
       1708 |C   INPUT ARGUMENT LIST:
       1709 |C     MSGA       - BUFR MESSAGE
       1710 |C     KPTR       - ARRAY CONTAINING STORAGE FOR FOLLOWING PARAMETERS
       1711 |C          (1)   - TOTAL LENGTH OF GRIB MESSAGE
       1712 |C          (2)   - LENGTH OF INDICATOR (SECTION  0)
       1713 |C          (3)   - LENGTH OF PDS       (SECTION  1)
       1714 |C          (4)   - LENGTH OF GDS       (SECTION  2)
       1715 |C          (5)   - LENGTH OF BMS       (SECTION  3)
       1716 |C          (6)   - LENGTH OF BDS       (SECTION  4)
       1717 |C          (7)   - VALUE OF CURRENT BYTE
       1718 |C          (8)   - BIT POINTER
       1719 |C          (9)   - GRIB START BIT NR
       1720 |C         (10)   - GRIB/GRID ELEMENT COUNT
       1721 |C         (11)   - NR UNUSED BITS AT END OF SECTION 3
       1722 |C         (12)   - BIT MAP FLAG
       1723 |C         (13)   - NR UNUSED BITS AT END OF SECTION 2
       1724 |C         (14)   - BDS FLAGS
       1725 |C         (15)   - NR UNUSED BITS AT END OF SECTION 4
       1726 |C     KPDS     - ARRAY CONTAINING PDS ELEMENTS.
       1727 |C          (1)   - ID OF CENTER
       1728 |C          (2)   - MODEL IDENTIFICATION
       1729 |C          (3)   - GRID IDENTIFICATION
       1730 |C          (4)   - GDS/BMS FLAG
       1731 |C          (5)   - INDICATOR OF PARAMETER
       1732 |C          (6)   - TYPE OF LEVEL
       1733 |C          (7)   - HEIGHT/PRESSURE , ETC OF LEVEL
       1734 |C          (8)   - YEAR OF CENTURY
       1735 |C          (9)   - MONTH OF YEAR
       1736 |C          (10)  - DAY OF MONTH
       1737 |C          (11)  - HOUR OF DAY
       1738 |C          (12)  - MINUTE OF HOUR
       1739 |C          (13)  - INDICATOR OF FORECAST TIME UNIT
       1740 |C          (14)  - TIME RANGE 1
       1741 |C          (15)  - TIME RANGE 2
       1742 |C          (16)  - TIME RANGE FLAG
       1743 |C          (17)  - NUMBER INCLUDED IN AVERAGE
       1744 |C
       1745 |C   OUTPUT ARGUMENT LIST:
       1746 |C     KBMS       - BITMAP DESCRIBING LOCATION OF OUTPUT ELEMENTS.
       1747 |C     KPTR       - ARRAY CONTAINING STORAGE FOR FOLLOWING PARAMETERS
       1748 |C                  SEE INPUT LIST
       1749 |C     KRET       - ERROR RETURN
       1750 |C
       1751 |C REMARKS:
       1752 |C     KRET   = 0 - NO ERROR
       1753 |C            = 5 - GRID NOT AVAIL FOR CENTER INDICATED
       1754 |C            =10 - INCORRECT CENTER INDICATOR
       1755 |C            =12 - BYTES 5-6 ARE NOT ZERO IN BMS, PREDEFINED BIT MAP
       1756 |C                  NOT PROVIDED BY THIS CENTER
       1757 |C
       1758 |C   SUBPROGRAM CAN BE CALLED FROM A MULTIPROCESSING ENVIRONMENT.
       1759 |C
       1760 |C ATTRIBUTES:
       1761 |C   LANGUAGE: FORTRAN 77
       1762 |C   MACHINE:  HDS9000
       1763 |C
       1764 |C$$$
       1765 |C
       1766 |C                       INCOMING MESSAGE HOLDER
       1767 |      CHARACTER*1   MSGA(*)
       1768 |C
       1769 |C                       BIT MAP
       1770 |      LOGICAL*1     KBMS(*)
       1771 |C
       1772 |C                       ARRAY OF POINTERS AND COUNTERS
       1773 |      INTEGER       KPTR(*)
       1774 |C                       ARRAY OF POINTERS AND COUNTERS
       1775 |      INTEGER       KPDS(*)
       1776 |      INTEGER       KGDS(*)
       1777 |C
       1778 |      INTEGER       KRET
       1779 |      INTEGER       MASK(8)
       1780 |C  ----------------------GRID 21 AND GRID 22 ARE THE SAME
       1781 |      LOGICAL*1     GRD21( 1369)
       1782 |C  ----------------------GRID 23 AND GRID 24 ARE THE SAME
       1783 |      LOGICAL*1     GRD23( 1369)
       1784 |      LOGICAL*1     GRD25( 1368)
       1785 |      LOGICAL*1     GRD26( 1368)
       1786 |C  ----------------------GRID 27 AND GRID 28 ARE THE SAME
       1787 |C  ----------------------GRID 29 AND GRID 30 ARE THE SAME
       1788 |C  ----------------------GRID 33 AND GRID 34 ARE THE SAME
       1789 |      LOGICAL*1     GRD50( 1188)
       1790 |C  -----------------------GRID 61 AND GRID 62 ARE THE SAME
       1791 |      LOGICAL*1     GRD61( 4186)
       1792 |C  -----------------------GRID 63 AND GRID 64 ARE THE SAME
       1793 |      LOGICAL*1     GRD63( 4186)
       1794 |C     LOGICAL*1     GRD70(16380)/16380*.TRUE./
       1795 |C  -------------------------------------------------------------
       1796 |      DATA  GRD21 /1333*.TRUE.,36*.FALSE./
       1797 |      DATA  GRD23 /.TRUE.,36*.FALSE.,1332*.TRUE./
       1798 |      DATA  GRD25 /1297*.TRUE.,71*.FALSE./
       1799 |      DATA  GRD26 /.TRUE.,71*.FALSE.,1296*.TRUE./
       1800 |      DATA  GRD50/
       1801 |C LINE 1-4
       1802 |     &  7*.FALSE.,22*.TRUE.,14*.FALSE.,22*.TRUE.,
       1803 |     & 14*.FALSE.,22*.TRUE.,14*.FALSE.,22*.TRUE.,7*.FALSE.,
       1804 |C LINE 5-8
       1805 |     &  6*.FALSE.,24*.TRUE.,12*.FALSE.,24*.TRUE.,
       1806 |     & 12*.FALSE.,24*.TRUE.,12*.FALSE.,24*.TRUE.,6*.FALSE.,
       1807 |C LINE 9-12
       1808 |     &  5*.FALSE.,26*.TRUE.,10*.FALSE.,26*.TRUE.,
       1809 |     & 10*.FALSE.,26*.TRUE.,10*.FALSE.,26*.TRUE.,5*.FALSE.,
       1810 |C LINE 13-16
       1811 |     &  4*.FALSE.,28*.TRUE., 8*.FALSE.,28*.TRUE.,
       1812 |     &  8*.FALSE.,28*.TRUE., 8*.FALSE.,28*.TRUE.,4*.FALSE.,
       1813 |C LINE 17-20
       1814 |     &  3*.FALSE.,30*.TRUE., 6*.FALSE.,30*.TRUE.,
       1815 |     &  6*.FALSE.,30*.TRUE., 6*.FALSE.,30*.TRUE.,3*.FALSE.,
       1816 |C LINE 21-24
       1817 |     &  2*.FALSE.,32*.TRUE., 4*.FALSE.,32*.TRUE.,
       1818 |     &  4*.FALSE.,32*.TRUE., 4*.FALSE.,32*.TRUE.,2*.FALSE.,
       1819 |C LINE 25-28
       1820 |     &    .FALSE.,34*.TRUE., 2*.FALSE.,34*.TRUE.,
       1821 |     &  2*.FALSE.,34*.TRUE., 2*.FALSE.,34*.TRUE.,  .FALSE.,
       1822 |C LINE 29-33
       1823 |     &           180*.TRUE./
       1824 |      DATA  GRD61 /4096*.TRUE.,90*.FALSE./
       1825 |      DATA  GRD63 /.TRUE.,90*.FALSE.,4095*.TRUE./
       1826 |      DATA  MASK  /128,64,32,16,8,4,2,1/
       1827 |C
       1828 |C     PRINT *,'FI634'
       1829 |      IF (IAND(KPDS(4),64).EQ.64) THEN
       1830 |C
       1831 |C                   SET UP BIT POINTER
       1832 |C                          SECTION 0    SECTION 1     SECTION 2
       1833 |      KPTR(8) = KPTR(9) + (KPTR(2)*8) + (KPTR(3)*8) + (KPTR(4)*8) + 24
       1834 |C
       1835 |C  BYTE 4           NUMBER OF UNUSED BITS AT END OF SECTION 3
       1836 |C
       1837 |      CALL GBYTE (MSGA,KPTR(11),KPTR(8),8)
       1838 |      KPTR(8)  = KPTR(8) + 8
       1839 |C
       1840 |C  BYTE 5,6         TABLE REFERENCE IF 0, BIT MAP FOLLOWS
       1841 |C
       1842 |      CALL GBYTE (MSGA,KPTR(12),KPTR(8),16)
       1843 |      KPTR(8)  = KPTR(8) + 16
       1844 |C                   IF TABLE REFERENCE = 0, EXTRACT BIT MAP
       1845 |        IF (KPTR(12).EQ.0) THEN
       1846 |C                   CALCULATE NR OF BITS IN BIT MAP
       1847 |          IBITS   = (KPTR(5) - 6) * 8 - KPTR(11)
       1848 |          KPTR(10)  = IBITS
       1849 |          IF (KPDS(3).EQ.21.OR.KPDS(3).EQ.22.OR.KPDS(3).EQ.25.
       1850 |     *             OR.KPDS(3).EQ.61.OR.KPDS(3).EQ.62) THEN
       1851 |C                    NORTHERN HEMISPHERE  21, 22, 25, 61, 62
       1852 |              CALL FI634X(IBITS,KPTR(8),MSGA,KBMS)
       1853 |              IF (KPDS(3).EQ.25) THEN
       1854 |                  KADD     = 71
       1855 |              ELSE IF (KPDS(3).EQ.61.OR.KPDS(3).EQ.62) THEN
       1856 |                  KADD     = 90
       1857 |              ELSE
       1858 |                  KADD     = 36
       1859 |              END IF
       1860 |              DO 25 I = 1, KADD
       1861 |                  KBMS(I+IBITS)  = .FALSE.
       1862 |   25         CONTINUE
       1863 |              KPTR(10)   = KPTR(10) + KADD
       1864 |              RETURN
       1865 |          ELSE IF (KPDS(3).EQ.23.OR.KPDS(3).EQ.24.OR.KPDS(3).EQ.26.
       1866 |     *             OR.KPDS(3).EQ.63.OR.KPDS(3).EQ.64) THEN
       1867 |C                    SOUTHERN HEMISPHERE  23, 24, 26, 63, 64
       1868 |              CALL FI634X(IBITS,KPTR(8),MSGA,KBMS)
       1869 |              IF (KPDS(3).EQ.26) THEN
       1870 |                  KADD     = 72
       1871 |              ELSE IF (KPDS(3).EQ.63.OR.KPDS(3).EQ.64) THEN
       1872 |                  KADD     = 91
       1873 |              ELSE
       1874 |                  KADD     = 37
       1875 |              END IF
       1876 |              DO 26 I = 1, KADD
       1877 |                  KBMS(I+IBITS)  = .FALSE.
       1878 |   26         CONTINUE
       1879 |              KPTR(10)   = KPTR(10) + KADD - 1
       1880 |              RETURN
       1881 |          ELSE IF (KPDS(3).EQ.50) THEN
       1882 |              KPAD    = 7
       1883 |              KIN     = 22
       1884 |              KBITS   = 0
       1885 |              DO 55 I = 1, 7
       1886 |                  DO 54 J = 1, 4
       1887 |                      DO 51 K = 1, KPAD
       1888 |                          KBITS   = KBITS + 1
       1889 |                          KBMS(KBITS)  = .FALSE.
       1890 |   51                 CONTINUE
       1891 |                      CALL FI634X(KIN,KPTR(8),MSGA,KBMS(KBITS+1))
       1892 |                      KPTR(8)=KPTR(8)+KIN
       1893 |                      KBITS=KBITS+KIN
       1894 |                      DO 53 K = 1, KPAD
       1895 |                          KBITS   = KBITS + 1
       1896 |                          KBMS(KBITS)  = .FALSE.
       1897 |   53                 CONTINUE
       1898 |   54             CONTINUE
       1899 |                  KIN    = KIN + 2
       1900 |                  KPAD   = KPAD - 1
       1901 |   55         CONTINUE
       1902 |              DO 57 II = 1, 5
       1903 |                  CALL FI634X(KIN,KPTR(8),MSGA,KBMS(KBITS+1))
       1904 |                  KPTR(8)=KPTR(8)+KIN
       1905 |                  KBITS=KBITS+KIN
       1906 |   57         CONTINUE
       1907 |          ELSE
       1908 |C                        EXTRACT BIT MAP FROM BMS FOR OTHER GRIDS
       1909 |              CALL FI634X(IBITS,KPTR(8),MSGA,KBMS)
       1910 |          END IF
       1911 |          RETURN
       1912 |        ELSE
       1913 |C         PRINT *,'FI634-NO PREDEFINED BIT MAP PROVIDED BY THIS CENTER'
       1914 |          KRET = 12
       1915 |          RETURN
       1916 |        END IF
       1917 |C
       1918 |      END IF
       1919 |      KRET = 0
       1920 |C  -------------------------------------------------------
       1921 |C                   PROCESS NON-STANDARD GRID
       1922 |C  -------------------------------------------------------
       1923 |      IF (KPDS(3).EQ.255) THEN
       1924 |C         PRINT *,'NON STANDARD GRID, CENTER = ',KPDS(1)
       1925 |          J      = KGDS(2) * KGDS(3)
       1926 |          KPTR(10) = J
       1927 |          DO 600 I = 1, J
       1928 |              KBMS(I) = .TRUE.
       1929 |  600     CONTINUE
       1930 |          RETURN
       1931 |      END IF
       1932 |C  -------------------------------------------------------
       1933 |C                   CHECK INTERNATIONAL SET
       1934 |C  -------------------------------------------------------
       1935 |      IF (KPDS(3).EQ.21.OR.KPDS(3).EQ.22) THEN
       1936 |C                   ----- INT'L GRIDS 21, 22 - MAP SIZE 1369
       1937 |          J   = 1369
       1938 |          KPTR(10)  = J
       1939 |          CALL FI637(J,KPDS,KGDS,KRET)
       1940 |          IF(KRET.NE.0) GO TO 820
       1941 |          DO 3021 I = 1, 1369
       1942 |              KBMS(I) = GRD21(I)
       1943 | 3021     CONTINUE
       1944 |          RETURN
       1945 |      ELSE IF (KPDS(3).EQ.23.OR.KPDS(3).EQ.24) THEN
       1946 |C                   ----- INT'L GRIDS 23, 24 - MAP SIZE 1369
       1947 |          J   = 1369
       1948 |          KPTR(10)  = J
       1949 |          CALL FI637(J,KPDS,KGDS,KRET)
       1950 |          IF(KRET.NE.0) GO TO 820
       1951 |          DO 3023 I = 1, 1369
       1952 |              KBMS(I) = GRD23(I)
       1953 | 3023     CONTINUE
       1954 |          RETURN
       1955 |      ELSE IF (KPDS(3).EQ.25) THEN
       1956 |C                   ----- INT'L GRID 25 - MAP SIZE 1368
       1957 |          J   = 1368
       1958 |          KPTR(10)  = J
       1959 |          CALL FI637(J,KPDS,KGDS,KRET)
       1960 |          IF(KRET.NE.0) GO TO 820
       1961 |          DO 3025 I = 1, 1368
       1962 |              KBMS(I) = GRD25(I)
       1963 | 3025     CONTINUE
       1964 |          RETURN
       1965 |      ELSE IF (KPDS(3).EQ.26) THEN
       1966 |C                  ----- INT'L GRID  26 - MAP SIZE 1368
       1967 |          J   = 1368
       1968 |          KPTR(10)  = J
       1969 |          CALL FI637(J,KPDS,KGDS,KRET)
       1970 |          IF(KRET.NE.0) GO TO 820
       1971 |          DO 3026 I = 1, 1368
       1972 |              KBMS(I) = GRD26(I)
       1973 | 3026     CONTINUE
       1974 |          RETURN
       1975 |      ELSE IF (KPDS(3).GE.37.AND.KPDS(3).LE.44) THEN
       1976 |C                  ----- INT'L GRID  37-44 - MAP SIZE 3447
       1977 |          J   = 3447
       1978 |          GO TO 800
       1979 |      ELSE IF (KPDS(1).EQ.7.AND.KPDS(3).EQ.50) THEN
       1980 |C                   ----- INT'L GRIDS 50 - MAP SIZE 964
       1981 |          J     = 1188
       1982 |          KPTR(10)  = J
       1983 |          CALL FI637(J,KPDS,KGDS,KRET)
       1984 |          IF(KRET.NE.0) GO TO 890
       1985 |          DO 3050 I = 1, J
       1986 |              KBMS(I) = GRD50(I)
       1987 | 3050     CONTINUE
       1988 |          RETURN
       1989 |      ELSE IF (KPDS(3).EQ.61.OR.KPDS(3).EQ.62) THEN
       1990 |C                   ----- INT'L GRIDS 61, 62 - MAP SIZE 4186
       1991 |          J     = 4186
       1992 |          KPTR(10)  = J
       1993 |          CALL FI637(J,KPDS,KGDS,KRET)
       1994 |          IF(KRET.NE.0) GO TO 820
       1995 |          DO 3061 I = 1, 4186
       1996 |              KBMS(I) = GRD61(I)
       1997 | 3061     CONTINUE
       1998 |          RETURN
       1999 |      ELSE IF (KPDS(3).EQ.63.OR.KPDS(3).EQ.64) THEN
       2000 |C                  ----- INT'L GRIDS 63, 64 - MAP SIZE 4186
       2001 |          J     = 4186
       2002 |          KPTR(10)  = J
       2003 |          CALL FI637(J,KPDS,KGDS,KRET)
       2004 |          IF(KRET.NE.0) GO TO 820
       2005 |          DO 3063 I = 1, 4186
       2006 |              KBMS(I) = GRD63(I)
       2007 | 3063     CONTINUE
       2008 |          RETURN
       2009 |      END IF
       2010 |C  -------------------------------------------------------
       2011 |C                   CHECK UNITED STATES SET
       2012 |C  -------------------------------------------------------
       2013 |      IF (KPDS(1).EQ.7) THEN
       2014 |          IF (KPDS(3).LT.100) THEN
       2015 |              IF (KPDS(3).EQ.1) THEN
       2016 |C                       ----- U.S. GRID 1 - MAP SIZE 1679
       2017 |                  J   = 1679
       2018 |                  GO TO 800
       2019 |              END IF
       2020 |              IF (KPDS(3).EQ.2) THEN
       2021 |C                       ----- U.S. GRID 2 - MAP SIZE 10512
       2022 |                  J   = 10512
       2023 |                  GO TO 800
       2024 |              ELSE IF (KPDS(3).EQ.3) THEN
       2025 |C                       ----- U.S. GRID 3 - MAP SIZE 65160
       2026 |                  J   = 65160
       2027 |                  GO TO 800
       2028 |              ELSE IF (KPDS(3).EQ.4) THEN
       2029 |C                       ----- U.S. GRID 4 - MAP SIZE 259920
       2030 |                  J   = 259920
       2031 |                  GO TO 800
       2032 |              ELSE IF (KPDS(3).EQ.5) THEN
       2033 |C                       ----- U.S. GRID 5 - MAP SIZE 3021
       2034 |                  J   = 3021
       2035 |                  GO TO 800
       2036 |              ELSE IF (KPDS(3).EQ.6) THEN
       2037 |C                       ----- U.S. GRID 6 - MAP SIZE 2385
       2038 |                  J   = 2385
       2039 |                  GO TO 800
       2040 |              ELSE IF (KPDS(3).EQ.8) THEN
       2041 |C                       ----- U.S. GRID 8 - MAP SIZE 5104
       2042 |                  J   = 5104
       2043 |                  GO TO 800
       2044 |              ELSE IF (KPDS(3).EQ.27.OR.KPDS(3).EQ.28) THEN
       2045 |C                       ----- U.S. GRIDS 27, 28 - MAP SIZE 4225
       2046 |                  J     = 4225
       2047 |                  GO TO 800
       2048 |              ELSE IF (KPDS(3).EQ.29.OR.KPDS(3).EQ.30) THEN
       2049 |C                       ----- U.S. GRIDS 29,30 - MAP SIZE 5365
       2050 |                  J     = 5365
       2051 |                  GO TO 800
       2052 |              ELSE IF (KPDS(3).EQ.33.OR.KPDS(3).EQ.34) THEN
       2053 |C                       ----- U.S GRID 33, 34 - MAP SIZE 8326
       2054 |                  J     = 8326
       2055 |                  GO TO 800
       2056 |              ELSE IF (KPDS(3).GE.37.AND.KPDS(3).LE.44) THEN
       2057 |C                  -----  U.S. GRID  37-44 - MAP SIZE 3447
       2058 |                  J   = 3447
       2059 |                  GO TO 800
       2060 |              ELSE IF (KPDS(3).EQ.45) THEN
       2061 |C                  ----- U.S.  GRID  45    - MAP SIZE 41760
       2062 |                  J   = 41760
       2063 |                  GO TO 800
       2064 |              ELSE IF (KPDS(3).EQ.53) THEN
       2065 |C                  ----- U.S.  GRID  53    - MAP SIZE 5967
       2066 |                  J   = 5967
       2067 |                  GO TO 800
       2068 |              ELSE IF (KPDS(3).EQ.55.OR.KPDS(3).EQ.56) THEN
       2069 |C                       ----- U.S GRID 55, 56 - MAP SIZE 6177
       2070 |                  J     = 6177
       2071 |                  GO TO 800
       2072 |              ELSE IF (KPDS(3).GE.67.AND.KPDS(3).LE.71) THEN
       2073 |C                       ----- U.S GRID 67-71 - MAP SIZE 13689
       2074 |                  J     = 13689
       2075 |                  GO TO 800
       2076 |              ELSE IF (KPDS(3).EQ.72) THEN
       2077 |C                       ----- U.S GRID    72 - MAP SIZE 406
       2078 |                  J     = 406
       2079 |                  GO TO 800
       2080 |              ELSE IF (KPDS(3).EQ.73) THEN
       2081 |C                       ----- U.S GRID    73 - MAP SIZE 13056
       2082 |                  J     = 13056
       2083 |                  GO TO 800
       2084 |              ELSE IF (KPDS(3).EQ.74) THEN
       2085 |C                       ----- U.S GRID    74 - MAP SIZE 10800
       2086 |                  J     = 10800
       2087 |                  GO TO 800
       2088 |              ELSE IF (KPDS(3).GE.75.AND.KPDS(3).LE.77) THEN
       2089 |C                       ----- U.S GRID 75-77 - MAP SIZE 12321
       2090 |                  J     = 12321
       2091 |                  GO TO 800
       2092 |              ELSE IF (KPDS(3).EQ.85.OR.KPDS(3).EQ.86) THEN
       2093 |C                       ----- U.S GRID 85,86 - MAP SIZE 32400
       2094 |                  J     = 32400
       2095 |                  GO TO 800
       2096 |              ELSE IF (KPDS(3).EQ.87) THEN
       2097 |C                       ----- U.S GRID 87     - MAP SIZE 5022
       2098 |                  J     = 5022
       2099 |                  GO TO 800
       2100 |              ELSE IF (KPDS(3).EQ.90) THEN
       2101 |C                       ----- U.S GRID 90     - MAP SIZE 71779
       2102 |                  J     = 71779
       2103 |                  GO TO 800
       2104 |              ELSE IF (KPDS(3).EQ.91) THEN
       2105 |C                       ----- U.S GRID 91     - MAP SIZE 71779
       2106 |                  J     = 71779
       2107 |                  GO TO 800
       2108 |              ELSE IF (KPDS(3).EQ.92) THEN
       2109 |C                       ----- U.S GRID 92     - MAP SIZE 71779
       2110 |                  J     = 71779
       2111 |                  GO TO 800
       2112 |              ELSE IF (KPDS(3).EQ.93) THEN
       2113 |C                       ----- U.S GRID 93     - MAP SIZE 71779
       2114 |                  J     = 71779
       2115 |                  GO TO 800
       2116 |              ELSE IF (KPDS(3).EQ.94) THEN
       2117 |C                       ----- U.S GRID 94     - MAP SIZE 196305
       2118 |                  J     = 191420
       2119 |                  GO TO 800
       2120 |              ELSE IF (KPDS(3).EQ.95) THEN
       2121 |C                       ----- U.S GRID 95     - MAP SIZE 36062
       2122 |                  J     = 129987
       2123 |                  GO TO 800
       2124 |              ELSE IF (KPDS(3).EQ.96) THEN
       2125 |C                       ----- U.S GRID 96     - MAP SIZE 646602
       2126 |                  J     = 646602
       2127 |c                 J     = 322980
       2128 |                  GO TO 800
       2129 |              ELSE IF (KPDS(3).EQ.97) THEN
       2130 |C                       ----- U.S GRID 97     - MAP SIZE 8165
       2131 |                  J     = 5555
       2132 |                  GO TO 800
       2133 |              ELSE IF (KPDS(3).EQ.98) THEN
       2134 |C                       ----- U.S GRID 98     - MAP SIZE 18048
       2135 |                  J     = 18048
       2136 |                  GO TO 800
       2137 |              ELSE IF (KPDS(3).EQ.99) THEN
       2138 |C                       ----- U.S GRID 99     - MAP SIZE 77123
       2139 |                  J     = 77123
       2140 |                  GO TO 800
       2141 |              END IF
       2142 |          ELSE IF (KPDS(3).GE.100.AND.KPDS(3).LT.200) THEN
       2143 |              IF (KPDS(3).EQ.100) THEN
       2144 |C                       ----- U.S. GRID 100 - MAP SIZE 6889
       2145 |                  J     = 6889
       2146 |                  GO TO 800
       2147 |              ELSE IF (KPDS(3).EQ.101) THEN
       2148 |C                    ----- U.S. GRID 101 - MAP SIZE 10283
       2149 |                  J     = 10283
       2150 |                  GO TO 800
       2151 |              ELSE IF (KPDS(3).EQ.103) THEN
       2152 |C                     ----- U.S. GRID 103 - MAP SIZE 3640
       2153 |                  J     = 3640
       2154 |                  GO TO 800
       2155 |              ELSE IF (KPDS(3).EQ.104) THEN
       2156 |C                     ----- U.S. GRID 104 - MAP SIZE 16170
       2157 |                  J     = 16170
       2158 |                  GO TO 800
       2159 |              ELSE IF (KPDS(3).EQ.105) THEN
       2160 |C                 ----- U.S. GRID 105 - MAP SIZE 6889
       2161 |                  J     = 6889
       2162 |                  GO TO 800
       2163 |              ELSE IF (KPDS(3).EQ.106) THEN
       2164 |C                     ----- U.S. GRID 106 - MAP SIZE 19305
       2165 |                  J     = 19305
       2166 |                  GO TO 800
       2167 |              ELSE IF (KPDS(3).EQ.110) THEN
       2168 |C                 ----- U.S. GRID 110 - MAP SIZE 103936
       2169 |                  J = 103936
       2170 |                  GO TO 800
       2171 |              ELSE IF (KPDS(3).EQ.107) THEN
       2172 |C                 ----- U.S. GRID 107 - MAP SIZE 11040
       2173 |                  J     = 11040
       2174 |                  GO TO 800
       2175 |              ELSE IF (KPDS(3).EQ.126) THEN
       2176 |C                 ----- U.S. GRID 126 - MAP SIZE 72960
       2177 |                  J     = 72960
       2178 |                  GO TO 800
       2179 |              ELSE IF (KPDS(3).GE.151.AND.KPDS(3).LE.172) THEN
       2180 |C                  -----  U.S. GRID  151-172 - MAP SIZE 121808
       2181 |                  J   = 121808
       2182 |                  GO TO 800
       2183 |              ELSE IF (KPDS(3).EQ.138) THEN
       2184 |C                 ----- U.S. GRID 126 - MAP SIZE 72960
       2185 |                  J     = 134784
       2186 |                  GO TO 800
       2187 |              ELSE IF (KPDS(3).EQ.150) THEN
       2188 |C                 ----- U.S. GRID 150 - MAP SIZE 49051
       2189 |                  J     = 80601
       2190 |                  GO TO 800
       2191 |              ELSE IF (KPDS(3).EQ.180) THEN
       2192 |C                 ----- U.S. GRID 180 - MAP SIZE 26492
       2193 |                  J     = 26492
       2194 |                  GO TO 800
       2195 |              ELSE IF (KPDS(3).EQ.181) THEN
       2196 |C                 ----- U.S. GRID 181 - MAP SIZE 49227
       2197 |                  J     = 49227
       2198 |                  GO TO 800
       2199 |              ELSE IF (KPDS(3).EQ.182) THEN
       2200 |C                 ----- U.S. GRID 182 - MAP SIZE 40425
       2201 |                  J     = 40425
       2202 |                  GO TO 800
       2203 |              ELSE IF (KPDS(3).EQ.183) THEN
       2204 |C                 ----- U.S. GRID 183 - MAP SIZE 36270
       2205 |                  J     = 36270
       2206 |                  GO TO 800
       2207 |              ELSE IF (KPDS(3).EQ.185) THEN
       2208 |C                 ----- U.S. GRID 185 - MAP SIZE 148773
       2209 |                  J     = 148773
       2210 |                  GO TO 800
       2211 |              ELSE IF (KPDS(3).EQ.186) THEN
       2212 |C                 ----- U.S. GRID 186 - MAP SIZE 89349
       2213 |                  J     = 89349
       2214 |                  GO TO 800
       2215 |              ELSE IF (KPDS(3).EQ.190) THEN
       2216 |C                 ----- U.S GRID 190  - MAP SIZE 12972
       2217 |                  J     = 12972
       2218 |                  GO TO 800
       2219 |              ELSE IF (KPDS(3).EQ.192) THEN
       2220 |Cold              ----- U.S GRID 192  - MAP SIZE 81395
       2221 |cold              J     = 81395
       2222 |C                 ----- U.S GRID 192  - MAP SIZE 93449
       2223 |                  J     = 91719
       2224 |                  GO TO 800
       2225 |              ELSE IF (KPDS(3).EQ.194) THEN
       2226 |C                 ----- U.S GRID 192  - MAP SIZE 8165
       2227 |                  J     = 8165
       2228 |                  GO TO 800
       2229 |              ELSE IF (KPDS(3).EQ.196) THEN
       2230 |C                 ----- U.S. GRID 196 - MAP SIZE 45903
       2231 |                  J     = 45903
       2232 |                  GO TO 800
       2233 |              ELSE IF (KPDS(3).EQ.198) THEN
       2234 |C                 ----- U.S. GRID 198 - MAP SIZE 41760
       2235 |                  J     = 41760
       2236 |                  GO TO 800
       2237 |              ELSE IF (IAND(KPDS(4),128).EQ.128) THEN
       2238 |C                     ----- U.S. NON-STANDARD GRID
       2239 |                  GO TO 895
       2240 |              END IF
       2241 |          ELSE IF (KPDS(3).GE.200) THEN
       2242 |              IF (KPDS(3).EQ.201) THEN
       2243 |                  J = 4225
       2244 |                  GO TO 800
       2245 |              ELSE IF (KPDS(3).EQ.202) THEN
       2246 |                  J = 2795
       2247 |                  GO TO 800
       2248 |              ELSE IF (KPDS(3).EQ.203.OR.KPDS(3).EQ.205) THEN
       2249 |                  J = 1755
       2250 |                  GO TO 800
       2251 |              ELSE IF (KPDS(3).EQ.204) THEN
       2252 |                  J = 6324
       2253 |                  GO TO 800
       2254 |              ELSE IF (KPDS(3).EQ.206) THEN
       2255 |                  J = 2091
       2256 |                  GO TO 800
       2257 |              ELSE IF (KPDS(3).EQ.207) THEN
       2258 |                  J = 1715
       2259 |                  GO TO 800
       2260 |              ELSE IF (KPDS(3).EQ.208) THEN
       2261 |                  J = 783
       2262 |                  GO TO 800
       2263 |              ELSE IF (KPDS(3).EQ.209) THEN
       2264 |                  J = 61325
       2265 |                  GO TO 800
       2266 |              ELSE IF (KPDS(3).EQ.210) THEN
       2267 |                  J = 625
       2268 |                  GO TO 800
       2269 |              ELSE IF (KPDS(3).EQ.211) THEN
       2270 |                  J = 6045
       2271 |                  GO TO 800
       2272 |              ELSE IF (KPDS(3).EQ.212) THEN
       2273 |                  J = 23865
       2274 |                  GO TO 800
       2275 |              ELSE IF (KPDS(3).EQ.213) THEN
       2276 |                  J = 10965
       2277 |                  GO TO 800
       2278 |              ELSE IF (KPDS(3).EQ.214) THEN
       2279 |                  J = 6693
       2280 |                  GO TO 800
       2281 |              ELSE IF (KPDS(3).EQ.215) THEN
       2282 |                  J = 94833
       2283 |                  GO TO 800
       2284 |              ELSE IF (KPDS(3).EQ.216) THEN
       2285 |                  J = 14873
       2286 |                  GO TO 800
       2287 |              ELSE IF (KPDS(3).EQ.217) THEN
       2288 |                  J = 59001
       2289 |                  GO TO 800
       2290 |              ELSE IF (KPDS(3).EQ.218) THEN
       2291 |                  J = 262792
       2292 |                  GO TO 800
       2293 |              ELSE IF (KPDS(3).EQ.221) THEN
       2294 |                  J = 96673
       2295 |                  GO TO 800
       2296 |              ELSE IF (KPDS(3).EQ.222) THEN
       2297 |                  J = 15456
       2298 |                  GO TO 800
       2299 |              ELSE IF (KPDS(3).EQ.236) THEN
       2300 |                  J = 17063
       2301 |                  GO TO 800
       2302 |              ELSE IF (KPDS(3).EQ.237) THEN
       2303 |                  J = 2538
       2304 |                  GO TO 800
       2305 |              ELSE IF (KPDS(3).EQ.241) THEN
       2306 |                  J = 244305
       2307 |                  GO TO 800
       2308 |              ELSE IF (KPDS(3).EQ.242) THEN
       2309 |                  J = 235025
       2310 |                  GO TO 800
       2311 |              ELSE IF (KPDS(3).EQ.243) THEN
       2312 |                  J = 12726
       2313 |                  GO TO 800
       2314 |              ELSE IF (KPDS(3).EQ.245) THEN
       2315 |                  J = 80162
       2316 |                  GO TO 800
       2317 |              ELSE IF (KPDS(3).EQ.246) THEN
       2318 |                  J = 79002
       2319 |                  GO TO 800
       2320 |              ELSE IF (KPDS(3).EQ.247) THEN
       2321 |                  J = 80162
       2322 |                  GO TO 800
       2323 |              ELSE IF (KPDS(3).EQ.248) THEN
       2324 |                  J = 13635
       2325 |                  GO TO 800
       2326 |              ELSE IF (KPDS(3).EQ.249) THEN
       2327 |                  J = 87516
       2328 |                  GO TO 800
       2329 |              ELSE IF (KPDS(3).EQ.250) THEN
       2330 |                  J = 13635
       2331 |                  GO TO 800
       2332 |              ELSE IF (KPDS(3).EQ.252) THEN
       2333 |                  J = 67725
       2334 |                  GO TO 800
       2335 |              ELSE IF (KPDS(3).EQ.253) THEN
       2336 |                  J = 13400
       2337 |                  GO TO 800
       2338 |              ELSE IF (KPDS(3).EQ.254) THEN
       2339 |                  J = 97470
       2340 |                  GO TO 800
       2341 |              ELSE IF (IAND(KPDS(4),128).EQ.128) THEN
       2342 |                  GO TO 895
       2343 |              END IF
       2344 |              KRET  = 5
       2345 |              RETURN
       2346 |          END IF
       2347 |      END IF
       2348 |C  -------------------------------------------------------
       2349 |C                   CHECK JAPAN METEOROLOGICAL AGENCY SET
       2350 |C  -------------------------------------------------------
       2351 |      IF (KPDS(1).EQ.34) THEN
       2352 |          IF (IAND(KPDS(4),128).EQ.128) THEN
       2353 |C             PRINT *,'JMA MAP IS NOT PREDEFINED, THE GDS WILL'
       2354 |C             PRINT *,'BE USED TO UNPACK THE DATA, MAP = ',KPDS(3)
       2355 |              GO TO 900
       2356 |          END IF
       2357 |      END IF
       2358 |C  -------------------------------------------------------
       2359 |C                   CHECK CANADIAN SET
       2360 |C  -------------------------------------------------------
       2361 |      IF (KPDS(1).EQ.54) THEN
       2362 |          IF (IAND(KPDS(4),128).EQ.128) THEN
       2363 |C             PRINT *,'CANADIAN MAP IS NOT PREDEFINED, THE GDS WILL'
       2364 |C             PRINT *,'BE USED TO UNPACK THE DATA, MAP = ',KPDS(3)
       2365 |              GO TO 900
       2366 |          END IF
       2367 |      END IF
       2368 |C  -------------------------------------------------------
       2369 |C                   CHECK FNOC SET
       2370 |C  -------------------------------------------------------
       2371 |      IF (KPDS(1).EQ.58) THEN
       2372 |          IF (KPDS(3).EQ.220.OR.KPDS(3).EQ.221) THEN
       2373 |C                      FNOC GRID 220, 221 - MAPSIZE 3969 (63 * 63)
       2374 |              J  = 3969
       2375 |              KPTR(10)  = J
       2376 |              DO I = 1, J
       2377 |                  KBMS(I)  = .TRUE.
       2378 |              END DO
       2379 |              RETURN
       2380 |          END IF
       2381 |          IF (KPDS(3).EQ.223) THEN
       2382 |C                      FNOC GRID 223 - MAPSIZE 10512 (73 * 144)
       2383 |              J  = 10512
       2384 |              KPTR(10)  = J
       2385 |              DO I = 1, J
       2386 |                  KBMS(I)  = .TRUE.
       2387 |              END DO
       2388 |              RETURN
       2389 |          END IF
       2390 |          IF (IAND(KPDS(4),128).EQ.128) THEN
       2391 |C             PRINT *,'FNOC MAP IS NOT PREDEFINED, THE GDS WILL'
       2392 |C             PRINT *,'BE USED TO UNPACK THE DATA, MAP = ',KPDS(3)
       2393 |              GO TO 900
       2394 |          END IF
       2395 |      END IF
       2396 |C  -------------------------------------------------------
       2397 |C                   CHECK UKMET SET
       2398 |C  -------------------------------------------------------
       2399 |      IF (KPDS(1).EQ.74) THEN
       2400 |          IF (IAND(KPDS(4),128).EQ.128) THEN
       2401 |              GO TO 820
       2402 |          END IF
       2403 |      END IF
       2404 |C  -------------------------------------------------------
       2405 |C                   CHECK ECMWF SET
       2406 |C  -------------------------------------------------------
       2407 |      IF (KPDS(1).EQ.98) THEN
       2408 |          IF (KPDS(3).GE.1.AND.KPDS(3).LE.12) THEN
       2409 |              IF (KPDS(3).GE.5.AND.KPDS(3).LE.8) THEN
       2410 |                  J     = 1073
       2411 |              ELSE
       2412 |                  J     = 1369
       2413 |              END IF
       2414 |              KPTR(10)  = J
       2415 |              CALL FI637(J,KPDS,KGDS,KRET)
       2416 |              IF(KRET.NE.0) GO TO 810
       2417 |              KPTR(10)  = J  ! Reset For Modified J
       2418 |              DO 1000 I = 1, J
       2419 |                  KBMS(I) = .TRUE.
       2420 | 1000         CONTINUE
       2421 |              RETURN
       2422 |          ELSE IF (KPDS(3).GE.13.AND.KPDS(3).LE.16) THEN
       2423 |              J         = 361
       2424 |              KPTR(10)  = J
       2425 |              CALL FI637(J,KPDS,KGDS,KRET)
       2426 |              IF(KRET.NE.0) GO TO 810
       2427 |              DO 1013 I = 1, J
       2428 |                  KBMS(I) = .TRUE.
       2429 | 1013         CONTINUE
       2430 |              RETURN
       2431 |          ELSE IF (IAND(KPDS(4),128).EQ.128) THEN
       2432 |                  GO TO 810
       2433 |          ELSE
       2434 |              KRET  = 5
       2435 |              RETURN
       2436 |          END IF
       2437 |      ELSE
       2438 |C         PRINT *,'CENTER ',KPDS(1),' IS NOT DEFINED'
       2439 |          IF (IAND(KPDS(4),128).EQ.128) THEN
       2440 |C             PRINT *,'GDS WILL BE USED TO UNPACK THE DATA',
       2441 |C    *                        ' MAP = ',KPDS(3)
       2442 |              GO TO 900
       2443 |          ELSE
       2444 |              KRET  = 10
       2445 |              RETURN
       2446 |          END IF
       2447 |      END IF
       2448 |C =======================================
       2449 |C
       2450 |  800 CONTINUE
       2451 |      KPTR(10)  = J
       2452 |      CALL FI637 (J,KPDS,KGDS,KRET)
       2453 |      IF(KRET.NE.0) GO TO 801
       2454 |      DO 2201 I = 1, J
       2455 |          KBMS(I)  = .TRUE.
       2456 | 2201 CONTINUE
       2457 |      RETURN
       2458 |  801 CONTINUE
       2459 |C
       2460 |C  ----- THE MAP HAS A GDS, BYTE 7 OF THE (PDS) THE GRID IDENTIFICATION
       2461 |C  ----- IS NOT 255, THE SIZE OF THE GRID IS NOT THE SAME AS THE
       2462 |C  ----- PREDEFINED SIZES OF THE U.S. GRIDS, OR KNOWN GRIDS OF THE
       2463 |C  ----- OF THE OTHER CENTERS. THE GRID CAN BE UNKNOWN, OR FROM AN
       2464 |C  ----- UNKNOWN CENTER, WE WILL USE THE INFORMATION IN THE GDS TO MAKE
       2465 |C  ----- A BIT MAP.
       2466 |C
       2467 |  810 CONTINUE
       2468 |C     PRINT *,'ECMWF PREDEFINED MAP SIZE DOES NOT MATCH, I WILL USE'
       2469 |      GO TO 895
       2470 |C
       2471 |  820 CONTINUE
       2472 |C     PRINT *,'U.K. MET PREDEFINED MAP SIZE DOES NOT MATCH, I WILL USE'
       2473 |      GO TO 895
       2474 |C
       2475 |  890 CONTINUE
       2476 |C     PRINT *,'PREDEFINED MAP SIZE DOES NOT MATCH, I WILL USE'
       2477 |  895 CONTINUE
       2478 |C     PRINT *,'THE GDS TO UNPACK THE DATA, MAP TYPE = ',KPDS(3)
       2479 |C
       2480 |  900 CONTINUE
       2481 |        J      = KGDS(2) * KGDS(3)
       2482 |C                    AFOS AFOS AFOS        SPECIAL CASE
       2483 |C                             INVOLVES NEXT SINGLE STATEMENT ONLY
       2484 |        IF (KPDS(3).EQ.211) KRET = 0
       2485 |        KPTR(10) = J
       2486 |        DO 2203 I = 1, J
       2487 |          KBMS(I) = .TRUE.
       2488 | 2203   CONTINUE
       2489 |C     PRINT *,'EXIT FI634'
       2490 |      RETURN
       2491 |      END
 
>>>>> ATTRIBUTE AND CROSS REFERENCE SECTION <<<<<
 
 
 
IDENTIFIER NAME                  CROSS REFERENCE AND ATTRIBUTES
 
fi634                            Subroutine
                                 0-1688.18$
 
fi634x                           External Subroutine
                                 0-1852.20  0-1868.20  0-1891.28  0-1903.24  0-1909.20
 
fi637                            External Subroutine
                                 0-1939.16  0-1949.16  0-1959.16  0-1969.16  0-1983.16  0-1993.16  0-2003.16  0-2415.20  0-2425.20
                                 0-2452.12
 
gbyte                            External Subroutine
                                 0-1837.12  0-1842.12
 
grd21                            Static, Logical(1) (1:1369), Offset: 0, Alignment: byte
                                 0-1781.21$  0-1796.13*  0-1942.25
 
grd23                            Static, Logical(1) (1:1369), Offset: 0, Alignment: byte
                                 0-1783.21$  0-1797.13*  0-1952.25
 
grd25                            Static, Logical(1) (1:1368), Offset: 0, Alignment: byte
                                 0-1784.21$  0-1798.13*  0-1962.25
 
grd26                            Static, Logical(1) (1:1368), Offset: 0, Alignment: byte
                                 0-1785.21$  0-1799.13*  0-1972.25
 
grd50                            Static, Logical(1) (1:1188), Offset: 0, Alignment: byte
                                 0-1789.21$  0-1800.13*  0-1986.25
 
grd61                            Static, Logical(1) (1:4186), Offset: 0, Alignment: byte
                                 0-1791.21$  0-1824.13*  0-1996.25
 
grd63                            Static, Logical(1) (1:4186), Offset: 0, Alignment: byte
                                 0-1793.21$  0-1825.13*  0-2006.25
 
i                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1860.21@  0-1861.24  0-1876.21@  0-1877.24  0-1885.21@  0-1927.18@  0-1928.20  0-1941.19@
                                 0-1942.20  0-1942.31  0-1951.19@  0-1952.20  0-1952.31  0-1961.19@  0-1962.20  0-1962.31
                                 0-1971.19@  0-1972.20  0-1972.31  0-1985.19@  0-1986.20  0-1986.31  0-1995.19@  0-1996.20
                                 0-1996.31  0-2005.19@  0-2006.20  0-2006.31  0-2376.18@  0-2377.24  0-2385.18@  0-2386.24
                                 0-2418.23@  0-2419.24  0-2427.23@  0-2428.24  0-2454.15@  0-2455.16  0-2486.17@  0-2487.16
 
iand                             Pure Intrinsic
                                 0-1829.11  0-2237.24  0-2341.24  0-2352.15  0-2362.15  0-2390.15  0-2400.15  0-2431.20  0-2439.15
 
ibits                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1847.11@  0-1848.23  0-1852.27  0-1861.26  0-1868.27  0-1877.26  0-1909.27
 
ii                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1902.21@
 
j                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1886.25@  0-1925.11@  0-1926.22  0-1927.25  0-1937.11@  0-1938.23  0-1939.22  0-1947.11@
                                 0-1948.23  0-1949.22  0-1957.11@  0-1958.23  0-1959.22  0-1967.11@  0-1968.23  0-1969.22
                                 0-1977.11@  0-1981.11@  0-1982.23  0-1983.22  0-1985.26  0-1991.11@  0-1992.23  0-1993.22
                                 0-2001.11@  0-2002.23  0-2003.22  0-2017.19@  0-2022.19@  0-2026.19@  0-2030.19@  0-2034.19@
                                 0-2038.19@  0-2042.19@  0-2046.19@  0-2050.19@  0-2054.19@  0-2058.19@  0-2062.19@  0-2066.19@
                                 0-2070.19@  0-2074.19@  0-2078.19@  0-2082.19@  0-2086.19@  0-2090.19@  0-2094.19@  0-2098.19@
                                 0-2102.19@  0-2106.19@  0-2110.19@  0-2114.19@  0-2118.19@  0-2122.19@  0-2126.19@  0-2131.19@
                                 0-2135.19@  0-2139.19@  0-2145.19@  0-2149.19@  0-2153.19@  0-2157.19@  0-2161.19@  0-2165.19@
                                 0-2169.19@  0-2173.19@  0-2177.19@  0-2181.19@  0-2185.19@  0-2189.19@  0-2193.19@  0-2197.19@
                                 0-2201.19@  0-2205.19@  0-2209.19@  0-2213.19@  0-2217.19@  0-2223.19@  0-2227.19@  0-2231.19@
                                 0-2235.19@  0-2243.19@  0-2246.19@  0-2249.19@  0-2252.19@  0-2255.19@  0-2258.19@  0-2261.19@
                                 0-2264.19@  0-2267.19@  0-2270.19@  0-2273.19@  0-2276.19@  0-2279.19@  0-2282.19@  0-2285.19@
                                 0-2288.19@  0-2291.19@  0-2294.19@  0-2297.19@  0-2300.19@  0-2303.19@  0-2306.19@  0-2309.19@
                                 0-2312.19@  0-2315.19@  0-2318.19@  0-2321.19@  0-2324.19@  0-2327.19@  0-2330.19@  0-2333.19@
                                 0-2336.19@  0-2339.19@  0-2374.15@  0-2375.27  0-2376.25  0-2383.15@  0-2384.27  0-2385.25
                                 0-2410.19@  0-2412.19@  0-2414.27  0-2415.26  0-2417.27  0-2418.30  0-2423.15@  0-2424.27
                                 0-2425.26  0-2427.30  0-2451.19  0-2452.19  0-2454.22  0-2481.9@  0-2485.20  0-2486.24
 
k                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1887.29@  0-1894.29@
 
kadd                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1854.19@  0-1856.19@  0-1858.19@  0-1860.28  0-1863.39  0-1870.19@  0-1872.19@  0-1874.19@
                                 0-1876.28  0-1879.39
 
kbits                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1884.15@  0-1888.27@  0-1888.37  0-1889.32  0-1891.57  0-1893.23@  0-1893.29  0-1895.27@
                                 0-1895.37  0-1896.32  0-1903.53  0-1905.19@  0-1905.25
 
kbms                             Reference argument, Logical(1) (1:*), Offset: 0, Alignment: byte
                                 0-1770.21$  0-1688.44  0-1852.46  0-1861.19@  0-1868.46  0-1877.19@  0-1889.27@  0-1891.52
                                 0-1896.27@  0-1903.48  0-1909.46  0-1928.15@  0-1942.15@  0-1952.15@  0-1962.15@  0-1972.15@
                                 0-1986.15@  0-1996.15@  0-2006.15@  0-2377.19@  0-2386.19@  0-2419.19@  0-2428.19@  0-2455.11@
                                 0-2487.11@
 
kgds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-1776.21$  0-1688.39  0-1925.20  0-1925.30  0-1939.29  0-1949.29  0-1959.29  0-1969.29  0-1983.29
                                 0-1993.29  0-2003.29  0-2415.33  0-2425.33  0-2452.26  0-2481.18  0-2481.28
 
kin                              Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1883.15@  0-1891.35  0-1892.39  0-1893.35  0-1899.19@  0-1899.28  0-1903.31  0-1904.35  0-1905.31
 
kpad                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-1882.15@  0-1887.36  0-1894.36  0-1900.19@  0-1900.28
 
kpds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-1775.21$  0-1688.34  0-1829.16  0-1849.15  0-1849.32  0-1849.49  0-1850.23  0-1850.40  0-1853.19
                                 0-1855.24  0-1855.41  0-1865.20  0-1865.37  0-1865.54  0-1866.23  0-1866.40  0-1869.19  0-1871.24
                                 0-1871.41  0-1881.20  0-1923.11  0-1935.11  0-1935.28  0-1939.24  0-1945.16  0-1945.33  0-1949.24
                                 0-1955.16  0-1959.24  0-1965.16  0-1969.24  0-1975.16  0-1975.34  0-1979.16  0-1979.33  0-1983.24
                                 0-1989.16  0-1989.33  0-1993.24  0-1999.16  0-1999.33  0-2003.24  0-2013.11  0-2014.15  0-2015.19
                                 0-2020.19  0-2024.24  0-2028.24  0-2032.24  0-2036.24  0-2040.24  0-2044.24  0-2044.41  0-2048.24
                                 0-2048.41  0-2052.24  0-2052.41  0-2056.24  0-2056.42  0-2060.24  0-2064.24  0-2068.24  0-2068.41
                                 0-2072.24  0-2072.42  0-2076.24  0-2080.24  0-2084.24  0-2088.24  0-2088.42  0-2092.24  0-2092.41
                                 0-2096.24  0-2100.24  0-2104.24  0-2108.24  0-2112.24  0-2116.24  0-2120.24  0-2124.24  0-2129.24
                                 0-2133.24  0-2137.24  0-2142.20  0-2142.39  0-2143.19  0-2147.24  0-2151.24  0-2155.24  0-2159.24
                                 0-2163.24  0-2167.24  0-2171.24  0-2175.24  0-2179.24  0-2179.43  0-2183.24  0-2187.24  0-2191.24
                                 0-2195.24  0-2199.24  0-2203.24  0-2207.24  0-2211.24  0-2215.24  0-2219.24  0-2225.24  0-2229.24
                                 0-2233.24  0-2237.29  0-2241.20  0-2242.19  0-2245.24  0-2248.24  0-2248.42  0-2251.24  0-2254.24
                                 0-2257.24  0-2260.24  0-2263.24  0-2266.24  0-2269.24  0-2272.24  0-2275.24  0-2278.24  0-2281.24
                                 0-2284.24  0-2287.24  0-2290.24  0-2293.24  0-2296.24  0-2299.24  0-2302.24  0-2305.24  0-2308.24
                                 0-2311.24  0-2314.24  0-2317.24  0-2320.24  0-2323.24  0-2326.24  0-2329.24  0-2332.24  0-2335.24
                                 0-2338.24  0-2341.29  0-2351.11  0-2352.20  0-2361.11  0-2362.20  0-2371.11  0-2372.15  0-2372.33
                                 0-2381.15  0-2390.20  0-2399.11  0-2400.20  0-2407.11  0-2408.15  0-2408.32  0-2409.19  0-2409.36
                                 0-2415.28  0-2422.20  0-2422.38  0-2425.28  0-2431.25  0-2439.20  0-2452.21  0-2484.13
 
kptr                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-1773.21$  0-1688.29  0-1833.7@  0-1833.17  0-1833.28  0-1833.42  0-1833.56  0-1837.24  0-1837.33
                                 0-1838.7@  0-1838.18  0-1842.24  0-1842.33  0-1843.7@  0-1843.18  0-1845.13  0-1847.22  0-1847.41
                                 0-1848.11@  0-1852.33  0-1863.15@  0-1863.28  0-1868.33  0-1879.15@  0-1879.28  0-1891.39
                                 0-1892.23@  0-1892.31  0-1903.35  0-1904.19@  0-1904.27  0-1909.33  0-1926.11@  0-1938.11@
                                 0-1948.11@  0-1958.11@  0-1968.11@  0-1982.11@  0-1992.11@  0-2002.11@  0-2375.15@  0-2384.15@
                                 0-2414.15@  0-2417.15@  0-2424.15@  0-2451.7@  0-2485.9@
 
kret                             Reference argument, Integer(4), Offset: 0, Alignment: full word
                                 0-1778.21$  0-1688.49  0-1914.11@  0-1919.7@  0-1939.34  0-1940.14  0-1949.34  0-1950.14  0-1959.34
                                 0-1960.14  0-1969.34  0-1970.14  0-1983.34  0-1984.14  0-1993.34  0-1994.14  0-2003.34  0-2004.14
                                 0-2344.15@  0-2415.38  0-2416.18  0-2425.38  0-2426.18  0-2434.15@  0-2444.15@  0-2452.31
                                 0-2453.10  0-2484.29@
 
mask                             Static, Integer(4) (1:8), Offset: 0, Alignment: full word
                                 0-1779.21$  0-1826.13*
 
msga                             Reference argument, Character(1) (1:*), Offset: 0, Alignment: byte
                                 0-1767.21$  0-1688.24  0-1837.19  0-1842.19  0-1852.41  0-1868.41  0-1891.47  0-1903.43  0-1909.41
 
** fi634   === End of Compilation 5 ===
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              DBG             DDIM            ESCAPE
         FULLPATH        I4              INLGLUE         NOLIBESSL
         NOLIBPOSIX      OBJECT          SOURCE          STRICT
         SWAPOMP         THREADED        UNWIND          NOZEROSIZE
  
         ==  Options Of Integer Type ==
         ALIAS_SIZE(65536)     FIXED(72)             MAXMEM(-1)
         OPTIMIZE(2)           SPILLSIZE(548)        STACKTEMP(0)
  
  
         ==  Options Of Character Type  ==
         64(LARGETYPE)         ALIAS(STD,INTPTR)     ALIGN(BINDC(POWER),STRUCT(NATURAL))
         ARCH(PWR6)            ATTR()                AUTODBL(NONE)
         DESCRIPTOR(V1)        DIRECTIVE(IBM*,IBMT)  ENUM()
         FLAG(I,I)             FLOAT(RNDSNGL,MAF,FOLD,RNGCHK,SINGLE)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LANGLVL(EXTENDED)     POSITION(APPENDOLD)   REALSIZE(4)
         NOSAVE()              TUNE(PWR6)            UNROLL(AUTO)
         XREF(FULL)            XLF2003(NOPOLYMORPHIC,NOBOZLITARGS,NOSTOPEXCEPT,NOVOLATILE,NOAUTOREALLOC,OLDNANINF)
         XLF77(NOLEADZERO,GEDIT77,NOBLANKPAD,OLDBOZ,INTARG,INTXOR,PERSISTENT,SOFTEOF)
         XLF90(NOSIGNEDZERO,NOAUTODEALLOC,OLDPAD)
  
>>>>> SOURCE SECTION <<<<<
       2492 |C-----------------------------------------------------------------------
       2493 |      SUBROUTINE FI634X(NPTS,NSKP,MSGA,KBMS)
       2494 |C$$$  SUBPROGRAM DOCUMENTATION  BLOCK
       2495 |C                .      .    .                                       .
       2496 |C SUBPROGRAM:    FI634X      EXTRACT BIT MAP
       2497 |C   PRGMMR: IREDELL          ORG: W/NP23     DATE: 91-09-19
       2498 |C
       2499 |C ABSTRACT: EXTRACT THE PACKED BITMAP INTO A LOGICAL ARRAY.
       2500 |C
       2501 |C PROGRAM HISTORY LOG:
       2502 |C   97-09-19  IREDELL     VECTORIZED BITMAP DECODER
       2503 |C
       2504 |C USAGE:    CALL FI634X(NPTS,NSKP,MSGA,KBMS)
       2505 |C   INPUT ARGUMENT LIST:
       2506 |C     NPTS       - INTEGER NUMBER OF POINTS IN THE BITMAP FIELD
       2507 |C     NSKP       - INTEGER NUMBER OF BITS TO SKIP IN GRIB MESSAGE
       2508 |C     MSGA       - CHARACTER*1 GRIB MESSAGE
       2509 |C
       2510 |C   OUTPUT ARGUMENT LIST:
       2511 |C     KBMS       - LOGICAL*1 BITMAP
       2512 |C
       2513 |C REMARKS:
       2514 |C   SUBPROGRAM CAN BE CALLED FROM A MULTIPROCESSING ENVIRONMENT.
       2515 |C
       2516 |C ATTRIBUTES:
       2517 |C   LANGUAGE: FORTRAN 77
       2518 |C   MACHINE:  CRAY
       2519 |C
       2520 |C$$$
       2521 |      CHARACTER*1   MSGA(*)
       2522 |      LOGICAL*1     KBMS(NPTS)
       2523 |      INTEGER       ICHK(NPTS)
       2524 |C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2525 |      CALL GBYTES(MSGA,ICHK,NSKP,1,0,NPTS)
       2526 |      KBMS=ICHK.NE.0
       2527 |C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       2528 |      END
 
>>>>> ATTRIBUTE AND CROSS REFERENCE SECTION <<<<<
 
 
 
IDENTIFIER NAME                  CROSS REFERENCE AND ATTRIBUTES
 
fi634x                           Subroutine
                                 0-2493.18$
 
gbytes                           External Subroutine
                                 0-2525.12
 
ichk                             Controlled Automatic, Integer(4) (1:?), Offset: 0, Alignment: full word
                                 0-2523.21$  0-2525.24  0-2526.12
 
kbms                             Reference argument, Logical(1) (1:?), Offset: 0, Alignment: byte
                                 0-2522.21$  0-2493.40  0-2526.7@
 
msga                             Reference argument, Character(1) (1:*), Offset: 0, Alignment: byte
                                 0-2521.21$  0-2493.35  0-2525.19
 
npts                             Reference argument, Integer(4), Offset: 0, Alignment: full word
                                 0-2493.25  0-2522.26  0-2522.26  0-2523.26  0-2523.26  0-2525.38
 
nskp                             Reference argument, Integer(4), Offset: 0, Alignment: full word
                                 0-2493.30  0-2525.29
 
** fi634x   === End of Compilation 6 ===
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              DBG             DDIM            ESCAPE
         FULLPATH        I4              INLGLUE         NOLIBESSL
         NOLIBPOSIX      OBJECT          SOURCE          STRICT
         SWAPOMP         THREADED        UNWIND          NOZEROSIZE
  
         ==  Options Of Integer Type ==
         ALIAS_SIZE(65536)     FIXED(72)             MAXMEM(-1)
         OPTIMIZE(2)           SPILLSIZE(548)        STACKTEMP(0)
  
  
         ==  Options Of Character Type  ==
         64(LARGETYPE)         ALIAS(STD,INTPTR)     ALIGN(BINDC(POWER),STRUCT(NATURAL))
         ARCH(PWR6)            ATTR()                AUTODBL(NONE)
         DESCRIPTOR(V1)        DIRECTIVE(IBM*,IBMT)  ENUM()
         FLAG(I,I)             FLOAT(RNDSNGL,MAF,FOLD,RNGCHK,SINGLE)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LANGLVL(EXTENDED)     POSITION(APPENDOLD)   REALSIZE(4)
         NOSAVE()              TUNE(PWR6)            UNROLL(AUTO)
         XREF(FULL)            XLF2003(NOPOLYMORPHIC,NOBOZLITARGS,NOSTOPEXCEPT,NOVOLATILE,NOAUTOREALLOC,OLDNANINF)
         XLF77(NOLEADZERO,GEDIT77,NOBLANKPAD,OLDBOZ,INTARG,INTXOR,PERSISTENT,SOFTEOF)
         XLF90(NOSIGNEDZERO,NOAUTODEALLOC,OLDPAD)
  
>>>>> SOURCE SECTION <<<<<
       2529 |      SUBROUTINE FI635(MSGA,KPTR,KPDS,KGDS,KBMS,DATA,KRET)
       2530 |C$$$  SUBPROGRAM DOCUMENTATION  BLOCK
       2531 |C                .      .    .                                       .
       2532 |C SUBPROGRAM:    FI635         EXTRACT GRIB DATA ELEMENTS FROM BDS
       2533 |C   PRGMMR: BILL CAVANAUGH   ORG: W/NMC42    DATE: 91-09-13
       2534 |C
       2535 |C ABSTRACT: EXTRACT GRIB DATA FROM BINARY DATA SECTION AND PLACE
       2536 |C           INTO OUTPUT ARRAY IN PROPER POSITION.
       2537 |C
       2538 |C PROGRAM HISTORY LOG:
       2539 |C   91-09-13  CAVANAUGH
       2540 |C   94-04-01  CAVANAUGH  MODIFIED CODE TO INCLUDE DECIMAL SCALING WHEN
       2541 |C                        CALCULATING THE VALUE OF DATA POINTS SPECIFIED
       2542 |C                        AS BEING EQUAL TO THE REFERENCE VALUE
       2543 |C   94-11-10  FARLEY     INCREASED MXSIZE FROM 72960 TO 260000
       2544 |C                        FOR .5 DEGREE SST ANALYSIS FIELDS
       2545 |C   95-10-31  IREDELL    REMOVED SAVES AND PRINTS
       2546 |C   98-08-31  IREDELL    ELIMINATED NEED FOR MXSIZE
       2547 |C
       2548 |C USAGE:    CALL FI635(MSGA,KPTR,KPDS,KGDS,KBMS,DATA,KRET)
       2549 |C   INPUT ARGUMENT LIST:
       2550 |C     MSGA       - ARRAY CONTAINING GRIB MESSAGE
       2551 |C     KPTR       - ARRAY CONTAINING STORAGE FOR FOLLOWING PARAMETERS
       2552 |C          (1)   - TOTAL LENGTH OF GRIB MESSAGE
       2553 |C          (2)   - LENGTH OF INDICATOR (SECTION  0)
       2554 |C          (3)   - LENGTH OF PDS       (SECTION  1)
       2555 |C          (4)   - LENGTH OF GDS       (SECTION  2)
       2556 |C          (5)   - LENGTH OF BMS       (SECTION  3)
       2557 |C          (6)   - LENGTH OF BDS       (SECTION  4)
       2558 |C          (7)   - VALUE OF CURRENT BYTE
       2559 |C          (8)   - BIT POINTER
       2560 |C          (9)   - GRIB START BIT NR
       2561 |C         (10)   - GRIB/GRID ELEMENT COUNT
       2562 |C         (11)   - NR UNUSED BITS AT END OF SECTION 3
       2563 |C         (12)   - BIT MAP FLAG
       2564 |C         (13)   - NR UNUSED BITS AT END OF SECTION 2
       2565 |C         (14)   - BDS FLAGS
       2566 |C         (15)   - NR UNUSED BITS AT END OF SECTION 4
       2567 |C     KPDS     - ARRAY CONTAINING PDS ELEMENTS.
       2568 |C                  SEE INITIAL ROUTINE
       2569 |C     KBMS       - BITMAP DESCRIBING LOCATION OF OUTPUT ELEMENTS.
       2570 |C
       2571 |C   OUTPUT ARGUMENT LIST:
       2572 |C     KBDS       - INFORMATION EXTRACTED FROM BINARY DATA SECTION
       2573 |C     KBDS(1)  - N1
       2574 |C     KBDS(2)  - N2
       2575 |C     KBDS(3)  - P1
       2576 |C     KBDS(4)  - P2
       2577 |C     KBDS(5)  - BIT POINTER TO 2ND ORDER WIDTHS
       2578 |C     KBDS(6)  -  "    "     "   "   "    BIT MAPS
       2579 |C     KBDS(7)  -  "    "     "  FIRST ORDER VALUES
       2580 |C     KBDS(8)  -  "    "     "  SECOND ORDER VALUES
       2581 |C     KBDS(9)  -  "    "     START OF BDS
       2582 |C     KBDS(10) -  "    "     MAIN BIT MAP
       2583 |C     KBDS(11) - BINARY SCALING
       2584 |C     KBDS(12) - DECIMAL SCALING
       2585 |C     KBDS(13) - BIT WIDTH OF FIRST ORDER VALUES
       2586 |C     KBDS(14) - BIT MAP FLAG
       2587 |C                 0 = NO SECOND ORDER BIT MAP
       2588 |C                 1 = SECOND ORDER BIT MAP PRESENT
       2589 |C     KBDS(15) - SECOND ORDER BIT WIDTH
       2590 |C     KBDS(16) - CONSTANT / DIFFERENT WIDTHS
       2591 |C                 0 = CONSTANT WIDTHS
       2592 |C                 1 = DIFFERENT WIDTHS
       2593 |C     KBDS(17) - SINGLE DATUM / MATRIX
       2594 |C                 0 = SINGLE DATUM AT EACH GRID POINT
       2595 |C                 1 = MATRIX OF VALUES AT EACH GRID POINT
       2596 |C       (18-20)- UNUSED
       2597 |C
       2598 |C     DATA       - REAL*4 ARRAY OF GRIDDED ELEMENTS IN GRIB MESSAGE.
       2599 |C     KPTR       - ARRAY CONTAINING STORAGE FOR FOLLOWING PARAMETERS
       2600 |C                  SEE INPUT LIST
       2601 |C     KRET       - ERROR RETURN
       2602 |C
       2603 |C REMARKS:
       2604 |C     ERROR RETURN
       2605 |C              3 = UNPACKED FIELD IS LARGER THAN 65160
       2606 |C              6 = DOES NOT MATCH NR OF ENTRIES FOR THIS GRIB/GRID
       2607 |C              7 = NUMBER OF BITS IN FILL TOO LARGE
       2608 |C
       2609 |C   SUBPROGRAM CAN BE CALLED FROM A MULTIPROCESSING ENVIRONMENT.
       2610 |C
       2611 |C ATTRIBUTES:
       2612 |C   LANGUAGE: FORTRAN 77
       2613 |C   MACHINE:  HDS9000
       2614 |C
       2615 |C$$$
       2616 |C
       2617 |      CHARACTER*1   MSGA(*)
       2618 |      CHARACTER*1   KK(8)
       2619 |      CHARACTER*1   CKREF(8)
       2620 |C
       2621 |      LOGICAL*1     KBMS(*)
       2622 |C
       2623 |      INTEGER       KPDS(*)
       2624 |      INTEGER       KGDS(*)
       2625 |      INTEGER       KBDS(20)
       2626 |      INTEGER       KPTR(*)
       2627 |      INTEGER       NRBITS
       2628 |      INTEGER       KREF
       2629 |      INTEGER       KKK
       2630 |      INTEGER,ALLOCATABLE::  KSAVE(:)
       2631 |      INTEGER       KSCALE
       2632 |C
       2633 |      REAL          DATA(*)
       2634 |      REAL          REFNCE
       2635 |      REAL          SCALE
       2636 |      REAL          REALKK
       2637 |C
       2638 |      EQUIVALENCE   (CKREF(1),KREF,REFNCE)
       2639 |      EQUIVALENCE   (KK(1),KKK,REALKK)
       2640 |C
       2641 |C
       2642 |C     CHANGED HEX VALUES TO DECIMAL TO MAKE CODE MORE PORTABLE
       2643 |C
       2644 |C  *************************************************************
       2645 |C     PRINT *,'ENTER FI635'
       2646 |C              SET UP BIT POINTER
       2647 |      KPTR(8) = KPTR(9) + (KPTR(2)*8) + (KPTR(3)*8) + (KPTR(4)*8)
       2648 |     *                + (KPTR(5)*8) + 24
       2649 |C  ------------- EXTRACT FLAGS
       2650 |C            BYTE 4
       2651 |      CALL GBYTE(MSGA,KPTR(14),KPTR(8),4)
       2652 |      KPTR(8)  = KPTR(8) + 4
       2653 |C  --------- NR OF UNUSED BITS IN SECTION 4
       2654 |      CALL GBYTE(MSGA,KPTR(15),KPTR(8),4)
       2655 |      KPTR(8)  = KPTR(8) + 4
       2656 |      KEND    = KPTR(9) + (KPTR(2)*8) + (KPTR(3)*8) + (KPTR(4)*8)
       2657 |     *                + (KPTR(5)*8) + KPTR(6) * 8 - KPTR(15)
       2658 |C  ------------- GET SCALE FACTOR
       2659 |C            BYTES 5,6
       2660 |C                                  CHECK SIGN
       2661 |      CALL GBYTE (MSGA,KSIGN,KPTR(8),1)
       2662 |      KPTR(8)  = KPTR(8) + 1
       2663 |C                                  GET ABSOLUTE SCALE VALUE
       2664 |      CALL GBYTE (MSGA,KSCALE,KPTR(8),15)
       2665 |      KPTR(8)  = KPTR(8) + 15
       2666 |      IF (KSIGN.GT.0) THEN
       2667 |          KSCALE  = - KSCALE
       2668 |      END IF
       2669 |      SCALE = 2.0**KSCALE
       2670 |C  ------------ GET REFERENCE VALUE
       2671 |C            BYTES 7,10
       2672 |      CALL GBYTE (MSGA,KREF,KPTR(8),32)
       2673 |      KPTR(8)  = KPTR(8) + 32
       2674 |C
       2675 |C     THE NEXT CODE WILL CONVERT THE IBM370 FLOATING POINT
       2676 |C     TO THE FLOATING POINT USED ON YOUR COMPUTER.
       2677 |C
       2678 |C     1ST TEST TO SEE IN ON 32 OR 64 BIT WORD MACHINE
       2679 |C     LW = 4 OR 8;  IF 8 MAY BE A CRAY
       2680 |C
       2681 |      CALL W3FI01(LW)
       2682 |      IF (LW.EQ.4) THEN
       2683 |        CALL GBYTE (CKREF,JSGN,0,1)
       2684 |        CALL GBYTE (CKREF,JEXP,1,7)
       2685 |        CALL GBYTE (CKREF,IFR,8,24)
       2686 |      ELSE
       2687 |        CALL GBYTE (CKREF,JSGN,32,1)
       2688 |        CALL GBYTE (CKREF,JEXP,33,7)
       2689 |        CALL GBYTE (CKREF,IFR,40,24)
       2690 |      ENDIF
       2691 |C     PRINT *,109,JSGN,JEXP,IFR
       2692 |C 109 FORMAT (' JSGN,JEXP,IFR = ',3(1X,Z8))
       2693 |      IF (IFR.EQ.0) THEN
       2694 |          REFNCE  = 0.0
       2695 |      ELSE IF (JEXP.EQ.0.AND.IFR.EQ.0) THEN
       2696 |          REFNCE  = 0.0
       2697 |      ELSE
       2698 |          REFNCE  = FLOAT(IFR) * 16.0 ** (JEXP - 64 - 6)
       2699 |          IF (JSGN.NE.0) REFNCE = - REFNCE
       2700 |      END IF
       2701 |C     PRINT *,'SCALE ',SCALE,' REF VAL ',KREF,REFNCE
       2702 |C  ------------- NUMBER OF BITS SPECIFIED FOR EACH ENTRY
       2703 |C            BYTE 11
       2704 |      CALL GBYTE (MSGA,KBITS,KPTR(8),8)
       2705 |      KPTR(8)  = KPTR(8) + 8
       2706 |      KBDS(4)  = KBITS
       2707 |C     KBDS(13) = KBITS
       2708 |      IBYT12   = KPTR(8)
       2709 |C  ------------------ IF THERE ARE NO EXTENDED FLAGS PRESENT
       2710 |C                     THIS IS WHERE DATA BEGINS AND AND THE PROCESSING
       2711 |C                     INCLUDED IN THE FOLLOWING IF...END IF
       2712 |C                     WILL BE SKIPPED
       2713 |C     PRINT *,'BASIC FLAGS =',KPTR(14) ,IAND(KPTR(14),1)
       2714 |      IF (IAND(KPTR(14),1).EQ.0) THEN
       2715 |C         PRINT *,'NO EXTENDED FLAGS'
       2716 |      ELSE
       2717 |C            BYTES 12,13
       2718 |          CALL GBYTE (MSGA,KOCTET,KPTR(8),16)
       2719 |          KPTR(8)  = KPTR(8) + 16
       2720 |C  --------------------------- EXTENDED FLAGS
       2721 |C            BYTE 14
       2722 |          CALL GBYTE (MSGA,KXFLAG,KPTR(8),8)
       2723 |C         PRINT *,'HAVE EXTENDED FLAGS',KXFLAG
       2724 |          KPTR(8)  = KPTR(8) + 8
       2725 |          IF (IAND(KXFLAG,16).EQ.0) THEN
       2726 |C                          SECOND ORDER VALUES CONSTANT WIDTHS
       2727 |              KBDS(16)  = 0
       2728 |          ELSE
       2729 |C                          SECOND ORDER VALUES DIFFERENT WIDTHS
       2730 |              KBDS(16)  = 1
       2731 |          END IF
       2732 |          IF (IAND (KXFLAG,32).EQ.0) THEN
       2733 |C                         NO SECONDARY BIT MAP
       2734 |              KBDS(14)  = 0
       2735 |          ELSE
       2736 |C                         HAVE SECONDARY BIT MAP
       2737 |              KBDS(14)  = 1
       2738 |          END IF
       2739 |          IF (IAND (KXFLAG,64).EQ.0) THEN
       2740 |C                         SINGLE DATUM AT GRID POINT
       2741 |              KBDS(17)  = 0
       2742 |          ELSE
       2743 |C                         MATRIX OF VALUES AT GRID POINT
       2744 |              KBDS(17)  = 1
       2745 |          END IF
       2746 |C  ---------------------- NR - FIRST DIMENSION (ROWS) OF EACH MATRIX
       2747 |C            BYTES 15,16
       2748 |          CALL GBYTE (MSGA,NR,KPTR(8),16)
       2749 |          KPTR(8)  = KPTR(8) + 16
       2750 |C  ---------------------- NC - SECOND DIMENSION (COLS) OF EACH MATRIX
       2751 |C            BYTES 17,18
       2752 |          CALL GBYTE (MSGA,NC,KPTR(8),16)
       2753 |          KPTR(8)  = KPTR(8) + 16
       2754 |C  ---------------------- NRV - FIRST DIM COORD VALS
       2755 |C            BYTE 19
       2756 |          CALL GBYTE (MSGA,NRV,KPTR(8),8)
       2757 |          KPTR(8)  = KPTR(8) + 8
       2758 |C  ---------------------- NC1 - NR COEFF'S OR VALUES
       2759 |C            BYTE 20
       2760 |          CALL GBYTE (MSGA,NC1,KPTR(8),8)
       2761 |          KPTR(8)  = KPTR(8) + 8
       2762 |C  ---------------------- NCV - SECOND DIM COORD OR VALUE
       2763 |C            BYTE 21
       2764 |          CALL GBYTE (MSGA,NCV,KPTR(8),8)
       2765 |          KPTR(8)  = KPTR(8) + 8
       2766 |C  ---------------------- NC2 - NR COEFF'S OR VALS
       2767 |C            BYTE 22
       2768 |          CALL GBYTE (MSGA,NC2,KPTR(8),8)
       2769 |          KPTR(8)  = KPTR(8) + 8
       2770 |C  ---------------------- KPHYS1 - FIRST DIM PHYSICAL SIGNIF
       2771 |C            BYTE 23
       2772 |          CALL GBYTE (MSGA,KPHYS1,KPTR(8),8)
       2773 |          KPTR(8)  = KPTR(8) + 8
       2774 |C  ---------------------- KPHYS2 - SECOND DIM PHYSICAL SIGNIF
       2775 |C            BYTE 24
       2776 |          CALL GBYTE (MSGA,KPHYS2,KPTR(8),8)
       2777 |          KPTR(8)  = KPTR(8) + 8
       2778 |C            BYTES 25-N
       2779 |      END IF
       2780 |      IF (KBITS.EQ.0) THEN
       2781 |C                       HAVE NO BDS ENTRIES, ALL ENTRIES = REFNCE
       2782 |          SCAL10  = 10.0 ** KPDS(22)
       2783 |          SCAL10  = 1.0 / SCAL10
       2784 |          REFN10  = REFNCE * SCAL10
       2785 |          KENTRY = KPTR(10)
       2786 |          DO 210 I = 1, KENTRY
       2787 |              DATA(I) = 0.0
       2788 |              IF (KBMS(I)) THEN
       2789 |                   DATA(I) = REFN10
       2790 |              END IF
       2791 |  210     CONTINUE
       2792 |          GO TO 900
       2793 |      END IF
       2794 |C     PRINT *,'KEND ',KEND,' KPTR(8) ',KPTR(8),'KBITS ',KBITS
       2795 |      KNR     = (KEND - KPTR(8)) / KBITS
       2796 |C     PRINT *,'NUMBER OF ENTRIES IN DATA ARRAY',KNR
       2797 |C  --------------------
       2798 |C       CYCLE THRU BDS UNTIL HAVE USED ALL (SPECIFIED NUMBER)
       2799 |C       ENTRIES.
       2800 |C  ------------- UNUSED BITS IN DATA AREA
       2801 |C NUMBER OF BYTES IN DATA AREA
       2802 |      NRBYTE  = KPTR(6) - 11
       2803 |C  ------------- TOTAL NR OF USABLE BITS
       2804 |      NRBITS  = NRBYTE * 8  - KPTR(15)
       2805 |C  ------------- TOTAL NR OF ENTRIES
       2806 |      KENTRY = NRBITS / KBITS
       2807 |C                             ALLOCATE KSAVE
       2808 |      ALLOCATE(KSAVE(KENTRY))
       2809 |C
       2810 |C     IF (IAND(KPTR(14),2).EQ.0) THEN
       2811 |C        PRINT *,'SOURCE VALUES IN FLOATING POINT'
       2812 |C     ELSE
       2813 |C        PRINT *,'SOURCE VALUES IN INTEGER'
       2814 |C     END IF
       2815 |C
       2816 |      IF (IAND(KPTR(14),8).EQ.0) THEN
       2817 |C        PRINT *,'PROCESSING GRID POINT DATA'
       2818 |         IF (IAND(KPTR(14),4).EQ.0) THEN
       2819 |C            PRINT *,'    WITH SIMPLE PACKING'
       2820 |             IF (IAND(KPTR(14),1).EQ.0) THEN
       2821 |C                PRINT *,'        WITH NO ADDITIONAL FLAGS'
       2822 |                 GO TO 4000
       2823 |             ELSE IF (IAND(KPTR(14),1).NE.0) THEN
       2824 |C                PRINT *,'        WITH ADDITIONAL FLAGS',KXFLAG
       2825 |                 IF (KBDS(17).EQ.0) THEN
       2826 |C                    PRINT *,'            SINGLE DATUM EACH GRID PT'
       2827 |                     IF (KBDS(14).EQ.0) THEN
       2828 |C                        PRINT *,'            NO SEC BIT MAP'
       2829 |                         IF (KBDS(16).EQ.0) THEN
       2830 |C                            PRINT *,'            SECOND ORDER',
       2831 |C    *                          ' VALUES CONSTANT WIDTH'
       2832 |                         ELSE IF (KBDS(16).NE.0) THEN
       2833 |C                            PRINT *,'            SECOND ORDER',
       2834 |C    *                            ' VALUES DIFFERENT WIDTHS'
       2835 |                         END IF
       2836 |                     ELSE IF (KBDS(14).NE.0) THEN
       2837 |C                        PRINT *,'            SEC BIT MAP'
       2838 |                         IF (KBDS(16).EQ.0) THEN
       2839 |C                             PRINT *,'            SECOND ORDER',
       2840 |C    *                              ' VALUES CONSTANT WIDTH'
       2841 |                         ELSE IF (KBDS(16).NE.0) THEN
       2842 |C                            PRINT *,'            SECOND ORDER',
       2843 |C    *                             ' VALUES DIFFERENT WIDTHS'
       2844 |                         END IF
       2845 |                     END IF
       2846 |                 ELSE IF (KBDS(17).NE.0) THEN
       2847 |C                    PRINT *,'            MATRIX OF VALS EACH PT'
       2848 |                     IF (KBDS(14).EQ.0) THEN
       2849 |C                        PRINT *,'            NO SEC BIT MAP'
       2850 |                         IF (KBDS(16).EQ.0) THEN
       2851 |C                            PRINT *,'            SECOND ORDER',
       2852 |C    *                          ' VALUES CONSTANT WIDTH'
       2853 |                         ELSE IF (KBDS(16).NE.0) THEN
       2854 |C                            PRINT *,'            SECOND ORDER',
       2855 |C    *                              ' VALUES DIFFERENT WIDTHS'
       2856 |                         END IF
       2857 |                     ELSE IF (KBDS(14).NE.0) THEN
       2858 |C                        PRINT *,'            SEC BIT MAP'
       2859 |                         IF (KBDS(16).EQ.0) THEN
       2860 |C                            PRINT *,'            SECOND ORDER',
       2861 |C    *                             ' VALUES CONSTANT WIDTH'
       2862 |                         ELSE IF (KBDS(16).NE.0) THEN
       2863 |C                            PRINT *,'            SECOND ORDER',
       2864 |C    *                              ' VALUES DIFFERENT WIDTHS'
       2865 |                         END IF
       2866 |                     END IF
       2867 |                 END IF
       2868 |             END IF
       2869 |         ELSE IF (IAND(KPTR(14),4).NE.0) THEN
       2870 |C            PRINT *,'    WITH COMPLEX/SECOND ORDER PACKING'
       2871 |             IF (IAND(KPTR(14),1).EQ.0) THEN
       2872 |C                    PRINT *,'        WITH NO ADDITIONAL FLAGS'
       2873 |             ELSE IF (IAND(KPTR(14),1).NE.0) THEN
       2874 |C                PRINT *,'        WITH ADDITIONAL FLAGS'
       2875 |                 IF (KBDS(17).EQ.0) THEN
       2876 |C                    PRINT *,'            SINGLE DATUM AT EACH PT'
       2877 |                     IF (KBDS(14).EQ.0) THEN
       2878 |C                            PRINT *,'            NO SEC BIT MAP'
       2879 |                         IF (KBDS(16).EQ.0) THEN
       2880 |C                            PRINT *,'            SECOND ORDER',
       2881 |C    *                             ' VALUES CONSTANT WIDTH'
       2882 |                         ELSE IF (KBDS(16).NE.0) THEN
       2883 |C                            PRINT *,'            SECOND ORDER',
       2884 |C    *                              ' VALUES DIFFERENT WIDTHS'
       2885 |                         END IF
       2886 |C                                       ROW BY ROW - COL BY COL
       2887 |                         CALL FI636 (DATA,MSGA,KBMS,
       2888 |     *                                         REFNCE,KPTR,KPDS,KGDS)
       2889 |                         GO TO 900
       2890 |                     ELSE IF (KBDS(14).NE.0) THEN
       2891 |C                        PRINT *,'            SEC BIT MAP'
       2892 |                         IF (KBDS(16).EQ.0) THEN
       2893 |C                                PRINT *,'            SECOND ORDER',
       2894 |C    *                              ' VALUES CONSTANT WIDTH'
       2895 |                         ELSE IF (KBDS(16).NE.0) THEN
       2896 |C                                PRINT *,'            SECOND ORDER',
       2897 |C    *                              ' VALUES DIFFERENT WIDTHS'
       2898 |                         END IF
       2899 |                         CALL FI636 (DATA,MSGA,KBMS,
       2900 |     *                                         REFNCE,KPTR,KPDS,KGDS)
       2901 |                         GO TO 900
       2902 |                     END IF
       2903 |                 ELSE IF (KBDS(17).NE.0) THEN
       2904 |C                    PRINT *,'            MATRIX OF VALS EACH PT'
       2905 |                     IF (KBDS(14).EQ.0) THEN
       2906 |C                        PRINT *,'            NO SEC BIT MAP'
       2907 |                         IF (KBDS(16).EQ.0) THEN
       2908 |C                              PRINT *,'            SECOND ORDER',
       2909 |C    *                              ' VALUES CONSTANT WIDTH'
       2910 |                         ELSE IF (KBDS(16).NE.0) THEN
       2911 |C                            PRINT *,'            SECOND ORDER',
       2912 |C    *                              ' VALUES DIFFERENT WIDTHS'
       2913 |                         END IF
       2914 |                     ELSE IF (KBDS(14).NE.0) THEN
       2915 |C                        PRINT *,'            SEC BIT MAP'
       2916 |                         IF (KBDS(16).EQ.0) THEN
       2917 |C                              PRINT *,'            SECOND ORDER',
       2918 |C    *                              ' VALUES CONSTANT WIDTH'
       2919 |                         ELSE IF (KBDS(16).NE.0) THEN
       2920 |C                                PRINT *,'            SECOND ORDER',
       2921 |C    *                              ' VALUES DIFFERENT WIDTHS'
       2922 |                         END IF
       2923 |                     END IF
       2924 |                 END IF
       2925 |             END IF
       2926 |         END IF
       2927 |      ELSE IF (IAND(KPTR(14),8).NE.0) THEN
       2928 |C        PRINT *,'PROCESSING SPHERICAL HARMONIC COEFFICIENTS'
       2929 |         IF (IAND(KPTR(14),4).EQ.0) THEN
       2930 |C            PRINT *,'    WITH SIMPLE PACKING'
       2931 |             IF (IAND(KPTR(14),1).EQ.0) THEN
       2932 |C                PRINT *,'        WITH NO ADDITIONAL FLAGS'
       2933 |                 GO TO 5000
       2934 |             ELSE IF (IAND(KPTR(14),1).NE.0) THEN
       2935 |C                PRINT *,'        WITH ADDITIONAL FLAGS'
       2936 |                 IF (KBDS(17).EQ.0) THEN
       2937 |C                    PRINT *,'            SINGLE DATUM EACH GRID PT'
       2938 |                     IF (KBDS(14).EQ.0) THEN
       2939 |C                        PRINT *,'            NO SEC BIT MAP'
       2940 |                         IF (KBDS(16).EQ.0) THEN
       2941 |C                            PRINT *,'            SECOND ORDER',
       2942 |C    *                              ' VALUES CONSTANT WIDTH'
       2943 |                         ELSE IF (KBDS(16).NE.0) THEN
       2944 |C                            PRINT *,'            SECOND ORDER',
       2945 |C    *                              ' VALUES DIFFERENT WIDTHS'
       2946 |                         END IF
       2947 |                     ELSE IF (KBDS(14).NE.0) THEN
       2948 |C                        PRINT *,'            SEC BIT MAP'
       2949 |                         IF (KBDS(16).EQ.0) THEN
       2950 |C                            PRINT *,'            SECOND ORDER',
       2951 |C    *                              ' VALUES CONSTANT WIDTH'
       2952 |                         ELSE IF (KBDS(16).NE.0) THEN
       2953 |C                            PRINT *,'            SECOND ORDER',
       2954 |C    *                            ' VALUES DIFFERENT WIDTHS'
       2955 |                         END IF
       2956 |                     END IF
       2957 |                 ELSE IF (KBDS(17).NE.0) THEN
       2958 |C                    PRINT *,'            MATRIX OF VALS EACH PT'
       2959 |                     IF (KBDS(14).EQ.0) THEN
       2960 |C                        PRINT *,'            NO SEC BIT MAP'
       2961 |                         IF (KBDS(16).EQ.0) THEN
       2962 |C                            PRINT *,'            SECOND ORDER',
       2963 |C    *                              ' VALUES CONSTANT WIDTH'
       2964 |                         ELSE IF (KBDS(16).NE.0) THEN
       2965 |C                            PRINT *,'            SECOND ORDER',
       2966 |C    *                             ' VALUES DIFFERENT WIDTHS'
       2967 |                         END IF
       2968 |                     ELSE IF (KBDS(14).NE.0) THEN
       2969 |C                        PRINT *,'            SEC BIT MAP'
       2970 |                         IF (KBDS(16).EQ.0) THEN
       2971 |C                            PRINT *,'            SECOND ORDER',
       2972 |C    *                              ' VALUES CONSTANT WIDTH'
       2973 |                         ELSE IF (KBDS(16).NE.0) THEN
       2974 |C                            PRINT *,'            SECOND ORDER',
       2975 |C    *                             ' VALUES DIFFERENT WIDTHS'
       2976 |                         END IF
       2977 |                     END IF
       2978 |                 END IF
       2979 |             END IF
       2980 |         ELSE IF (IAND(KPTR(14),4).NE.0) THEN
       2981 |C                                  COMPLEX/SECOND ORDER PACKING
       2982 |C            PRINT *,'    WITH COMPLEX/SECOND ORDER PACKING'
       2983 |             IF (IAND(KPTR(14),1).EQ.0) THEN
       2984 |C                PRINT *,'        WITH NO ADDITIONAL FLAGS'
       2985 |             ELSE IF (IAND(KPTR(14),1).NE.0) THEN
       2986 |C                PRINT *,'        WITH ADDITIONAL FLAGS'
       2987 |                 IF (KBDS(17).EQ.0) THEN
       2988 |C                    PRINT *,'            SINGLE DATUM EACH GRID PT'
       2989 |                     IF (KBDS(14).EQ.0) THEN
       2990 |C                        PRINT *,'            NO SEC BIT MAP'
       2991 |                         IF (KBDS(16).EQ.0) THEN
       2992 |C                            PRINT *,'            SECOND ORDER',
       2993 |C    *                             ' VALUES CONSTANT WIDTH'
       2994 |                         ELSE IF (KBDS(16).NE.0) THEN
       2995 |C                            PRINT *,'            SECOND ORDER',
       2996 |C    *                              ' VALUES DIFFERENT WIDTHS'
       2997 |                         END IF
       2998 |                     ELSE IF (KBDS(14).NE.0) THEN
       2999 |C                        PRINT *,'            SEC BIT MAP'
       3000 |                         IF (KBDS(16).EQ.0) THEN
       3001 |C                            PRINT *,'            SECOND ORDER',
       3002 |C    *                              ' VALUES CONSTANT WIDTH'
       3003 |                         ELSE IF (KBDS(16).NE.0) THEN
       3004 |C                            PRINT *,'            SECOND ORDER',
       3005 |C    *                              ' VALUES DIFFERENT WIDTHS'
       3006 |                         END IF
       3007 |                     END IF
       3008 |                 ELSE IF (KBDS(17).NE.0) THEN
       3009 |C                    PRINT *,'            MATRIX OF VALS EACH PT'
       3010 |                     IF (KBDS(14).EQ.0) THEN
       3011 |C                        PRINT *,'            NO SEC BIT MAP'
       3012 |                         IF (KBDS(16).EQ.0) THEN
       3013 |C                            PRINT *,'            SECOND ORDER',
       3014 |C    *                            ' VALUES CONSTANT WIDTH'
       3015 |                         ELSE IF (KBDS(16).NE.0) THEN
       3016 |C                            PRINT *,'            SECOND ORDER',
       3017 |C    *                              ' VALUES DIFFERENT WIDTHS'
       3018 |                         END IF
       3019 |                     ELSE IF (KBDS(14).NE.0) THEN
       3020 |C                        PRINT *,'            SEC BIT MAP'
       3021 |                         IF (KBDS(16).EQ.0) THEN
       3022 |C                            PRINT *,'            SECOND ORDER',
       3023 |C    *                              ' VALUES CONSTANT WIDTH'
       3024 |                         ELSE IF (KBDS(16).NE.0) THEN
       3025 |C                            PRINT *,'            SECOND ORDER',
       3026 |C    *                              ' VALUES DIFFERENT WIDTHS'
       3027 |                         END IF
       3028 |                     END IF
       3029 |                 END IF
       3030 |             END IF
       3031 |         END IF
       3032 |      END IF
       3033 |      IF(ALLOCATED(KSAVE)) DEALLOCATE(KSAVE)
       3034 |C     PRINT *,' NOT PROCESSED - NOT PROCESSED - NOT PROCESSED'
       3035 |      KRET   = 11
       3036 |      RETURN
       3037 | 4000 CONTINUE
       3038 |C  ****************************************************************
       3039 |C
       3040 |C GRID POINT DATA, SIMPLE PACKING, FLOATING POINT, NO ADDN'L FLAGS
       3041 |C
       3042 |      SCAL10  = 10.0 ** KPDS(22)
       3043 |      SCAL10  = 1.0 / SCAL10
       3044 |      IF (KPDS(3).EQ.23.OR.KPDS(3).EQ.24.OR.KPDS(3).EQ.26.
       3045 |     *            OR.KPDS(3).EQ.63.OR.KPDS(3).EQ.64) THEN
       3046 |          IF (KPDS(3).EQ.26) THEN
       3047 |              KADD    = 72
       3048 |          ELSE IF (KPDS(3).EQ.63.OR.KPDS(3).EQ.64) THEN
       3049 |              KADD    = 91
       3050 |          ELSE
       3051 |              KADD    = 37
       3052 |          END IF
       3053 |          CALL GBYTES (MSGA,KSAVE,KPTR(8),KBITS,0,KNR)
       3054 |          KPTR(8)   = KPTR(8) + KBITS * KNR
       3055 |          II        = 1
       3056 |          KENTRY    = KPTR(10)
       3057 |          DO 4001 I = 1, KENTRY
       3058 |              IF (KBMS(I)) THEN
       3059 |                  DATA(I)   = (REFNCE+FLOAT(KSAVE(II))*SCALE)*SCAL10
       3060 |                  II        = II + 1
       3061 |              ELSE
       3062 |                  DATA(I)   = 0.0
       3063 |              END IF
       3064 | 4001     CONTINUE
       3065 |          DO 4002 I = 2, KADD
       3066 |              DATA(I)   = DATA(1)
       3067 | 4002     CONTINUE
       3068 |      ELSE IF (KPDS(3).EQ.21.OR.KPDS(3).EQ.22.OR.KPDS(3).EQ.25.
       3069 |     *            OR.KPDS(3).EQ.61.OR.KPDS(3).EQ.62) THEN
       3070 |          CALL GBYTES (MSGA,KSAVE,KPTR(8),KBITS,0,KNR)
       3071 |          II    = 1
       3072 |          KENTRY = KPTR(10)
       3073 |          DO 4011 I = 1, KENTRY
       3074 |              IF (KBMS(I)) THEN
       3075 |                  DATA(I) = (REFNCE + FLOAT(KSAVE(II)) * SCALE) * SCAL10
       3076 |                  II  = II + 1
       3077 |              ELSE
       3078 |                  DATA(I) = 0.0
       3079 |              END IF
       3080 | 4011     CONTINUE
       3081 |          IF (KPDS(3).EQ.25) THEN
       3082 |              KADD    = 71
       3083 |          ELSE IF (KPDS(3).EQ.61.OR.KPDS(3).EQ.62) THEN
       3084 |              KADD    = 90
       3085 |          ELSE
       3086 |              KADD    = 36
       3087 |          END IF
       3088 |          LASTP   = KENTRY - KADD
       3089 |          DO 4012 I = LASTP+1, KENTRY
       3090 |              DATA(I) = DATA(LASTP)
       3091 | 4012     CONTINUE
       3092 |      ELSE
       3093 |          CALL GBYTES (MSGA,KSAVE,KPTR(8),KBITS,0,KNR)
       3094 |          II    = 1
       3095 |          KENTRY = KPTR(10)
       3096 |          DO 500 I = 1, KENTRY
       3097 |              IF (KBMS(I)) THEN
       3098 |                  DATA(I) = (REFNCE + FLOAT(KSAVE(II)) * SCALE) * SCAL10
       3099 |                  II  = II + 1
       3100 |              ELSE
       3101 |                  DATA(I) = 0.0
       3102 |              END IF
       3103 |  500     CONTINUE
       3104 |      END IF
       3105 |      GO TO 900
       3106 |C  ------------- PROCESS SPHERICAL HARMONIC COEFFICIENTS,
       3107 |C               SIMPLE PACKING, FLOATING POINT, NO ADDN'L FLAGS
       3108 | 5000 CONTINUE
       3109 |C     PRINT *,'CHECK POINT SPECTRAL COEFF'
       3110 |      KPTR(8)  = IBYT12
       3111 |      CALL GBYTE (MSGA,KKK,KPTR(8),32)
       3112 |      KPTR(8)  = KPTR(8) + 32
       3113 |C
       3114 |C     THE NEXT CODE WILL CONVERT THE IBM370 FOATING POINT
       3115 |C     TO THE FLOATING POINT USED ON YOUR MACHINE.
       3116 |C
       3117 |C     1ST TEST TO SEE IN ON 32 OR 64 BIT WORD MACHINE
       3118 |C     LW = 4 OR 8;  IF 8 MAY BE A CRAY
       3119 |C
       3120 |      CALL W3FI01(LW)
       3121 |      IF (LW.EQ.4) THEN
       3122 |        CALL GBYTE (KK,JSGN,0,1)
       3123 |        CALL GBYTE (KK,JEXP,1,7)
       3124 |        CALL GBYTE (KK,IFR,8,24)
       3125 |      ELSE
       3126 |        CALL GBYTE (KK,JSGN,32,1)
       3127 |        CALL GBYTE (KK,JEXP,33,7)
       3128 |        CALL GBYTE (KK,IFR,40,24)
       3129 |      ENDIF
       3130 |C
       3131 |      IF (IFR.EQ.0) THEN
       3132 |          REALKK  = 0.0
       3133 |      ELSE IF (JEXP.EQ.0.AND.IFR.EQ.0) THEN
       3134 |          REALKK  = 0.0
       3135 |      ELSE
       3136 |          REALKK  = FLOAT(IFR) * 16.0 ** (JEXP - 64 - 6)
       3137 |          IF (JSGN.NE.0) REALKK  = -REALKK
       3138 |      END IF
       3139 |      DATA(1)  = REALKK
       3140 |      CALL GBYTES (MSGA,KSAVE,KPTR(8),KBITS,0,KNR)
       3141 |C  --------------
       3142 |      DO 6000 I = 1, KENTRY
       3143 |          DATA(I+1)  = REFNCE + FLOAT(KSAVE(I)) * SCALE
       3144 | 6000 CONTINUE
       3145 |  900 CONTINUE
       3146 |      IF(ALLOCATED(KSAVE)) DEALLOCATE(KSAVE)
       3147 |C     PRINT *,'EXIT FI635'
       3148 |      RETURN
       3149 |      END
 
>>>>> ATTRIBUTE AND CROSS REFERENCE SECTION <<<<<
 
 
 
IDENTIFIER NAME                  CROSS REFERENCE AND ATTRIBUTES
 
allocated                        Pure Intrinsic
                                 0-3033.10  0-3146.10
 
ckref                            Automatic, Character(1) (1:8), Offset: 0, Alignment: quadruple word
                                 0-2619.21$  0-2638.22  0-2683.21  0-2684.21  0-2685.21  0-2687.21  0-2688.21  0-2689.21
 
data                             Reference argument, Real(4) (1:*), Offset: 0, Alignment: full word
                                 0-2633.21$  0-2529.49  0-2787.14@  0-2789.19@  0-2887.38  0-2899.38  0-3059.18@  0-3062.18@
                                 0-3066.14@  0-3066.27  0-3075.18@  0-3078.18@  0-3090.14@  0-3090.25  0-3098.18@  0-3101.18@
                                 0-3139.6@  0-3143.10@
 
fi635                            Subroutine
                                 0-2529.18$
 
fi636                            External Subroutine
                                 0-2887.31  0-2899.31
 
float                            Pure Intrinsic
                                 0-2698.21  0-3059.39  0-3075.39  0-3098.39  0-3136.21  0-3143.33
 
gbyte                            External Subroutine
                                 0-2651.12  0-2654.12  0-2661.12  0-2664.12  0-2672.12  0-2683.14  0-2684.14  0-2685.14  0-2687.14
                                 0-2688.14  0-2689.14  0-2704.12  0-2718.16  0-2722.16  0-2748.16  0-2752.16  0-2756.16  0-2760.16
                                 0-2764.16  0-2768.16  0-2772.16  0-2776.16  0-3111.12  0-3122.14  0-3123.14  0-3124.14  0-3126.14
                                 0-3127.14  0-3128.14
 
gbytes                           External Subroutine
                                 0-3053.16  0-3070.16  0-3093.16  0-3140.12
 
i                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2786.18@  0-2787.20  0-2788.24  0-2789.25  0-3057.19@  0-3058.24  0-3059.24  0-3062.24
                                 0-3065.19@  0-3066.20  0-3073.19@  0-3074.24  0-3075.24  0-3078.24  0-3089.19@  0-3090.20
                                 0-3096.18@  0-3097.24  0-3098.24  0-3101.24  0-3142.15@  0-3143.16  0-3143.45
 
iand                             Pure Intrinsic
                                 0-2714.11  0-2725.15  0-2732.15  0-2739.15  0-2816.11  0-2818.14  0-2820.18  0-2823.23  0-2869.19
                                 0-2871.18  0-2873.23  0-2927.16  0-2929.14  0-2931.18  0-2934.23  0-2980.19  0-2983.18  0-2985.23
 
ibyt12                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2708.7@  0-3110.18
 
ifr                              Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2685.27  0-2689.27  0-2693.11  0-2695.30  0-2698.27  0-3124.24  0-3128.24  0-3131.11  0-3133.30
                                 0-3136.27
 
ii                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3055.11@  0-3059.51  0-3060.19@  0-3060.31  0-3071.11@  0-3075.51  0-3076.19@  0-3076.25
                                 0-3094.11@  0-3098.51  0-3099.19@  0-3099.25
 
jexp                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2684.27  0-2688.27  0-2695.16  0-2698.43  0-3123.24  0-3127.24  0-3133.16  0-3136.43
 
jsgn                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2683.27  0-2687.27  0-2699.15  0-3122.24  0-3126.24  0-3137.15
 
kadd                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3047.15@  0-3049.15@  0-3051.15@  0-3065.26  0-3082.15@  0-3084.15@  0-3086.15@  0-3088.30
 
kbds                             Automatic, Integer(4) (1:20), Offset: 0, Alignment: full word
                                 0-2625.21$  0-2706.7@  0-2727.15@  0-2730.15@  0-2734.15@  0-2737.15@  0-2741.15@  0-2744.15@
                                 0-2825.22  0-2827.26  0-2829.30  0-2832.35  0-2836.31  0-2838.30  0-2841.35  0-2846.27  0-2848.26
                                 0-2850.30  0-2853.35  0-2857.31  0-2859.30  0-2862.35  0-2875.22  0-2877.26  0-2879.30  0-2882.35
                                 0-2890.31  0-2892.30  0-2895.35  0-2903.27  0-2905.26  0-2907.30  0-2910.35  0-2914.31  0-2916.30
                                 0-2919.35  0-2936.22  0-2938.26  0-2940.30  0-2943.35  0-2947.31  0-2949.30  0-2952.35  0-2957.27
                                 0-2959.26  0-2961.30  0-2964.35  0-2968.31  0-2970.30  0-2973.35  0-2987.22  0-2989.26  0-2991.30
                                 0-2994.35  0-2998.31  0-3000.30  0-3003.35  0-3008.27  0-3010.26  0-3012.30  0-3015.35  0-3019.31
                                 0-3021.30  0-3024.35
 
kbits                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2704.24  0-2706.18  0-2780.11  0-2795.36  0-2806.25  0-3053.43  0-3054.33  0-3070.43  0-3093.43
                                 0-3140.39
 
kbms                             Reference argument, Logical(1) (1:*), Offset: 0, Alignment: byte
                                 0-2621.21$  0-2529.44  0-2788.19  0-2887.48  0-2899.48  0-3058.19  0-3074.19  0-3097.19
 
kend                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2656.7@  0-2795.18
 
kentry                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2785.11@  0-2786.25  0-2806.7@  0-2808.22  0-3056.11@  0-3057.26  0-3072.11@  0-3073.26
                                 0-3088.21  0-3089.32  0-3095.11@  0-3096.25  0-3142.22
 
kgds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-2624.21$  0-2529.39  0-2888.65  0-2900.65
 
kk                               Automatic, Character(1) (1:8), Offset: 0, Alignment: quadruple word
                                 0-2618.21$  0-2639.22  0-3122.21  0-3123.21  0-3124.21  0-3126.21  0-3127.21  0-3128.21
 
kkk                              Automatic, Integer(4), Offset: 0, Alignment: quadruple word
                                 0-2629.21$  0-2639.28  0-3111.24
 
knr                              Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2795.7@  0-3053.51  0-3054.41  0-3070.51  0-3093.51  0-3140.47
 
koctet                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2718.28
 
kpds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-2623.21$  0-2529.34  0-2782.29  0-2888.60  0-2900.60  0-3042.25  0-3044.11  0-3044.28  0-3044.45
                                 0-3045.22  0-3045.39  0-3046.15  0-3048.20  0-3048.37  0-3068.16  0-3068.33  0-3068.50  0-3069.22
                                 0-3069.39  0-3081.15  0-3083.20  0-3083.37
 
kphys1                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2772.28
 
kphys2                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2776.28
 
kptr                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-2626.21$  0-2529.29  0-2647.7@  0-2647.17  0-2647.28  0-2647.42  0-2647.56  0-2648.26  0-2651.23
                                 0-2651.32  0-2652.7@  0-2652.18  0-2654.23  0-2654.32  0-2655.7@  0-2655.18  0-2656.17  0-2656.28
                                 0-2656.42  0-2656.56  0-2657.26  0-2657.39  0-2657.53  0-2661.30  0-2662.7@  0-2662.18  0-2664.31
                                 0-2665.7@  0-2665.18  0-2672.29  0-2673.7@  0-2673.18  0-2704.30  0-2705.7@  0-2705.18  0-2708.18
                                 0-2714.16  0-2718.35  0-2719.11@  0-2719.22  0-2722.35  0-2724.11@  0-2724.22  0-2748.31
                                 0-2749.11@  0-2749.22  0-2752.31  0-2753.11@  0-2753.22  0-2756.32  0-2757.11@  0-2757.22
                                 0-2760.32  0-2761.11@  0-2761.22  0-2764.32  0-2765.11@  0-2765.22  0-2768.32  0-2769.11@
                                 0-2769.22  0-2772.35  0-2773.11@  0-2773.22  0-2776.35  0-2777.11@  0-2777.22  0-2785.20  0-2795.25
                                 0-2802.17  0-2804.31  0-2816.16  0-2818.19  0-2820.23  0-2823.28  0-2869.24  0-2871.23  0-2873.28
                                 0-2888.55  0-2900.55  0-2927.21  0-2929.19  0-2931.23  0-2934.28  0-2980.24  0-2983.23  0-2985.28
                                 0-3053.35  0-3054.11@  0-3054.23  0-3056.23  0-3070.35  0-3072.20  0-3093.35  0-3095.20  0-3110.7@
                                 0-3111.28  0-3112.7@  0-3112.18  0-3140.31
 
kref                             Automatic, Integer(4), Offset: 0, Alignment: quadruple word
                                 0-2628.21$  0-2638.31  0-2672.24
 
kret                             Reference argument, Integer(4), Offset: 0, Alignment: full word
                                 0-2529.54  0-3035.7@
 
ksave                            Allocatable, Controlled, Integer(4) (:), Offset: 0, Alignment: full word
                                 0-2630.30$  0-2808.16  0-3033.20  0-3033.39  0-3053.29  0-3059.45  0-3070.29  0-3075.45  0-3093.29
                                 0-3098.45  0-3140.25  0-3143.39  0-3146.20  0-3146.39
 
kscale                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2631.21$  0-2664.24  0-2667.11@  0-2667.23  0-2669.20
 
ksign                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2661.24  0-2666.11
 
kxflag                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2722.28  0-2725.20  0-2732.21  0-2739.21
 
lastp                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3088.11@  0-3089.23  0-3090.30
 
lw                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2681.19  0-2682.11  0-3120.19  0-3121.11
 
msga                             Reference argument, Character(1) (1:*), Offset: 0, Alignment: byte
                                 0-2617.21$  0-2529.24  0-2651.18  0-2654.18  0-2661.19  0-2664.19  0-2672.19  0-2704.19  0-2718.23
                                 0-2722.23  0-2748.23  0-2752.23  0-2756.23  0-2760.23  0-2764.23  0-2768.23  0-2772.23  0-2776.23
                                 0-2887.43  0-2899.43  0-3053.24  0-3070.24  0-3093.24  0-3111.19  0-3140.20
 
nc                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2752.28
 
nc1                              Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2760.28
 
nc2                              Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2768.28
 
ncv                              Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2764.28
 
nr                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2748.28
 
nrbits                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2627.21$  0-2804.7@  0-2806.16
 
nrbyte                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2802.7@  0-2804.17
 
nrv                              Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-2756.28
 
realkk                           Automatic, Real(4), Offset: 0, Alignment: quadruple word
                                 0-2636.21$  0-2639.32  0-3132.10@  0-3134.10@  0-3136.10@  0-3137.24@  0-3137.37  0-3139.18
 
refn10                           Automatic, Real(4), Offset: 0, Alignment: full word
                                 0-2784.11@  0-2789.30
 
refnce                           Automatic, Real(4), Offset: 0, Alignment: quadruple word
                                 0-2634.21$  0-2638.36  0-2694.11@  0-2696.11@  0-2698.11@  0-2699.26@  0-2699.37  0-2784.21
                                 0-2888.48  0-2900.48  0-3059.32  0-3075.30  0-3098.30  0-3143.24
 
scal10                           Automatic, Real(4), Offset: 0, Alignment: full word
                                 0-2782.11@  0-2783.11@  0-2783.27  0-2784.30  0-3042.7@  0-3043.7@  0-3043.23  0-3059.63  0-3075.67
                                 0-3098.67
 
scale                            Automatic, Real(4), Offset: 0, Alignment: full word
                                 0-2635.21$  0-2669.7@  0-3059.56  0-3075.58  0-3098.58  0-3143.51
 
w3fi01                           External Subroutine
                                 0-2681.12  0-3120.12
 
** fi635   === End of Compilation 7 ===
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              DBG             DDIM            ESCAPE
         FULLPATH        I4              INLGLUE         NOLIBESSL
         NOLIBPOSIX      OBJECT          SOURCE          STRICT
         SWAPOMP         THREADED        UNWIND          NOZEROSIZE
  
         ==  Options Of Integer Type ==
         ALIAS_SIZE(65536)     FIXED(72)             MAXMEM(-1)
         OPTIMIZE(2)           SPILLSIZE(548)        STACKTEMP(0)
  
  
         ==  Options Of Character Type  ==
         64(LARGETYPE)         ALIAS(STD,INTPTR)     ALIGN(BINDC(POWER),STRUCT(NATURAL))
         ARCH(PWR6)            ATTR()                AUTODBL(NONE)
         DESCRIPTOR(V1)        DIRECTIVE(IBM*,IBMT)  ENUM()
         FLAG(I,I)             FLOAT(RNDSNGL,MAF,FOLD,RNGCHK,SINGLE)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LANGLVL(EXTENDED)     POSITION(APPENDOLD)   REALSIZE(4)
         NOSAVE()              TUNE(PWR6)            UNROLL(AUTO)
         XREF(FULL)            XLF2003(NOPOLYMORPHIC,NOBOZLITARGS,NOSTOPEXCEPT,NOVOLATILE,NOAUTOREALLOC,OLDNANINF)
         XLF77(NOLEADZERO,GEDIT77,NOBLANKPAD,OLDBOZ,INTARG,INTXOR,PERSISTENT,SOFTEOF)
         XLF90(NOSIGNEDZERO,NOAUTODEALLOC,OLDPAD)
  
>>>>> SOURCE SECTION <<<<<
       3150 |      SUBROUTINE FI636 (DATA,MSGA,KBMS,REFNCE,KPTR,KPDS,KGDS)
       3151 |C$$$  SUBPROGRAM DOCUMENTATION BLOCK
       3152 |C                .      .    .                                       .
       3153 |C SUBPROGRAM:    FI636       PROCESS SECOND ORDER PACKING
       3154 |C   PRGMMR: CAVANAUGH        ORG: W/NMC42    DATE: 92-09-22
       3155 |C
       3156 |C ABSTRACT: PROCESS SECOND ORDER PACKING FROM THE BINARY DATA SECTION
       3157 |C   (BDS) FOR SINGLE DATA ITEMS GRID POINT DATA
       3158 |C
       3159 |C PROGRAM HISTORY LOG:
       3160 |C   93-06-08  CAVANAUGH
       3161 |C   93-12-15  CAVANAUGH   MODIFIED SECOND ORDER POINTERS TO FIRST ORDER
       3162 |C                         VALUES AND SECOND ORDER VALUES CORRECTLY.
       3163 |C   95-04-26  R.E.JONES   FI636 CORECTION FOR 2ND ORDER COMPLEX
       3164 |C                         UNPACKING.
       3165 |C   95-10-31  IREDELL     REMOVED SAVES AND PRINTS
       3166 |C
       3167 |C USAGE:    CALL FI636 (DATA,MSGA,KBMS,REFNCE,KPTR,KPDS,KGDS)
       3168 |C   INPUT ARGUMENT LIST:
       3169 |C
       3170 |C     MSGA     - ARRAY CONTAINING GRIB MESSAGE
       3171 |C     REFNCE   - REFERENCE VALUE
       3172 |C     KPTR     - WORK ARRAY
       3173 |C
       3174 |C   OUTPUT ARGUMENT LIST:      (INCLUDING WORK ARRAYS)
       3175 |C     DATA     - LOCATION OF OUTPUT ARRAY
       3176 |C              WORKING ARRAY
       3177 |C     KBDS(1)  - N1
       3178 |C     KBDS(2)  - N2
       3179 |C     KBDS(3)  - P1
       3180 |C     KBDS(4)  - P2
       3181 |C     KBDS(5)  - BIT POINTER TO 2ND ORDER WIDTHS
       3182 |C     KBDS(6)  -  "    "     "   "   "    BIT MAPS
       3183 |C     KBDS(7)  -  "    "     "  FIRST ORDER VALUES
       3184 |C     KBDS(8)  -  "    "     "  SECOND ORDER VALUES
       3185 |C     KBDS(9)  -  "    "     START OF BDS
       3186 |C     KBDS(10) -  "    "     MAIN BIT MAP
       3187 |C     KBDS(11) - BINARY SCALING
       3188 |C     KBDS(12) - DECIMAL SCALING
       3189 |C     KBDS(13) - BIT WIDTH OF FIRST ORDER VALUES
       3190 |C     KBDS(14) - BIT MAP FLAG
       3191 |C                 0 = NO SECOND ORDER BIT MAP
       3192 |C                 1 = SECOND ORDER BIT MAP PRESENT
       3193 |C     KBDS(15) - SECOND ORDER BIT WIDTH
       3194 |C     KBDS(16) - CONSTANT / DIFFERENT WIDTHS
       3195 |C                 0 = CONSTANT WIDTHS
       3196 |C                 1 = DIFFERENT WIDTHS
       3197 |C     KBDS(17) - SINGLE DATUM / MATRIX
       3198 |C                 0 = SINGLE DATUM AT EACH GRID POINT
       3199 |C                 1 = MATRIX OF VALUES AT EACH GRID POINT
       3200 |C       (18-20)- UNUSED
       3201 |C
       3202 |C REMARKS: SUBPROGRAM CAN BE CALLED FROM A MULTIPROCESSING ENVIRONMENT.
       3203 |C
       3204 |C ATTRIBUTES:
       3205 |C   LANGUAGE: FORTRAN 77
       3206 |C   MACHINE:  HDS, CRAY
       3207 |C
       3208 |C$$$
       3209 |      REAL         DATA(*)
       3210 |      REAL         REFN
       3211 |      REAL         REFNCE
       3212 |C
       3213 |      INTEGER      KBDS(20)
       3214 |      INTEGER      KPTR(*)
       3215 |      INTEGER      JREF,BMAP2(12500)
       3216 |      INTEGER      I,IBDS
       3217 |      INTEGER      KBIT,IFOVAL,ISOVAL
       3218 |      INTEGER      KPDS(*),KGDS(*)
       3219 |C
       3220 |      LOGICAL*1    KBMS(*)
       3221 |C
       3222 |      CHARACTER*1  MSGA(*)
       3223 |C
       3224 |      EQUIVALENCE  (JREF,REFN)
       3225 |C  *******************     SETUP     ******************************
       3226 |C     PRINT *,'ENTER FI636'
       3227 |C                                START OF BMS (BIT POINTER)
       3228 |      DO I = 1,20
       3229 |        KBDS(I)  = 0
       3230 |      END DO
       3231 |C                BYTE START OF BDS
       3232 |      IBDS  = KPTR(2) + KPTR(3) + KPTR(4) + KPTR(5)
       3233 |C     PRINT *,'KPTR(2-5) ',KPTR(2),KPTR(3),KPTR(4),KPTR(5)
       3234 |C                BIT START OF BDS
       3235 |      JPTR  = IBDS * 8
       3236 |C     PRINT *,'JPTR ',JPTR
       3237 |      KBDS(9) = JPTR
       3238 |C     PRINT *,'START OF BDS         ',KBDS(9)
       3239 |C                    BINARY SCALE VALUE  BDS BYTES 5-6
       3240 |      CALL GBYTE (MSGA,ISIGN,JPTR+32,1)
       3241 |      CALL GBYTE (MSGA,KBDS(11),JPTR+33,15)
       3242 |      IF (ISIGN.GT.0) THEN
       3243 |          KBDS(11)  = - KBDS(11)
       3244 |      END IF
       3245 |C     PRINT *,'BINARY SCALE VALUE =',KBDS(11)
       3246 |C                  EXTRACT REFERENCE VALUE
       3247 |      CALL GBYTE(MSGA,JREF,JPTR+48,32)
       3248 |C     PRINT *,'DECODED REFERENCE VALUE =',REFN,REFNCE
       3249 |C                F O BIT WIDTH
       3250 |      CALL GBYTE(MSGA,KBDS(13),JPTR+80,8)
       3251 |      JPTR  = JPTR + 88
       3252 |C              AT START OF BDS BYTE 12
       3253 |C                EXTRACT N1
       3254 |      CALL GBYTE (MSGA,KBDS(1),JPTR,16)
       3255 |C     PRINT *,'N1  = ',KBDS(1)
       3256 |      JPTR  = JPTR + 16
       3257 |C                 EXTENDED FLAGS
       3258 |      CALL GBYTE (MSGA,KFLAG,JPTR,8)
       3259 |C                 ISOLATE BIT MAP FLAG
       3260 |      IF (IAND(KFLAG,32).NE.0) THEN
       3261 |        KBDS(14)  = 1
       3262 |      ELSE
       3263 |        KBDS(14)  = 0
       3264 |      END IF
       3265 |      IF (IAND(KFLAG,16).NE.0) THEN
       3266 |        KBDS(16)  = 1
       3267 |      ELSE
       3268 |        KBDS(16)  = 0
       3269 |      END IF
       3270 |      IF (IAND(KFLAG,64).NE.0) THEN
       3271 |        KBDS(17)  = 1
       3272 |      ELSE
       3273 |        KBDS(17)  = 0
       3274 |      END IF
       3275 |      JPTR  = JPTR + 8
       3276 |C                EXTRACT N2
       3277 |      CALL GBYTE (MSGA,KBDS(2),JPTR,16)
       3278 |C     PRINT *,'N2  = ',KBDS(2)
       3279 |      JPTR  = JPTR + 16
       3280 |C                EXTRACT P1
       3281 |      CALL GBYTE (MSGA,KBDS(3),JPTR,16)
       3282 |C     PRINT *,'P1  = ',KBDS(3)
       3283 |      JPTR  = JPTR + 16
       3284 |C                EXTRACT P2
       3285 |      CALL GBYTE (MSGA,KBDS(4),JPTR,16)
       3286 |C     PRINT *,'P2  = ',KBDS(4)
       3287 |      JPTR  = JPTR + 16
       3288 |C                 SKIP RESERVED BYTE
       3289 |      JPTR    = JPTR + 8
       3290 |C                START OF SECOND ORDER BIT WIDTHS
       3291 |      KBDS(5) = JPTR
       3292 |C                COMPUTE START OF SECONDARY BIT MAP
       3293 |      IF (KBDS(14).NE.0) THEN
       3294 |C                           FOR INCLUDED SECONDARY BIT MAP
       3295 |          JPTR    = JPTR + (KBDS(3) * 8)
       3296 |          KBDS(6) = JPTR
       3297 |      ELSE
       3298 |C                           FOR CONSTRUCTED SECONDARY BIT MAP
       3299 |          KBDS(6)  = 0
       3300 |      END IF
       3301 |C                CREATE POINTER TO START OF FIRST ORDER VALUES
       3302 |      KBDS(7) =  KBDS(9) + KBDS(1) * 8 - 8
       3303 |C     PRINT *,'BIT POINTER TO START OF FOVALS',KBDS(7)
       3304 |C                CREATE POINTER TO START OF SECOND ORDER VALUES
       3305 |      KBDS(8) =  KBDS(9) + KBDS(2) * 8 - 8
       3306 |C     PRINT *,'BIT POINTER TO START OF SOVALS',KBDS(8)
       3307 |C     PRINT *,'KBDS( 1) - N1                         ',KBDS( 1)
       3308 |C     PRINT *,'KBDS( 2) - N2                         ',KBDS( 2)
       3309 |C     PRINT *,'KBDS( 3) - P1                         ',KBDS( 3)
       3310 |C     PRINT *,'KBDS( 4) - P2                         ',KBDS( 4)
       3311 |C     PRINT *,'KBDS( 5) - BIT PTR - 2ND ORDER WIDTHS ',KBDS( 5)
       3312 |C     PRINT *,'KBDS( 6) -  "   "     "   " BIT MAPS  ',KBDS( 6)
       3313 |C     PRINT *,'KBDS( 7) -  "   "     F O VALS        ',KBDS( 7)
       3314 |C     PRINT *,'KBDS( 8) -  "   "     S O VALS        ',KBDS( 8)
       3315 |C     PRINT *,'KBDS( 9) -  "   "    START OF BDS     ',KBDS( 9)
       3316 |C     PRINT *,'KBDS(10) -  "   "    MAIN BIT MAP     ',KBDS(10)
       3317 |C     PRINT *,'KBDS(11) - BINARY SCALING             ',KBDS(11)
       3318 |C     PRINT *,'KPDS(22) - DECIMAL SCALING            ',KPDS(22)
       3319 |C     PRINT *,'KBDS(13) - FO BIT WIDTH               ',KBDS(13)
       3320 |C     PRINT *,'KBDS(14) - 2ND ORDER BIT MAP FLAG     ',KBDS(14)
       3321 |C     PRINT *,'KBDS(15) - 2ND ORDER BIT WIDTH        ',KBDS(15)
       3322 |C     PRINT *,'KBDS(16) - CONSTANT/DIFFERENT WIDTHS  ',KBDS(16)
       3323 |C     PRINT *,'KBDS(17) - SINGLE DATUM/MATRIX        ',KBDS(17)
       3324 |C     PRINT *,'REFNCE VAL                            ',REFNCE
       3325 |C  ************************* PROCESS DATA  **********************
       3326 |      IJ  = 0
       3327 |C  ========================================================
       3328 |      IF (KBDS(14).EQ.0) THEN
       3329 |C                           NO BIT MAP, MUST CONSTRUCT ONE
       3330 |          IF (KGDS(2).EQ.65535) THEN
       3331 |              IF (KGDS(20).EQ.255) THEN
       3332 |C                 PRINT *,'CANNOT BE USED HERE'
       3333 |              ELSE
       3334 |C                               POINT TO PL
       3335 |          LP  = KPTR(9) + KPTR(2)*8 + KPTR(3)*8 + KGDS(20)*8 - 8
       3336 |C                 PRINT *,'LP = ',LP
       3337 |                  JT  = 0
       3338 |                  DO 2000 JZ = 1, KGDS(3)
       3339 |C                               GET NUMBER IN CURRENT ROW
       3340 |                      CALL GBYTE (MSGA,NUMBER,LP,16)
       3341 |C                               INCREMENT TO NEXT ROW NUMBER
       3342 |                      LP  = LP + 16
       3343 |C                     PRINT *,'NUMBER IN ROW',JZ,' = ',NUMBER
       3344 |                      DO 1500 JQ = 1, NUMBER
       3345 |                          IF (JQ.EQ.1) THEN
       3346 |                              CALL SBYTE (BMAP2,1,JT,1)
       3347 |                          ELSE
       3348 |                              CALL SBYTE (BMAP2,0,JT,1)
       3349 |                          END IF
       3350 |                          JT  = JT + 1
       3351 | 1500                 CONTINUE
       3352 | 2000             CONTINUE
       3353 |              END IF
       3354 |          ELSE
       3355 |              IF (IAND(KGDS(11),32).EQ.0) THEN
       3356 |C                           ROW BY ROW
       3357 |C                 PRINT *,'     ROW BY ROW'
       3358 |                  KOUT  = KGDS(3)
       3359 |                  KIN   = KGDS(2)
       3360 |              ELSE
       3361 |C                           COL BY COL
       3362 |C                 PRINT *,'     COL BY COL'
       3363 |                  KIN   = KGDS(3)
       3364 |                  KOUT  = KGDS(2)
       3365 |              END IF
       3366 |C             PRINT *,'KIN=',KIN,' KOUT= ',KOUT
       3367 |              DO 200 I = 1, KOUT
       3368 |                  DO 150 J = 1, KIN
       3369 |                      IF (J.EQ.1) THEN
       3370 |                          CALL SBYTE (BMAP2,1,IJ,1)
       3371 |                      ELSE
       3372 |                          CALL SBYTE (BMAP2,0,IJ,1)
       3373 |                      END IF
       3374 |                      IJ  = IJ + 1
       3375 |  150             CONTINUE
       3376 |  200         CONTINUE
       3377 |          END IF
       3378 |      END IF
       3379 |C  ========================================================
       3380 |C     PRINT 99,(BMAP2(J),J=1,110)
       3381 |C99   FORMAT ( 10(1X,Z8.8))
       3382 |C     CALL BINARY (BMAP2,2)
       3383 |C                FOR EACH GRID POINT ENTRY
       3384 |C
       3385 |         SCALE2  = 2.0**KBDS(11)
       3386 |         SCAL10  = 10.0**KPDS(22)
       3387 |C     PRINT *,'SCALE VALUES - ',SCALE2,SCAL10
       3388 |      DO 1000 I = 1, KPTR(10)
       3389 |C                    GET NEXT MASTER BIT MAP BIT POSITION
       3390 |C                    IF NEXT MASTER BIT MAP BIT POSITION IS 'ON' (1)
       3391 |          IF (KBMS(I)) THEN
       3392 |C             WRITE(6,900)I,KBMS(I)
       3393 |C 900         FORMAT (1X,I4,3X,14HMAIN BIT IS ON,3X,L4)
       3394 |              IF (KBDS(14).NE.0) THEN
       3395 |                  CALL GBYTE (MSGA,KBIT,KBDS(6),1)
       3396 |              ELSE
       3397 |                  CALL GBYTE (BMAP2,KBIT,KBDS(6),1)
       3398 |              END IF
       3399 |C             PRINT *,'KBDS(6) =',KBDS(6),' KBIT =',KBIT
       3400 |              KBDS(6)  = KBDS(6) + 1
       3401 |              IF (KBIT.NE.0) THEN
       3402 |C                 PRINT *,'          SOB ON'
       3403 |C                                  GET NEXT FIRST ORDER PACKED VALUE
       3404 |                  CALL GBYTE (MSGA,IFOVAL,KBDS(7),KBDS(13))
       3405 |                  KBDS(7)  = KBDS(7) + KBDS(13)
       3406 |C                 PRINT *,'FOVAL =',IFOVAL
       3407 |C                                   GET SECOND ORDER BIT WIDTH
       3408 |                  CALL GBYTE (MSGA,KBDS(15),KBDS(5),8)
       3409 |                  KBDS(5)  = KBDS(5) + 8
       3410 |C                PRINT *,KBDS(7)-KBDS(13),' FOVAL =',IFOVAL,' KBDS(5)=',
       3411 |C    *                           ,KBDS(5), 'ISOWID =',KBDS(15)
       3412 |              ELSE
       3413 |C                 PRINT *,'          SOB NOT ON'
       3414 |              END IF
       3415 |              ISOVAL  = 0
       3416 |              IF (KBDS(15).EQ.0) THEN
       3417 |C                        IF SECOND ORDER BIT WIDTH = 0
       3418 |C                             THEN SECOND ORDER VALUE IS 0
       3419 |C                            SO CALCULATE DATA VALUE FOR THIS POINT
       3420 |C                 DATA(I) = (REFNCE + (FLOAT(IFOVAL) * SCALE2)) / SCAL10
       3421 |              ELSE
       3422 |                  CALL GBYTE (MSGA,ISOVAL,KBDS(8),KBDS(15))
       3423 |                  KBDS(8)  = KBDS(8) + KBDS(15)
       3424 |              END IF
       3425 |              DATA(I) = (REFNCE + (FLOAT(IFOVAL + ISOVAL) *
       3426 |     *                         SCALE2)) / SCAL10
       3427 |C             PRINT *,I,DATA(I),REFNCE,IFOVAL,ISOVAL,SCALE2,SCAL10
       3428 |          ELSE
       3429 |C             WRITE(6,901) I,KBMS(I)
       3430 |C 901         FORMAT (1X,I4,3X,15HMAIN BIT NOT ON,3X,L4)
       3431 |              DATA(I)  = 0.0
       3432 |          END IF
       3433 |C         PRINT *,I,DATA(I),IFOVAL,ISOVAL,KBDS(5),KBDS(15)
       3434 | 1000 CONTINUE
       3435 |C  **************************************************************
       3436 |C     PRINT *,'EXIT FI636'
       3437 |      RETURN
       3438 |      END
 
>>>>> ATTRIBUTE AND CROSS REFERENCE SECTION <<<<<
 
 
 
IDENTIFIER NAME                  CROSS REFERENCE AND ATTRIBUTES
 
bmap2                            Automatic, Integer(4) (1:12500), Offset: 0, Alignment: full word
                                 0-3215.25$  0-3346.43  0-3348.43  0-3370.39  0-3372.39  0-3397.31
 
data                             Reference argument, Real(4) (1:*), Offset: 0, Alignment: full word
                                 0-3209.20$  0-3150.25  0-3425.14@  0-3431.14@
 
fi636                            Subroutine
                                 0-3150.18$
 
float                            Pure Intrinsic
                                 0-3425.36
 
gbyte                            External Subroutine
                                 0-3240.12  0-3241.12  0-3247.12  0-3250.12  0-3254.12  0-3258.12  0-3277.12  0-3281.12  0-3285.12
                                 0-3340.28  0-3395.24  0-3397.24  0-3404.24  0-3408.24  0-3422.24
 
i                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3216.20$  0-3228.10@  0-3229.14  0-3367.22@  0-3388.15@  0-3391.20  0-3425.20  0-3431.20
 
iand                             Pure Intrinsic
                                 0-3260.11  0-3265.11  0-3270.11  0-3355.19
 
ibds                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3216.22$  0-3232.7@  0-3235.15
 
ifoval                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3217.25$  0-3404.36  0-3425.42
 
ij                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3326.7@  0-3370.47  0-3372.47  0-3374.23@  0-3374.29
 
isign                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3240.24  0-3242.11
 
isoval                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3217.32$  0-3415.15@  0-3422.36  0-3425.51
 
j                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3368.26@  0-3369.27
 
jptr                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3235.7@  0-3237.17  0-3240.30  0-3241.33  0-3247.28  0-3250.32  0-3251.7@  0-3251.15  0-3254.32
                                 0-3256.7@  0-3256.15  0-3258.30  0-3275.7@  0-3275.15  0-3277.32  0-3279.7@  0-3279.15  0-3281.32
                                 0-3283.7@  0-3283.15  0-3285.32  0-3287.7@  0-3287.15  0-3289.7@  0-3289.17  0-3291.17  0-3295.11@
                                 0-3295.21  0-3296.21
 
jq                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3344.31@  0-3345.31
 
jref                             Automatic, Integer(4), Offset: 0, Alignment: quadruple word
                                 0-3215.20$  0-3224.21  0-3247.23
 
jt                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3337.19@  0-3346.51  0-3348.51  0-3350.27@  0-3350.33
 
jz                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3338.27@
 
kbds                             Automatic, Integer(4) (1:20), Offset: 0, Alignment: full word
                                 0-3213.20$  0-3229.9@  0-3237.7@  0-3241.24  0-3243.11@  0-3243.25  0-3250.23  0-3254.24  0-3261.9@
                                 0-3263.9@  0-3266.9@  0-3268.9@  0-3271.9@  0-3273.9@  0-3277.24  0-3281.24  0-3285.24  0-3291.7@
                                 0-3293.11  0-3295.29  0-3296.11@  0-3299.11@  0-3302.7@  0-3302.18  0-3302.28  0-3305.7@  0-3305.18
                                 0-3305.28  0-3328.11  0-3385.25  0-3394.19  0-3395.41  0-3397.42  0-3400.15@  0-3400.26  0-3404.43
                                 0-3404.51  0-3405.19@  0-3405.30  0-3405.40  0-3408.36  0-3408.45  0-3409.19@  0-3409.30  0-3416.19
                                 0-3422.43  0-3422.51  0-3423.19@  0-3423.30  0-3423.40
 
kbit                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3217.20$  0-3395.36  0-3397.37  0-3401.19
 
kbms                             Reference argument, Logical(1) (1:*), Offset: 0, Alignment: byte
                                 0-3220.20$  0-3150.35  0-3391.15
 
kflag                            Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3258.24  0-3260.16  0-3265.16  0-3270.16
 
kgds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-3218.28$  0-3150.57  0-3330.15  0-3331.19  0-3335.51  0-3338.35  0-3355.24  0-3358.27  0-3359.27
                                 0-3363.27  0-3364.27
 
kin                              Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3359.19@  0-3363.19@  0-3368.33
 
kout                             Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3358.19@  0-3364.19@  0-3367.29
 
kpds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-3218.20$  0-3150.52  0-3386.26
 
kptr                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-3214.20$  0-3150.47  0-3232.15  0-3232.25  0-3232.35  0-3232.45  0-3335.17  0-3335.27  0-3335.39
                                 0-3388.22
 
lp                               Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3335.11@  0-3340.47  0-3342.23@  0-3342.29
 
msga                             Reference argument, Character(1) (1:*), Offset: 0, Alignment: byte
                                 0-3222.20$  0-3150.30  0-3240.19  0-3241.19  0-3247.18  0-3250.18  0-3254.19  0-3258.19  0-3277.19
                                 0-3281.19  0-3285.19  0-3340.35  0-3395.31  0-3404.31  0-3408.31  0-3422.31
 
number                           Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3340.40  0-3344.39
 
refn                             Automatic, Real(4), Offset: 0, Alignment: quadruple word
                                 0-3210.20$  0-3224.26
 
refnce                           Reference argument, Real(4), Offset: 0, Alignment: full word
                                 0-3211.20$  0-3150.40  0-3425.26
 
sbyte                            External Subroutine
                                 0-3346.36  0-3348.36  0-3370.32  0-3372.32
 
scal10                           Automatic, Real(4), Offset: 0, Alignment: full word
                                 0-3386.10@  0-3426.43
 
scale2                           Automatic, Real(4), Offset: 0, Alignment: full word
                                 0-3385.10@  0-3426.32
 
** fi636   === End of Compilation 8 ===
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              DBG             DDIM            ESCAPE
         FULLPATH        I4              INLGLUE         NOLIBESSL
         NOLIBPOSIX      OBJECT          SOURCE          STRICT
         SWAPOMP         THREADED        UNWIND          NOZEROSIZE
  
         ==  Options Of Integer Type ==
         ALIAS_SIZE(65536)     FIXED(72)             MAXMEM(-1)
         OPTIMIZE(2)           SPILLSIZE(548)        STACKTEMP(0)
  
  
         ==  Options Of Character Type  ==
         64(LARGETYPE)         ALIAS(STD,INTPTR)     ALIGN(BINDC(POWER),STRUCT(NATURAL))
         ARCH(PWR6)            ATTR()                AUTODBL(NONE)
         DESCRIPTOR(V1)        DIRECTIVE(IBM*,IBMT)  ENUM()
         FLAG(I,I)             FLOAT(RNDSNGL,MAF,FOLD,RNGCHK,SINGLE)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LANGLVL(EXTENDED)     POSITION(APPENDOLD)   REALSIZE(4)
         NOSAVE()              TUNE(PWR6)            UNROLL(AUTO)
         XREF(FULL)            XLF2003(NOPOLYMORPHIC,NOBOZLITARGS,NOSTOPEXCEPT,NOVOLATILE,NOAUTOREALLOC,OLDNANINF)
         XLF77(NOLEADZERO,GEDIT77,NOBLANKPAD,OLDBOZ,INTARG,INTXOR,PERSISTENT,SOFTEOF)
         XLF90(NOSIGNEDZERO,NOAUTODEALLOC,OLDPAD)
  
>>>>> SOURCE SECTION <<<<<
       3439 |      SUBROUTINE FI637(J,KPDS,KGDS,KRET)
       3440 |C$$$  SUBPROGRAM DOCUMENTATION  BLOCK
       3441 |C                .      .    .                                       .
       3442 |C SUBPROGRAM:    FI637       GRIB GRID/SIZE TEST
       3443 |C   PRGMMR: CAVANAUGH        ORG: W/NMC42    DATE: 91-09-13
       3444 |C
       3445 |C ABSTRACT: TO TEST WHEN GDS IS AVAILABLE TO SEE IF SIZE MISMATCH
       3446 |C   ON EXISTING GRIDS (BY CENTER) IS INDICATED
       3447 |C
       3448 |C PROGRAM HISTORY LOG:
       3449 |C   91-09-13  CAVANAUGH
       3450 |C   95-10-31  IREDELL     REMOVED SAVES AND PRINTS
       3451 |C   97-02-12  W BOSTELMAN CORRECTS ECMWF US GRID 2 PROCESSING
       3452 |C   98-06-17  IREDELL     REMOVED ALTERNATE RETURN
       3453 |C   99-01-20  BALDWIN    MODIFY TO HANDLE GRID 237
       3454 |C
       3455 |C USAGE:    CALL FI637(J,KPDS,KGDS,KRET)
       3456 |C   INPUT ARGUMENT LIST:
       3457 |C     J        - SIZE FOR INDICATED GRID
       3458 |C     KPDS     -
       3459 |C     KGDS     -
       3460 |C
       3461 |C   OUTPUT ARGUMENT LIST:      (INCLUDING WORK ARRAYS)
       3462 |C     J        - SIZE FOR INDICATED GRID MODIFIED FOR ECMWF-US 2
       3463 |C     KRET     - ERROR RETURN
       3464 |C                (A MISMATCH WAS DETECTED IF KRET IS NOT ZERO)
       3465 |C
       3466 |C REMARKS:
       3467 |C     KRET     -
       3468 |C          = 9 - GDS INDICATES SIZE MISMATCH WITH STD GRID
       3469 |C
       3470 |C   SUBPROGRAM CAN BE CALLED FROM A MULTIPROCESSING ENVIRONMENT.
       3471 |C
       3472 |C ATTRIBUTES:
       3473 |C   LANGUAGE: FORTRAN 77
       3474 |C   MACHINE:  HDS
       3475 |C
       3476 |C$$$
       3477 |      INTEGER       KPDS(*)
       3478 |      INTEGER       KGDS(*)
       3479 |      INTEGER       J
       3480 |      INTEGER       I
       3481 |C  ---------------------------------------
       3482 |C  ---------------------------------------
       3483 |C           IF GDS NOT INDICATED, RETURN
       3484 |C  ----------------------------------------
       3485 |      KRET=0
       3486 |      IF (IAND(KPDS(4),128).EQ.0) RETURN
       3487 |C  ---------------------------------------
       3488 |C            GDS IS INDICATED, PROCEED WITH TESTING
       3489 |C  ---------------------------------------
       3490 |      IF (KGDS(2).EQ.65535) THEN
       3491 |          RETURN
       3492 |      END IF
       3493 |      KRET=1
       3494 |      I     = KGDS(2) * KGDS(3)
       3495 |C  ---------------------------------------
       3496 |C            INTERNATIONAL SET
       3497 |C  ---------------------------------------
       3498 |      IF (KPDS(3).GE.21.AND.KPDS(3).LE.26) THEN
       3499 |          IF (I.NE.J) THEN
       3500 |               RETURN
       3501 |          END IF
       3502 |      ELSE IF (KPDS(3).GE.37.AND.KPDS(3).LE.44) THEN
       3503 |          IF (I.NE.J) THEN
       3504 |              RETURN
       3505 |          END IF
       3506 |      ELSE IF (KPDS(3).EQ.50) THEN
       3507 |          IF (I.NE.J) THEN
       3508 |              RETURN
       3509 |          END IF
       3510 |      ELSE IF (KPDS(3).GE.61.AND.KPDS(3).LE.64) THEN
       3511 |          IF (I.NE.J) THEN
       3512 |              RETURN
       3513 |          END IF
       3514 |C  ---------------------------------------
       3515 |C            TEST ECMWF CONTENT
       3516 |C  ---------------------------------------
       3517 |      ELSE IF (KPDS(1).EQ.98) THEN
       3518 |          KRET  = 9
       3519 |          IF (KPDS(3).GE.1.AND.KPDS(3).LE.16) THEN
       3520 |              IF (I.NE.J) THEN
       3521 |                IF (KPDS(3) .NE. 2) THEN
       3522 |                  RETURN
       3523 |                ELSEIF (I .NE. 10512) THEN ! Test for US Grid 2
       3524 |                  RETURN
       3525 |                END IF
       3526 |                J  = I   ! Set to US Grid 2, 2.5 Global
       3527 |              END IF
       3528 |          ELSE
       3529 |              KRET  = 5
       3530 |              RETURN
       3531 |          END IF
       3532 |C  ---------------------------------------
       3533 |C           U.K. MET OFFICE, BRACKNELL
       3534 |C  ---------------------------------------
       3535 |      ELSE IF (KPDS(1).EQ.74) THEN
       3536 |          KRET  = 9
       3537 |          IF (KPDS(3).GE.25.AND.KPDS(3).LE.26) THEN
       3538 |              IF (I.NE.J) THEN
       3539 |                  RETURN
       3540 |              END IF
       3541 |          ELSE
       3542 |              KRET  = 5
       3543 |              RETURN
       3544 |          END IF
       3545 |C  ---------------------------------------
       3546 |C           CANADA
       3547 |C  ---------------------------------------
       3548 |      ELSE IF (KPDS(1).EQ.54) THEN
       3549 |C         PRINT *,' NO CURRENT LISTING OF CANADIAN GRIDS'
       3550 |          RETURN
       3551 |C  ---------------------------------------
       3552 |C           JAPAN METEOROLOGICAL AGENCY
       3553 |C  ---------------------------------------
       3554 |      ELSE IF (KPDS(1).EQ.34) THEN
       3555 |C         PRINT *,' NO CURRENT LISTING OF JMA GRIDS'
       3556 |          RETURN
       3557 |C  ---------------------------------------
       3558 |C           NAVY - FNOC
       3559 |C  ---------------------------------------
       3560 |      ELSE IF (KPDS(1).EQ.58) THEN
       3561 |          IF (KPDS(3).GE.37.AND.KPDS(3).LE.44) THEN
       3562 |              IF (I.NE.J) THEN
       3563 |                  RETURN
       3564 |              END IF
       3565 |          ELSE IF (KPDS(3).GE.220.AND.KPDS(3).LE.221) THEN
       3566 |              IF (I.NE.J) THEN
       3567 |                  RETURN
       3568 |              END IF
       3569 |          ELSE IF (KPDS(3).EQ.223) THEN
       3570 |              IF (I.NE.J) THEN
       3571 |                  RETURN
       3572 |              END IF
       3573 |          ELSE
       3574 |              KRET = 5
       3575 |              RETURN
       3576 |          END IF
       3577 |C  ---------------------------------------
       3578 |C                 U.S. GRIDS
       3579 |C  ---------------------------------------
       3580 |      ELSE IF (KPDS(1).EQ.7) THEN
       3581 |          KRET  = 9
       3582 |          IF (KPDS(3).GE.1.AND.KPDS(3).LE.4) THEN
       3583 |              IF (I.NE.J) THEN
       3584 |                  RETURN
       3585 |              END IF
       3586 |          ELSE IF (KPDS(3).EQ.5.OR.KPDS(3).EQ.6) THEN
       3587 |              IF (I.NE.J) THEN
       3588 |                  RETURN
       3589 |              END IF
       3590 |          ELSE IF (KPDS(3).EQ.8) THEN
       3591 |              IF (I.NE.J) THEN
       3592 |                  RETURN
       3593 |              END IF
       3594 |          ELSE IF (KPDS(3).GE.27.AND.KPDS(3).LE.30) THEN
       3595 |              IF (I.NE.J) THEN
       3596 |                  RETURN
       3597 |              END IF
       3598 |          ELSE IF (KPDS(3).GE.33.AND.KPDS(3).LE.34) THEN
       3599 |              IF (I.NE.J) THEN
       3600 |                  RETURN
       3601 |              END IF
       3602 |          ELSE IF (KPDS(3).GE.37.AND.KPDS(3).LE.44) THEN
       3603 |              IF (I.NE.J) THEN
       3604 |                  RETURN
       3605 |              END IF
       3606 |          ELSE IF (KPDS(3).EQ.53) THEN
       3607 |              IF (I.NE.J) THEN
       3608 |                  RETURN
       3609 |              END IF
       3610 |          ELSE IF (KPDS(3).GE.55.AND.KPDS(3).LE.56) THEN
       3611 |              IF (I.NE.J) THEN
       3612 |                  RETURN
       3613 |              END IF
       3614 |          ELSE IF (KPDS(3).GE.67.AND.KPDS(3).LE.77) THEN
       3615 |              IF (I.NE.J) THEN
       3616 |                  RETURN
       3617 |              END IF
       3618 |          ELSE IF (KPDS(3).GE.85.AND.KPDS(3).LE.86) THEN
       3619 |              IF (I.NE.J) THEN
       3620 |                  RETURN
       3621 |              END IF
       3622 |          ELSE IF (KPDS(3).EQ.87) THEN
       3623 |              IF (I.NE.J) THEN
       3624 |                  RETURN
       3625 |              END IF
       3626 |          ELSE IF (KPDS(3).GE.90.AND.KPDS(3).LE.98) THEN
       3627 |              IF (I.NE.J) THEN
       3628 |                  RETURN
       3629 |              END IF
       3630 |          ELSE IF (KPDS(3).EQ.100.OR.KPDS(3).EQ.101) THEN
       3631 |              IF (I.NE.J) THEN
       3632 |                  RETURN
       3633 |              END IF
       3634 |          ELSE IF (KPDS(3).GE.103.AND.KPDS(3).LE.107) THEN
       3635 |              IF (I.NE.J) THEN
       3636 |                  RETURN
       3637 |              END IF
       3638 |          ELSE IF (KPDS(3).EQ.126) THEN
       3639 |              IF (I.NE.J) THEN
       3640 |                  RETURN
       3641 |              END IF
       3642 |          ELSE IF (KPDS(3).EQ.138) THEN
       3643 |              IF (I.NE.J) THEN
       3644 |                  RETURN
       3645 |              END IF
       3646 |          ELSE IF (KPDS(3).GE.150.AND.KPDS(3).LE.176) THEN
       3647 |              IF (I.NE.J) THEN
       3648 |                  RETURN
       3649 |              END IF
       3650 |          ELSE IF (KPDS(3).GE.180.OR.KPDS(3).LE.189) THEN
       3651 |              IF (I.NE.J) THEN
       3652 |                  RETURN 1
            ..................a........
 a - 1511-069 (I) An expression has been specified on a RETURN statement within a subroutine without alternate return specifiers.
       3653 |              END IF
       3654 |          ELSE IF (KPDS(3).EQ.190.OR.KPDS(3).EQ.192) THEN
       3655 |              IF (I.NE.J) THEN
       3656 |                  RETURN 1
       3657 |              END IF
       3658 |          ELSE IF (KPDS(3).EQ.194.OR.KPDS(3).EQ.196) THEN
       3659 |              IF (I.NE.J) THEN
       3660 |                  RETURN
       3661 |              END IF
       3662 |          ELSE IF (KPDS(3).EQ.198) THEN
       3663 |              IF (I.NE.J) THEN
       3664 |                  RETURN
       3665 |              END IF
       3666 |          ELSE IF (KPDS(3).GE.201.AND.KPDS(3).LE.254) THEN
       3667 |              IF (I.NE.J) THEN
       3668 |                  RETURN
       3669 |              END IF
       3670 |          ELSE
       3671 |              KRET  = 5
       3672 |              RETURN
       3673 |          END IF
       3674 |      ELSE
       3675 |          KRET  = 10
       3676 |          RETURN
       3677 |      END IF
       3678 |C  ------------------------------------
       3679 |C                    NORMAL EXIT
       3680 |C  ------------------------------------
       3681 |      KRET  = 0
       3682 |      RETURN
       3683 |      END
 
>>>>> ATTRIBUTE AND CROSS REFERENCE SECTION <<<<<
 
 
 
IDENTIFIER NAME                  CROSS REFERENCE AND ATTRIBUTES
 
fi637                            Subroutine
                                 0-3439.18$
 
i                                Automatic, Integer(4), Offset: 0, Alignment: full word
                                 0-3480.21$  0-3494.7@  0-3499.15  0-3503.15  0-3507.15  0-3511.15  0-3520.19  0-3523.25  0-3526.22
                                 0-3538.19  0-3562.19  0-3566.19  0-3570.19  0-3583.19  0-3587.19  0-3591.19  0-3595.19  0-3599.19
                                 0-3603.19  0-3607.19  0-3611.19  0-3615.19  0-3619.19  0-3623.19  0-3627.19  0-3631.19  0-3635.19
                                 0-3639.19  0-3643.19  0-3647.19  0-3651.19  0-3655.19  0-3659.19  0-3663.19  0-3667.19
 
iand                             Pure Intrinsic
                                 0-3486.11
 
j                                Reference argument, Integer(4), Offset: 0, Alignment: full word
                                 0-3479.21$  0-3439.24  0-3499.20  0-3503.20  0-3507.20  0-3511.20  0-3520.24  0-3526.17@  0-3538.24
                                 0-3562.24  0-3566.24  0-3570.24  0-3583.24  0-3587.24  0-3591.24  0-3595.24  0-3599.24  0-3603.24
                                 0-3607.24  0-3611.24  0-3615.24  0-3619.24  0-3623.24  0-3627.24  0-3631.24  0-3635.24  0-3639.24
                                 0-3643.24  0-3647.24  0-3651.24  0-3655.24  0-3659.24  0-3663.24  0-3667.24
 
kgds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-3478.21$  0-3439.31  0-3490.11  0-3494.15  0-3494.25
 
kpds                             Reference argument, Integer(4) (1:*), Offset: 0, Alignment: full word
                                 0-3477.21$  0-3439.26  0-3486.16  0-3498.11  0-3498.29  0-3502.16  0-3502.34  0-3506.16  0-3510.16
                                 0-3510.34  0-3517.16  0-3519.15  0-3519.32  0-3521.21  0-3535.16  0-3537.15  0-3537.33  0-3548.16
                                 0-3554.16  0-3560.16  0-3561.15  0-3561.33  0-3565.20  0-3565.39  0-3569.20  0-3580.16  0-3582.15
                                 0-3582.32  0-3586.20  0-3586.36  0-3590.20  0-3594.20  0-3594.38  0-3598.20  0-3598.38  0-3602.20
                                 0-3602.38  0-3606.20  0-3610.20  0-3610.38  0-3614.20  0-3614.38  0-3618.20  0-3618.38  0-3622.20
                                 0-3626.20  0-3626.38  0-3630.20  0-3630.38  0-3634.20  0-3634.39  0-3638.20  0-3642.20  0-3646.20
                                 0-3646.39  0-3650.20  0-3650.38  0-3654.20  0-3654.38  0-3658.20  0-3658.38  0-3662.20  0-3666.20
                                 0-3666.39
 
kret                             Reference argument, Integer(4), Offset: 0, Alignment: full word
                                 0-3439.36  0-3485.7@  0-3493.7@  0-3518.11@  0-3529.15@  0-3536.11@  0-3542.15@  0-3574.15@
                                 0-3581.11@  0-3671.15@  0-3675.11@  0-3681.7@
 
** fi637   === End of Compilation 9 ===
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    1           0         0           0          0            1
 
>>>>> FILE TABLE SECTION <<<<<
 
 
                                       FILE CREATION        FROM
FILE NO   FILENAME                    DATE       TIME       FILE    LINE
     0    w3fi63.f                    12/18/08   11:53:43
 
 
>>>>> COMPILATION EPILOGUE SECTION <<<<<
 
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    1           0         0           0          0            1
 
 
    Source records read.......................................    3683
1501-510  Compilation successful for file w3fi63.f.
1501-543  Object file created.
