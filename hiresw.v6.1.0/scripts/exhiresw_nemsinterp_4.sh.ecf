#!/bin/ksh
################################################################################
####  UNIX Script Documentation Block
#                      .                                             .
# Script name:         exhiresw_nemsinterp.sh.sms
# Script description:  Runs nemsinterp for NMMB
#
# Author:        Eric Rogers       Org: NP22         Date: 2004-07-02
#
# Abstract: The scripts runs the final pieces of the NMMB prelim job, with nemsinterp run to generate
#           model initial and boundary conditions.  Non-Guam domains have their land states updated
#           from the NAM using the coldstart program
#
# Script history log:
# 2003-11-01  Matt Pyle - Original script for parallel
# 2004-07-02  Eric Rogers - Preliminary modifications for production.
# 2004-10-01  Eric Rogers - Modified to run special real executable for Alaska NMM
# 2007-04-09  Matthew Pyle - Modified to run WPS rather than wrfsi
# 2009-09-24  Shawna Cokley - Streamlines way script obtains date information -
#                             pulls from $PDY rather than copying a file to the working directory
# 2013-10-30  Matthew Pyle - Breaks out last piece from old prelim script 

set -x

LENGTH=48

### NEST options are east, west, ak, hi, pr, or conus
### MODEL is arw or nmm or nmmb

msg="JOB $job FOR WRF NEST=${NEST}${MODEL}_${MEMBER} HAS BEGUN"
postmsg "$jlogfile" "$msg"

yy=`echo $PDY | cut -c1-4`
mm=`echo $PDY | cut -c5-6`
dd=`echo $PDY | cut -c7-8`

ystart=`echo $PDY | cut -c1-4`
mstart=`echo $PDY | cut -c5-6`
dstart=`echo $PDY | cut -c7-8`

start=$ystart$mstart$dstart$cyc

NDATE=${NDATE:-${utilexec}/ndate}

int1=`$NDATE +12 $start`
yyint1=`echo $int1 | cut -c1-4`
mmint1=`echo $int1 | cut -c5-6`
ddint1=`echo $int1 | cut -c7-8`
hhint1=`echo $int1 | cut -c9-10`

int2=`$NDATE +12 $int1`
yyint2=`echo $int2 | cut -c1-4`
mmint2=`echo $int2 | cut -c5-6`
ddint2=`echo $int2 | cut -c7-8`
hhint2=`echo $int2 | cut -c9-10`

int3=`$NDATE +12 $int2`
yyint3=`echo $int3 | cut -c1-4`
mmint3=`echo $int3 | cut -c5-6`
ddint3=`echo $int3 | cut -c7-8`
hhint3=`echo $int3 | cut -c9-10`

int4=`$NDATE +12 $int3`
yyint4=`echo $int4 | cut -c1-4`
mmint4=`echo $int4 | cut -c5-6`
ddint4=`echo $int4 | cut -c7-8`
hhint4=`echo $int4 | cut -c9-10`

end=`$NDATE $LENGTH $start`

yend=`echo $end | cut -c1-4`
mend=`echo $end | cut -c5-6`
dend=`echo $end | cut -c7-8`

filt_start=`$NDATE -1 $start`

filt_ys=`echo $filt_start | cut -c1-4`
filt_ms=`echo $filt_start | cut -c5-6`
filt_ds=`echo $filt_start | cut -c7-8`
filt_hs=`echo $filt_start | cut -c9-10`

filt_ye=$ystart
filt_me=$mstart
filt_de=$dstart
filt_he=$cyc

export CYCLE=$PDY$cyc
echo "export CYCLE=$CYCLE" >> $COMOUT/${RUN}.t${cyc}z.envir.sh

#########################################################
# RUN NEMSINTERP PROGRAM to generate input/boco files (NMMB)
#########################################################

cd $DATA

cycstart=`echo ${PDY}${cyc}`

start=$ystart$mstart$dstart

end=`$NDATE $LENGTH $cycstart`

yend=`echo $end | cut -c1-4`
mend=`echo $end | cut -c5-6`
dend=`echo $end | cut -c7-8`
hend=`echo $end | cut -c9-10`

## for large domains, special namelist.input files are required for the model
## for small domains, use the same namelist for both real and the model

if [ $MODEL = "nmmb" ]; then
 if [ $NEST = "pr" ] ; then
   cp $PARMhiresw/hiresw_pr_${MODEL}_configure_in configure_in
 elif [ $NEST = "hi" ] ; then
   cp $PARMhiresw/hiresw_hi_${MODEL}_configure_in configure_in
 elif [ $NEST = "guam" ] ; then
   cp $PARMhiresw/hiresw_guam_${MODEL}_configure_in configure_in
 elif [ $NEST = "ak" ] ; then
   cp $PARMhiresw/hiresw_ak_${MODEL}_configure_in configure_in
 elif [ $NEST = "conus" ] ; then
   cp $PARMhiresw/hiresw_conus_${MODEL}_configure_in configure_in
 else
   echo "bad NEST selection in nemsinterp_4 $NEST"
   ./err_exit "bad NEST selection in nemsinterp_4"
 fi
fi


### number of input levels depends on source model data

NUMLEVS=27

if [ $MODEL = "nmmb" ]
then

cat  configure_in | sed s:YSTART:$ystart: | sed s:MSTART:$mstart: \
 | sed s:DSTART:$dstart: | sed s:HSTART:$cyc: > configure_file_01

cp configure_file_01 configure_file

else

cat namelist.input_in | sed s:YSTART:$ystart: | sed s:MSTART:$mstart: \
 | sed s:DSTART:$dstart: | sed s:HSTART:$cyc: | sed s:YEND:$yend: \
 | sed s:MEND:$mend:     | sed s:DEND:$dend: | sed s:HEND:$hend:  \
 | sed s:FILT_YS:${filt_ys}: | sed s:FILT_MS:${filt_ms}: | sed s:FILT_DS:${filt_ds}: \
 | sed s:FILT_HS:${filt_hs}: | sed s:FILT_YE:${filt_ye}: | sed s:FILT_ME:${filt_me}: \
 | sed s:FILT_DE:${filt_de}: | sed s:FILT_HE:${filt_he}: \
 | sed s:NUMLEV:$NUMLEVS: > namelist.input

cat namelist.input_in_model | sed s:YSTART:$ystart: | sed s:MSTART:$mstart: \
 | sed s:DSTART:$dstart: | sed s:HSTART:$cyc: | sed s:YEND:$yend: \
 | sed s:MEND:$mend:     | sed s:DEND:$dend: | sed s:HEND:$hend:  \
 | sed s:FILT_YS:${filt_ys}: | sed s:FILT_MS:${filt_ms}: | sed s:FILT_DS:${filt_ds}: \
 | sed s:FILT_HS:${filt_hs}: | sed s:FILT_YE:${filt_ye}: | sed s:FILT_ME:${filt_me}: \
 | sed s:FILT_DE:${filt_de}: | sed s:FILT_HE:${filt_he}: \
 | sed s:NUMLEV:$NUMLEVS: > namelist.input_model

fi


rm fort.*

cp $PARMhiresw/hiresw_LANDUSE.TBL LANDUSE.TBL
cp $PARMhiresw/hiresw_ETAMPNEW_DATA ETAMPNEW_DATA
cp $PARMhiresw/hiresw_ETAMPNEW_DATA micro_lookup.dat
cp $PARMhiresw/hiresw_VEGPARM.TBL VEGPARM.TBL
cp $PARMhiresw/hiresw_SOILPARM.TBL SOILPARM.TBL
cp $PARMhiresw/hiresw_GENPARM.TBL GENPARM.TBL

cp $FIXhiresw/hiresw_RRTM_DATA RRTM_DATA
cp $FIXhiresw/hiresw_tr49t67 tr49t67
cp $FIXhiresw/hiresw_tr49t85 tr49t85
cp $FIXhiresw/hiresw_tr67t85 tr67t85


export MP_PGMMODEL=spmd
unset MP_CMDFILE

echo NEED TO RUN NEMSINTERP

mkdir -p $DATA/run_nemsinterp_4

cd $DATA/run_nemsinterp_4

  cat $PARMhiresw/hiresw_${NEST}_${MODEL}.namelist.nps_in | sed s:YSTART:$yyint3: | sed s:MSTART:$mmint3: \
 | sed s:DSTART:$ddint3: | sed s:HSTART:$hhint3: | sed s:YEND:$yyint4: \
 | sed s:MEND:$mmint4:     | sed s:DEND:$ddint4: | sed s:HEND:$hhint4: | sed s:_GRIBSRC_:${GRIBSRC}:g > $DATA/run_nemsinterp_4/namelist.nps

yy1=`echo $int3 | cut -c1-4`
mm1=`echo $int3 | cut -c5-6`
dd1=`echo $int3 | cut -c7-8`
hh1=`echo $int3 | cut -c9-10`

cp $COMOUT/${NEST}${MODEL}.t${cyc}z.met_nmb.d01.${yy1}-${mm1}-${dd1}_${hh1}:00:00.dio met_nmb.d01.${yy1}-${mm1}-${dd1}_${hh1}:00:00.dio

t2=`$NDATE +3 $int3`

yy2=`echo $t2 | cut -c1-4`
mm2=`echo $t2 | cut -c5-6`
dd2=`echo $t2 | cut -c7-8`
hh2=`echo $t2 | cut -c9-10`

cp $COMOUT/${NEST}${MODEL}.t${cyc}z.met_nmb.d01.${yy2}-${mm2}-${dd2}_${hh2}:00:00.dio met_nmb.d01.${yy2}-${mm2}-${dd2}_${hh2}:00:00.dio

t3=`$NDATE +3 $t2`

yy3=`echo $t3 | cut -c1-4`
mm3=`echo $t3 | cut -c5-6`
dd3=`echo $t3 | cut -c7-8`
hh3=`echo $t3 | cut -c9-10`

cp $COMOUT/${NEST}${MODEL}.t${cyc}z.met_nmb.d01.${yy3}-${mm3}-${dd3}_${hh3}:00:00.dio met_nmb.d01.${yy3}-${mm3}-${dd3}_${hh3}:00:00.dio

t4=`$NDATE +3 $t3`

yy4=`echo $t4 | cut -c1-4`
mm4=`echo $t4 | cut -c5-6`
dd4=`echo $t4 | cut -c7-8`
hh4=`echo $t4 | cut -c9-10`

cp $COMOUT/${NEST}${MODEL}.t${cyc}z.met_nmb.d01.${yy4}-${mm4}-${dd4}_${hh4}:00:00.dio met_nmb.d01.${yy4}-${mm4}-${dd4}_${hh4}:00:00.dio

t5=`$NDATE +3 $t4`

yy5=`echo $t5 | cut -c1-4`
mm5=`echo $t5 | cut -c5-6`
dd5=`echo $t5 | cut -c7-8`
hh5=`echo $t5 | cut -c9-10`

cp $COMOUT/${NEST}${MODEL}.t${cyc}z.met_nmb.d01.${yy5}-${mm5}-${dd5}_${hh5}:00:00.dio met_nmb.d01.${yy5}-${mm5}-${dd5}_${hh5}:00:00.dio

export pgm=hiresw_nemsinterp
cp $EXEChiresw/hiresw_nemsinterp .
mpirun.lsf ./hiresw_nemsinterp
err=$?; err_chk

cp boco.0000 $COMOUT/${NEST}${MODEL}.t${cyc}z.boco.0036
cp boco.0003 $COMOUT/${NEST}${MODEL}.t${cyc}z.boco.0039
cp boco.0006 $COMOUT/${NEST}${MODEL}.t${cyc}z.boco.0042
cp boco.0009 $COMOUT/${NEST}${MODEL}.t${cyc}z.boco.0045

echo "DONE" > ../nemsinterpdone4

cd $DATA

# count=`ls nemsinterpdone* | wc -l`

count=`ls $COMOUT/${NEST}${MODEL}.t${cyc}z.boco.* | wc -l`

while [ $count -lt 16 ]
do
sleep 20
count=`ls $COMOUT/${NEST}${MODEL}.t${cyc}z.boco.* | wc -l`
echo now see $count boco files in com
done


# while [ $count -lt 4 ]
# do
# sleep 20
# count=`ls nemsinterpdone* | wc -l`
# echo nemsinterpdone count now $count
# done


# export err1=$?
# if [ $err1 -ne 0 ]
# then
# echo "failed copy of boco.00${hr}"
# ./err_exit "missing a critical file for the model"
# fi

##? done

cp configure_file $COMOUT/${NEST}${MODEL}.t${cyc}z.configure_file
export err=$?; err_chk

msg="JOB $job FOR WRF NEST=${NEST}${MODEL}_${MEMBER} HAS COMPLETED NORMALLY"
postmsg "$jlogfile" "$msg"
