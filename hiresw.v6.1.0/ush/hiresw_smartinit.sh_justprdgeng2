#!/bin/ksh 
#
# Author:        Geoff Manikin       Org: NP22         Date: 2007-08-06
#
# Script history log:
# 2007-08-06  Geoff Manikin
# 2012-07-24  Jeff McQueen  cleaned up redundant codes
#    Created precip threshold loop for creating sref prob precip files
# 2012-09-26  JTM : Modified for wcoss
#                   Combined on & off cycles options into one script 
# 2012-10-22  JTM : Combined addprecip and makeprecip codes
# 2012-10-26  JTM : Combined various nam region scripts
#                   smartinit: getgrib.f: fixed bug with reading sref prob file
# 2012-10-31  JTM : moved smartinit system to tide
# 2012-12-03  JTM : Unified for nam parent and nested region runs
# 2014-01-23  Matthew Pyle : Overhaul for HiresWindow purposes
# 2014-11-04  Matthew Pyle : SREF probs taken from GRIB2 files
#======================================================================

set -x 

inest=1  # treat hiresw domains like they are nests

export rg=$RUNTYP
## WGRIB2=$EXEChiresw/hiresw_wgrib2
# compress=complex2
compress="c3 -set_bitmap 1"

ffhr=${1}

echo working ffhr $ffhr

cd  $DATA/smartinit_${ffhr}/
rm $DATA/smartinit_${ffhr}/*

sh setup.sh
sh setpdy.sh
. PDY


#=====================================================================

#INPUT MODEL GRID filename extension
export mdlgrd=$RUNTYP  
export mdl=$RUNTYP

#SMARTINIT OUTPUT grid filename extension
outreg=$rg
case $RUNTYP in
  conusarw|conusnmmb) rg=conus; outreg=conus; wgrib2def="lambert:265:25:25 238.446:2145:2540 20.192:1377:2540";;
  hiarw|hinmmb) rg=hi; outreg=hi; wgrib2def="mercator:20 198.475:321:2500:206.131 18.073:225:2500:23.088";;
  prarw|prnmmb) rg=pr; outreg=pr; wgrib2def="mercator:20 291.804:177:2500:296.028 16.829:129:2500:19.747";;
  akarw|aknmmb) rg=ak; outreg=ak; wgrib2def="nps:210:60 181.429:1649:2976 40.53:1105:2976";;
  guamarw|guamnmmb) rg=guam; outreg=guam; wgrib2def="mercator:20 143.687:193:2500:148.280 12.35:193:2500:16.794";;
esac

cycon=0

# 12 hour max/mins must be computed at 00 and 12 UTC

# FOR NESTS,parent script, exnam, sets forecast range (60 or 54h)
case $cyc in
  00|12) set -A A6HR 12 24 36 48 999;;
  * )    set -A A6HR 18 30 42 999;;
esac

# srefcyc and gefscyc set in parent job (JNAM_SMINIT)
typeset -Z2 srefcyc gefscyc pcphrl


#======================================================================
#  Configure input met grib, land-sea mask and topo file names
#======================================================================

#  Set indices to determine input met file name 
#       eg: MDL.tCYCz.MDLGRD.NATGRD${FHR}.tm00
#       eg: nam.t12z.bgrd3d24.tm00
#       eg: nam.t12z.conusnest.bsmart24.tm00

# prdgfl=meso${rg}.NDFD  # output prdgen grid name (eg: mesocon.NDFD,mesoak...)

if [ $rg = "hi" ]
then
rgprdgen=HI
elif [ $rg = "pr" ]
then
rgprdgen=PR
elif [ $rg = "conus" ]
then
rgprdgen=CONUS
elif [ $rg = "ak" ]
then
rgprdgen=AK
elif [ $rg = "guam" ]
then
rgprdgen=GU
fi

if [ $MODEL = "nmmb" ]
then
prdgfl=wrf.${rgprdgen}04
elif [ $MODEL = "arw" ]
then
prdgfl=wrf.EM${rgprdgen}04
fi

  natgrd="wrfprs"       # native model type grid extension (eg: bgrd3d, bsmart)

#-------------------------------------------------------------------------
#   For all grids, set the following:
#   sgrb : Input SREF grid grib number (eg: 212, 216, 243)
#   grid : output grid to copygb sref precip and nam precip buckets to 
#          one exception for non-nests where nam precip buckets are 
#          interpolated to smartinit output (ogrd)
#   ogrd : output grib number for prdgen and smartinit codes 
#          (eg: 197,196,195,184)
#--------------------------------------------------------------------------
grdext=" 0 64 25000 25000"
grdextmerc=" 0 64 2500 2500"


   maskpre=hiresw_smartmask${rg}
   topopre=hiresw_smarttopo${rg}
   ext=grb
   case $RUNTYP in
     guamnmmb|guamarw)          sgrb=999;ogrd=199
      grid="255 1 193 193 12350 143687 128 16794 148280 20000  $grdextmerc";;
     hiarw)            sgrb=243;ogrd=196
      grid="255 1 321 225 18067 -161626 128 23082 -153969 20000 $grdextmerc";;
     hinmmb)            sgrb=243;ogrd=196
      grid="255 1 321 225 18067 -161626 128 23082 -153969 20000 $grdextmerc";;
     prarw)            sgrb=212;ogrd=195
      grid="255 1 177 129 16829  -68196 128 19747  -63972 20000 $grdextmerc";;
     prnmmb)            sgrb=212;ogrd=195
      grid="255 1 177 129 16829  -68196 128 19747  -63972 20000 $grdextmerc";;
     akarw)  sgrb=216;ogrd=91
      grid="255 5 1649 1105 40530 181429 8 210000 2976 2976 0 64 0 25000 25000";;
     aknmmb)  sgrb=216;ogrd=91
      grid="255 5 1649 1105 40530 181429 8 210000 2976 2976 0 64 0 25000 25000";;
     conusarw)  sgrb=212;ogrd=184 
      grid="255 3 2145 1377 20192 238446 8 265000 2540 2540 $grdext"
      topopre=ruc2_ndfd_elevtiles.ndfd2.5
      maskpre=ruc2_ndfd_vegtiles.ndfd2.5;;
     conusnmmb)  sgrb=212;ogrd=184 
      grid="255 3 2145 1377 20192 238446 8 265000 2540 2540 $grdext"
      topopre=ruc2_ndfd_elevtiles.ndfd2.5
      maskpre=ruc2_ndfd_vegtiles.ndfd2.5;;
#  NESTS--------------------------------------------------------------------
   *)
      echo RUNTYP  ${RUNTYP} configuration not available $mdlgrd $rg
      exit;;
   esac

maskfl=${maskpre}.${ext}
topofl=${topopre}.${ext}

echo
echo "============================================================"
echo BEGIN SMARTINIT PROCESSING FOR FFHR $ffhr  CYCLE $cyc
echo RUNTYP:  $RUNTYP $mdlgrd  $rg
echo INTERP GRID: $grid
echo OUTPUT GRID: $ogrd $outreg

echo "============================================================"
echo 

#  Set Defaults pcp hours and frequencies
let pcphr=ffhr+3
let pcphrl=ffhr+3
let pcphr12=pcphr-12
let pcphr6=pcphr-6
let pcphr3=pcphr-3

#======================================================================
#  CREATE SREF PROB. PRECIP FILES
#======================================================================

# fhr should be gt 0 since precip is not available at initial time
if [ $ffhr -gt 0 -a $sgrb -ne 999 ]; then

# get the sref precip fields that we need
  cp $COMIN_SREF/sref.t${srefcyc}z.pgrb${sgrb}.prob_3hrly.grib2 SREFPROB

  if [ ! -s SREFPROB ]; then
    cp $COMIN_GEFS/${gefscyc}/sref.t${gefscyc}z.pgrb${sgrb}.prob_3hrly.grib2 SREFPROB
  fi

  $GRB2INDEX SREFPROB SREFPROBI
  # check for missing sref data
  export err=$?; err_chk

  let IP=0
  if [ $ffhr -lt 6 ]; then pcphr6=;pcphr12=;fi
  if [ $ffhr -lt 12 ]; then pcphr12=;fi
  grbpre="2 0 0 0 0"
  for PHR in $pcphr3 $pcphr6 $pcphr12;do 

### need an offset here to account for the 3 h offset in the SREF data????

#   prob of pcp > 0.01
#    $EXECutil/wgrib -PDS10 SREFPROB |grep "${grbpre} 64 64 0 0"|grep "0 1 $PHR $pcphr 4"|$EXECutil/wgrib -i -grib -o dump SREFPROB

	echo "get PCP>0.01 over: " ${PHR} ${pcphr}

    $WGRIB2 SREFPROB | grep APCP |  grep "prob >0.25" | grep ":${PHR}-${pcphr} hour" | $WGRIB2 -i SREFPROB  -grib dump
    let IP=IP+1
    mv dump srefpcp$IP

#   prob of pcp > 0.05
#    $EXECutil/wgrib -PDS10 SREFPROB |grep "${grbpre} 65 20 81 236"| grep "0 1 $PHR $pcphr 4"|$EXECutil/wgrib -i -grib -o dump SREFPROB
    $WGRIB2 SREFPROB | grep APCP | grep "prob >1.27" | grep ":${PHR}-${pcphr} hour" | $WGRIB2 -i SREFPROB  -grib  dump
    let IP=IP+1
    mv dump srefpcp$IP

#   prob of pcp > 0.10
#    $EXECutil/wgrib -PDS10 SREFPROB |grep "${grbpre} 65 40 163 215"| grep "0 1 $PHR $pcphr 4"|$EXECutil/wgrib -i -grib -o dump SREFPROB
    $WGRIB2 SREFPROB | grep APCP |  grep "prob >2.54" | grep ":${PHR}-${pcphr} hour"  | $WGRIB2 -i SREFPROB -grib dump
    let IP=IP+1
    mv dump srefpcp$IP

#   prob of pcp > 0.25
#    $EXECutil/wgrib -PDS10 SREFPROB |grep "${grbpre} 65 101 153 154"| grep "0 1 $PHR $pcphr 4"|$EXECutil/wgrib -i -grib -o dump SREFPROB
    $WGRIB2 SREFPROB | grep APCP |  grep "prob >6.35" | grep ":${PHR}-${pcphr} hour"  | $WGRIB2 -i SREFPROB -grib dump
    let IP=IP+1
    mv dump srefpcp$IP

#   prob of pcp > 0.50
#    $EXECutil/wgrib -PDS10 SREFPROB |grep "${grbpre} 65 203 51 51"| grep "0 1 $PHR $pcphr 4"|$EXECutil/wgrib -i -grib -o dump SREFPROB
    $WGRIB2 SREFPROB | grep APCP |  grep "prob >12.7" | grep ":${PHR}-${pcphr} hour" | $WGRIB2 -i SREFPROB -grib dump
    let IP=IP+1
    mv dump srefpcp$IP
  done

  cat srefpcp1 srefpcp2 srefpcp3 srefpcp4 srefpcp5 > srefallpcp
  if [ $ffhr -ge 6 ]; then
    cat srefpcp6 srefpcp7 srefpcp8 srefpcp9 srefpcp10 >> srefallpcp
  fi
  if [ $ffhr -ge 12 ]; then
    cat srefpcp11 srefpcp12 srefpcp13 srefpcp14 srefpcp15 >> srefallpcp
  fi

### budget maybe not correct for probabilities here
###  $WGRIB2  srefallpcp -set_grib_type ${compress} -new_grid_interpolation budget -new_grid_winds grid -new_grid ${wgrib2def} srefpcp${rg}_${SREF_PDY}${srefcyc}f0${pcphrl}
  $WGRIB2  srefallpcp -set_grib_type ${compress} -new_grid_winds grid -new_grid ${wgrib2def} srefpcp${rg}_${SREF_PDY}${srefcyc}f0${pcphrl}
  $GRB2INDEX srefpcp${rg}_${SREF_PDY}${srefcyc}f0${pcphrl} srefpcp${rg}i_${SREF_PDY}${srefcyc}f0${pcphrl}

fi #fhr -ge 0

let ffhr1=ffhr-1
let ffhr2=ffhr-2
hours="${ffhr}"
if [ $ffhr -ge 3 ];then hours="${ffhr2} ${ffhr1} ${ffhr}";fi

#===========================================================
#  CREATE Accum precip buckets if necessary 
#===========================================================
for fhr in $hours; do

  rm -f *out${fhr}
  mk3p=0;mk6p=0;mk12p=0

if [ $fhr -ne 0 ] 
then
  let check=fhr%3
  let check6=fhr%6
else
  check=9
  check6=9
fi

   
  let fhr1=fhr-1
  let fhr2=fhr-2
  let fhr3=fhr-3
  let fhr6=fhr-6
  let fhr9=fhr-9
  let fhr12=fhr-12
  typeset -Z2 fhr1 fhr2 fhr3 fhr6 fhr9 fhr12 fhr ffhr

#      cp $COMIN/$mdl.t${cyc}z.${natgrd}${fhr} WRFPRS${fhr}.tm00

## do not convert whole file.  Strip out what is needed first

# do in five pieces (conus only??)


INF=$COMIN/$mdl.t${cyc}z.${natgrd}${fhr}

cp ${PARMhiresw}/hiresw_smartinit.parmlist.g2_1 list_1.txt
cp ${PARMhiresw}/hiresw_smartinit.parmlist.g2_2 list_2.txt
cp ${PARMhiresw}/hiresw_smartinit.parmlist.g2_3 list_3.txt
cp ${PARMhiresw}/hiresw_smartinit.parmlist.g2_4 list_4.txt
cp ${PARMhiresw}/hiresw_smartinit.parmlist.g2_5 list_5.txt
cp ${PARMhiresw}/hiresw_smartinit.parmlist.g2_6 list_6.txt
cp ${PARMhiresw}/hiresw_smartinit.parmlist.g2_nn list_nn.txt


# protect with (if -e) types of statements?
rm inputs.grb2_1 inputs.grb2_2 inputs.grb2_3 inputs.grb2_4 inputs.grb2_5 inputs.grb2_6 inputs.grb2_nn

$WGRIB2 $INF | grep -F -f list_1.txt | $WGRIB2 -i -grib inputs.grb2_1 $INF
$WGRIB2 $INF | grep -F -f list_2.txt | $WGRIB2 -i -grib inputs.grb2_2 $INF
$WGRIB2 $INF | grep -F -f list_3.txt | $WGRIB2 -i -grib inputs.grb2_3 $INF
$WGRIB2 $INF | grep -F -f list_4.txt | $WGRIB2 -i -grib inputs.grb2_4 $INF
$WGRIB2 $INF | grep -F -f list_5.txt | $WGRIB2 -i -grib inputs.grb2_5 $INF
$WGRIB2 $INF | grep -F -f list_6.txt | $WGRIB2 -i -grib inputs.grb2_6 $INF
# $WGRIB2 $INF | grep -F -f list_7.txt | $WGRIB2 -i -grib inputs.grb2_7 $INF
# $WGRIB2 $INF | grep -F -f list_8.txt | $WGRIB2 -i -grib inputs.grb2_8 $INF
$WGRIB2 $INF | grep -F -f list_nn.txt | $WGRIB2 -i -grib inputs.grb2_nn $INF

rm wgrib2.poe

rm  model.ndfd_1  model.ndfd_2  model.ndfd_3  model.ndfd_4  model.ndfd_5 model.ndfd_6 model.ndfd_nn
# rm  model.ndfd_7 model.ndfd_8

echo "#! /bin/ksh" > a.poe
echo "$WGRIB2  inputs.grb2_1  -set_grib_type ${compress} -new_grid_winds grid -new_grid ${wgrib2def} model.ndfd_1" >> a.poe
echo "#! /bin/ksh" > b.poe
echo "$WGRIB2  inputs.grb2_2  -set_grib_type ${compress} -new_grid_winds grid -new_grid ${wgrib2def} model.ndfd_2" >> b.poe
echo "#! /bin/ksh" > c.poe
echo "$WGRIB2  inputs.grb2_3  -set_grib_type ${compress} -new_grid_winds grid -new_grid ${wgrib2def} model.ndfd_3" >> c.poe
echo "#! /bin/ksh" > d.poe
echo "$WGRIB2  inputs.grb2_4  -set_grib_type ${compress} -new_grid_winds grid -new_grid ${wgrib2def} model.ndfd_4" >> d.poe
echo "#! /bin/ksh" > e.poe
echo "$WGRIB2  inputs.grb2_5  -set_grib_type ${compress} -new_grid_winds grid -new_grid ${wgrib2def} model.ndfd_5" >> e.poe
echo "#! /bin/ksh" > f.poe
echo "$WGRIB2  inputs.grb2_6  -set_grib_type ${compress} -new_grid_winds grid -new_grid ${wgrib2def} model.ndfd_6" >> f.poe


chmod 775 a.poe
chmod 775 b.poe
chmod 775 c.poe
chmod 775 d.poe
chmod 775 e.poe
chmod 775 f.poe

echo "a.poe" > wgrib2.poe
echo "b.poe" >> wgrib2.poe
echo "c.poe" >> wgrib2.poe
echo "d.poe" >> wgrib2.poe
echo "e.poe" >> wgrib2.poe
echo "f.poe" >> wgrib2.poe

chmod 775 wgrib2.poe
export MP_PGMMODEL=mpmd
export MP_CMDFILE=wgrib2.poe
time mpirun.lsf
export err=$?; ./err_chk

$WGRIB2 inputs.grb2_nn  -set_grib_type ${compress} -new_grid_interpolation neighbor -new_grid_winds grid -new_grid ${wgrib2def} model.ndfd_nn


cat model.ndfd_1 model.ndfd_2 model.ndfd_3 model.ndfd_4 model.ndfd_5 model.ndfd_6 \
                              model.ndfd_nn > NDFD${fhr}.tm00


	cp NDFD${fhr}.tm00 $COMIN/$mdl.t${cyc}z.NDFD${fhr}
	cp NDFD${fhr}.tm00 $prdgfl

  $GRB2INDEX WRFPRS${fhr}.tm00 WRFPRS${fhr}i.tm00

# cp $PARMhiresw/hiresw_${MODEL}_mastersmart.${RUNTYP}.ctl  master${fhr}.ctl

  if [ $fhr -gt 0 ];then
#-------------------------------------------------------------
#   OFF-CYC & Nests: Create 6/12 hour buckets, 3 hr buckets available
#   ON-CYC :
#     3hr precip available at only 3,15, 27,39... forcast fhours
#     other hours, create 3 hr precip
#     6hr precip: Create only at 00/12 UTC valid times 
#           eg: fhr=12,24,36
#     Create 12 hour precip at 00/12 UTC valid times
#-------------------------------------------------------------
    if [ $check -eq 0 -a $MODEL = "arw" ]
    then
      mk3p=3
      ppgm=make
    else
      mk3p=0
    fi
    if [ $check6 -eq 0 ];then 
      mk6p=6
	if [ $MODEL = "nmmb" ] 
        then 
      ppgm=add
	echo mk6p and ppgm are $mk6p $ppgm
        else
      ppgm=make
        fi
    fi

#   hr3bkt flag determines when to run smartprecip to create 3 hr buckets
    let hr3bkt=$((fhr-3))%12

#-------------------------------------------------------------
#   ON-CYC: The 3-hr fhrs (3,15,27,39....) --> Already have 3-hr buckets
#   For in-between fhrs (22,23,25) --> Create 3-hr buckets
#   since we only gather max/min data at those hours to compute 12 hr max/mins
#-------------------------------------------------------------

	if [ $MODEL = "nmmb" ]
        then
      hr3bkt=0
        fi

  fi  #fhr -ne 0

#-------------------------------------------------------------
# ON-CYCLE:  At 12-hr times:  Need 6 hour buckets as well
# Except for 6 hr times (18,30,42...) : Already have 6 hour buckets  ### not true hiresw
# In addition, For 00/12 UTC valid times: Need to make 12 hour accumulations
#-------------------------------------------------------------
  case $fhr in 
    ${A6HR[0]}|${A6HR[1]}|${A6HR[2]}|${A6HR[3]}|${A6HR[4]}|${A6HR[5]}|${A6HR[6]} )
#     off-cycles and  Nests have 3 hr buckets but need 6,12 hour precip
	echo "make both 6 and 12 hour buckets"
      mk6p=6
      mk12p=12

	if [ $MODEL = "nmmb" ]
        then
      ppgm=add
        else
      ppgm=make
        fi

      mk12p=12;;

  esac 

  for MKPCP in $mk3p $mk6p $mk12p;do
    if [ $MKPCP -ne 0 ];then
    echo ====================================================================
    echo BEGIN Making $MKPCP hr PRECIP Buckets for $fhr Hour $ppgm freq $freq
    echo ====================================================================
      pfhr3=-99;pfhr4=-99

      case $MKPCP in
        $mk3p )
        FHRFRQ=$fhr3;freq=3
        pfhr1=$fhr;pfhr2=$fhr3;;

        $mk6p )
        FHRFRQ=$fhr6;freq=6
        pfhr1=$fhr;pfhr2=$fhr6
        if [ $ppgm = add ];then 
          FHRFRQ=$fhr3
          pfhr1=$fhr3;pfhr2=$fhr
	echo add block here FHRFRQ $FHRFRQ
	echo add block pfhr1 pfhr2 $pfhr1 $pfhr2
        fi;;

        $mk12p )
	if [ $MODEL = "nmmb" ]
        then
        FHRFRQ=$fhr9;freq=12
        else
        FHRFRQ=$fhr12;freq=12
        pfhr1=$fhr;pfhr2=$fhr12
        fi

        if [ $ppgm = add ];then 
	echo add block just mk12p or all
        pfhr1=$fhr9;pfhr2=$fhr6;pfhr3=$fhr3;pfhr4=$fhr
        fi;;

      esac


        INF=$COMIN/${mdl}.t${cyc}z.${natgrd}${fhr}
        $WGRIB2 $INF | grep -F -f $PARMhiresw/hiresw_smartinit.g2_rainsnow | $WGRIB2 -i -grib  WRFPRS${fhr}.tm00.g2 $INF

#         cnvgrib -g21  WRFPRS${fhr}.tm00.g2 WRFPRS${fhr}.tm00
       mv WRFPRS${fhr}.tm00.g2 WRFPRS${fhr}.tm00
# 	echo "contents of WRFPRS${fhr}.tm00"
#	${EXECutil}/wgrib WRFPRS${fhr}.tm00
   
#mp        cp $COMIN/${mdl}.t${cyc}z.${natgrd}${FHRFRQ} WRFPRS${FHRFRQ}.tm00

	if [ -e $COMIN/${mdl}.t${cyc}z.${natgrd}${FHRFRQ}.g1 ]
	then
	cp $COMIN/${mdl}.t${cyc}z.${natgrd}${FHRFRQ}.g1 WRFPRS${FHRFRQ}.tm00
	else


	echo here with FHRFRQ $FHRFRQ
        INF=$COMIN/${mdl}.t${cyc}z.${natgrd}${FHRFRQ}
        $WGRIB2 $INF | grep -F -f $PARMhiresw/hiresw_smartinit.g2_rainsnow | $WGRIB2 -i -grib  WRFPRS${FHRFRQ}.tm00.g2 $INF

#        cnvgrib -g21  WRFPRS${FHRFRQ}.tm00.g2 WRFPRS${FHRFRQ}.tm00
         mv WRFPRS${FHRFRQ}.tm00.g2 WRFPRS${FHRFRQ}.tm00
#	echo "contents of WRFPRS${FHRFRQ}.tm00"
#	${EXECutil}/wgrib WRFPRS${FHRFRQ}.tm00
	fi

#why        ${EXECutil}/wgrib -s WRFPRS${FHRFRQ}.tm00 |grep -f ${PARMhiresw}/hiresw_smartinit.parmlist \
#why                        |${EXECutil}/wgrib -i -grib -o temp WRFPRS${FHRFRQ}.tm00 > wgrib.out
#why       mv temp WRFPRS${FHRFRQ}.tm00

      $GRB2INDEX WRFPRS${fhr}.tm00 WRFPRS${fhr}i.tm00
	err1=$?
	if [ $err1 -ne 0 ]
	then
	echo trouble running grb2index on WRFPRS${fhr}.tm00
	fi

      $GRB2INDEX WRFPRS${FHRFRQ}.tm00 WRFPRS${FHRFRQ}i.tm00
	err1=$?
	if [ $err1 -ne 0 ]
	then
	echo trouble running grb2index on WRFPRS${FHRFRQ}.tm00
	fi

      export pgm=nam_smartprecip; . prep_step
      ln -sf "WRFPRS${FHRFRQ}.tm00"  fort.13  
      ln -sf "WRFPRS${FHRFRQ}i.tm00" fort.14
      ln -sf "WRFPRS${fhr}.tm00"     fort.15
      ln -sf "WRFPRS${fhr}i.tm00"    fort.16
      ln -sf "${freq}precip.${fhr}"  fort.50
      ln -sf "${freq}snow.${fhr}"    fort.52

	echo defining fort.13 with ${FHRFRQ}

      if [ $MKPCP -eq $mk12p ];then

        INF=$COMIN/${mdl}.t${cyc}z.${natgrd}${fhr9}
        $WGRIB2 $INF | grep -F -f $PARMhiresw/hiresw_smartinit.g2_rainsnow | $WGRIB2 -i -grib  WRFPRS${fhr9}.tm00.g2 $INF

#        cnvgrib -g21  WRFPRS${fhr9}.tm00.g2 WRFPRS${fhr9}.tm00
      mv WRFPRS${fhr9}.tm00.g2 WRFPRS${fhr9}.tm00
#	echo "contents of WRFPRS${fhr9}.tm00"
#	${EXECutil}/wgrib WRFPRS${fhr9}.tm00


	if [ $MODEL = "nmmb" ]
	then

#          cp $COMIN/${mdl}.t${cyc}z.${natgrd}${fhr3} WRFPRS${fhr3}.tm00

	   if [ -e $COMIN/${mdl}.t${cyc}z.${natgrd}${fhr3}.g1 ] 
           then
	    cp $COMIN/${mdl}.t${cyc}z.${natgrd}${fhr3}.g1 WRFPRS${fhr3}.tm00
	   else
#            cnvgrib -g21  $COMIN/${mdl}.t${cyc}z.${natgrd}${fhr3} WRFPRS${fhr3}.tm00

        INF=$COMIN/${mdl}.t${cyc}z.${natgrd}${fhr3}
        $WGRIB2 $INF | grep -F -f $PARMhiresw/hiresw_smartinit.g2_rainsnow | $WGRIB2 -i -grib  WRFPRS${fhr3}.tm00.g2 $INF

#        cnvgrib -g21  WRFPRS${fhr3}.tm00.g2 WRFPRS${fhr3}.tm00
	mv  WRFPRS${fhr3}.tm00.g2 WRFPRS${fhr3}.tm00
#        echo "contents of WRFPRS${fhr3}.tm00"
#        ${EXECutil}/wgrib WRFPRS${fhr3}.tm00


           fi
#####

	ls -l  WRFPRS${fhr3}.tm00

#          ${EXECutil}/wgrib -s WRFPRS${fhr3}.tm00 |grep -f ${PARMhiresw}/hiresw_smartinit.parmlist \
#                          |${EXECutil}/wgrib -i -grib -o temp WRFPRS${fhr3}.tm00 > wgrib.out
#          mv temp WRFPRS${fhr3}.tm00
#        echo "contents of redone WRFPRS${fhr3}.tm00"
#        ${EXECutil}/wgrib WRFPRS${fhr3}.tm00

        $GRB2INDEX WRFPRS${fhr3}.tm00 WRFPRS${fhr3}i.tm00

#          cp $COMIN/${mdl}.t${cyc}z.${natgrd}${fhr6} WRFPRS${fhr6}.tm00

	   if [ -e $COMIN/${mdl}.t${cyc}z.${natgrd}${fhr6}.g1 ] 
           then
	     cp $COMIN/${mdl}.t${cyc}z.${natgrd}${fhr6}.g1 WRFPRS${fhr6}.tm00
           else
#             cnvgrib -g21 $COMIN/${mdl}.t${cyc}z.${natgrd}${fhr6} WRFPRS${fhr6}.tm00
        INF=$COMIN/${mdl}.t${cyc}z.${natgrd}${fhr6}
        $WGRIB2 $INF | grep -F -f $PARMhiresw/hiresw_smartinit.g2_rainsnow | $WGRIB2 -i -grib  WRFPRS${fhr6}.tm00.g2 $INF
#        cnvgrib -g21  WRFPRS${fhr6}.tm00.g2 WRFPRS${fhr6}.tm00
       mv WRFPRS${fhr6}.tm00.g2 WRFPRS${fhr6}.tm00
           fi

#####
#why          ${EXECutil}/wgrib -s WRFPRS${fhr6}.tm00 |grep -f ${PARMhiresw}/hiresw_smartinit.parmlist \
#why                           |${EXECutil}/wgrib -i -grib -o temp WRFPRS${fhr6}.tm00 > wgrib.out
#why          mv temp WRFPRS${fhr6}.tm00
        $GRB2INDEX WRFPRS${fhr6}.tm00 WRFPRS${fhr6}i.tm00

        ln -sf "WRFPRS${fhr6}.tm00"      fort.15    
        ln -sf "WRFPRS${fhr6}i.tm00"     fort.16
        ln -sf "WRFPRS${fhr3}.tm00"      fort.17
        ln -sf "WRFPRS${fhr3}i.tm00"     fort.18
        ln -sf "WRFPRS${fhr}.tm00"       fort.19
        ln -sf "WRFPRS${fhr}i.tm00"      fort.20

	else  ## arw?

#          cp $COMIN/${mdl}.t${cyc}z.${natgrd}${fhr3} WRFPRS${fhr3}.tm00

	   if [ -e $COMIN/${mdl}.t${cyc}z.${natgrd}${fhr3}.g1 ] 
           then
            cp $COMIN/${mdl}.t${cyc}z.${natgrd}${fhr3}.g1 WRFPRS${fhr3}.tm00
	   else
#             cnvgrib -g21  $COMIN/${mdl}.t${cyc}z.${natgrd}${fhr3} WRFPRS${fhr3}.tm00
        INF=$COMIN/${mdl}.t${cyc}z.${natgrd}${fhr3}
        $WGRIB2 $INF | grep -F -f $PARMhiresw/hiresw_smartinit.g2_rainsnow | $WGRIB2 -i -grib  WRFPRS${fhr3}.tm00.g2 $INF
#        cnvgrib -g21  WRFPRS${fhr3}.tm00.g2 WRFPRS${fhr3}.tm00
	mv  WRFPRS${fhr3}.tm00.g2 WRFPRS${fhr3}.tm00
           fi

#####
#why          ${EXECutil}/wgrib -s WRFPRS${fhr3}.tm00 |grep -f ${PARMhiresw}/hiresw_smartinit.parmlist \
#why                          |${EXECutil}/wgrib -i -grib -o temp WRFPRS${fhr3}.tm00 > wgrib.out
#why          mv temp WRFPRS${fhr3}.tm00
        $GRB2INDEX WRFPRS${fhr3}.tm00 WRFPRS${fhr3}i.tm00

#          cp $COMIN/${mdl}.t${cyc}z.${natgrd}${fhr6} WRFPRS${fhr6}.tm00

	   if [ -e $COMIN/${mdl}.t${cyc}z.${natgrd}${fhr6}.g1 ] 
           then
            cp $COMIN/${mdl}.t${cyc}z.${natgrd}${fhr6}.g1 WRFPRS${fhr6}.tm00
           else
#             cnvgrib -g21 $COMIN/${mdl}.t${cyc}z.${natgrd}${fhr6} WRFPRS${fhr6}.tm00
        INF=$COMIN/${mdl}.t${cyc}z.${natgrd}${fhr6}
        $WGRIB2 $INF | grep -F -f $PARMhiresw/hiresw_smartinit.g2_rainsnow | $WGRIB2 -i -grib  WRFPRS${fhr6}.tm00.g2 $INF
#        cnvgrib -g21  WRFPRS${fhr6}.tm00.g2 WRFPRS${fhr6}.tm00
	mv WRFPRS${fhr6}.tm00.g2 WRFPRS${fhr6}.tm00
           fi

#####
#why          ${EXECutil}/wgrib -s WRFPRS${fhr6}.tm00 |grep -f ${PARMhiresw}/hiresw_smartinit.parmlist \
#why                           |${EXECutil}/wgrib -i -grib -o temp WRFPRS${fhr6}.tm00 > wgrib.out
#why          mv temp WRFPRS${fhr6}.tm00
        $GRB2INDEX WRFPRS${fhr6}.tm00 WRFPRS${fhr6}i.tm00


        ln -sf "WRFPRS${fhr}.tm00"       fort.15
        ln -sf "WRFPRS${fhr}i.tm00"      fort.16

	fi

      fi  # mk12p

#===============================================================
# nam_smartprecip : Create Precip Buckets for smartinit 
#===============================================================
     echo MAKE $freq HR PRECIP BUCKET FILE using fhrs $pfhr1 $pfhr2 $pfhr3 $pfhr4


# IARW=1 means no special treatment for snow in smartprecip code

	if [ $MODEL = "arw" ]
	then
	IARW=1
	else
	IARW=1
	fi

	echo about to execute hiresw_smartprecipg2
	ls -l fort.*

     $EXEChiresw/hiresw_smartprecipg2 <<EOF > ${ppgm}precip${freq}${fhr}.out 2>errfile_${freq}${fhr}
$pfhr1 $pfhr2 $pfhr3 $pfhr4 $IARW
EOF
export err=$?; err_chk

#    Interp precip to smartinit GRID
     cpgbgrd=$grid

	echo cpgbgrd is $cpgbgrd

     if [ $inest -gt 0 ];then cpgbgrd=$ogrd;fi
     if [ $RUNTYP = aknest3 ];then cpgbgrd=$grid;fi

   
# $WGRIB2 inputs.grb2_nn  -set_grib_type ${compress} -new_grid_interpolation neighbor -new_grid_winds grid -new_grid ${wgrib2def} model.ndfd_nn
# echo "$WGRIB2  inputs.grb2_5  -set_grib_type ${compress} -new_grid_winds grid -new_grid ${wgrib2def} model.ndfd_5" >> e.poe
#     $EXECutil/copygb2 -g "$cpgbgrd" -i3 -x ${freq}precip.${fhr} ${freq}precip


## does it get used?

#was budget

$WGRIB2 ${freq}precip.${fhr} -set_grib_type ${compress} -new_grid_winds grid -new_grid_interpolation neighbor -new_grid ${wgrib2def}  ${freq}precip

cp ${freq}precip ${freq}precip.${fhr}_interp
	err=$?


#### do precip and snow as a two item poe job??

	if [ $err -ne 0 ]
	then
	echo "bad copygb to generate ${freq}precip"
	fi

	echo here with freq $freq and fhr $fhr
     $GRB2INDEX ${freq}precip ${freq}precipi
	ls -l  ${freq}precip ${freq}precipi
#      $EXECutil/copygb2 -g "$cpgbgrd" -i3 -x ${freq}snow.${fhr} ${freq}snow
# $WGRIB2 ${freq}snow.${fhr} -set_grib_type ${compress} -new_grid_winds grid -new_grid_interpolation budget -new_grid ${wgrib2def}  ${freq}snow
$WGRIB2 ${freq}snow.${fhr} -set_grib_type ${compress} -new_grid_winds grid -new_grid_interpolation neighbor -new_grid ${wgrib2def}  ${freq}snow
cp ${freq}snow ${freq}snow.${fhr}_interp
	if [ $err -ne 0 ]
	then
	echo "bad copygb to generate ${freq}snow"
	fi
     $GRB2INDEX ${freq}snow ${freq}snowi
    fi #MKPCP>0
  done #MKPCP loop

#=================================================================
#  RUN PRODUCT GENERATOR
#=================================================================

 if [ -e WRFPRS${fhr}i.tm00 ];then rm WRFPRS${fhr}i.tm00;fi

  $GRB2INDEX WRFPRS${fhr}.tm00 WRFPRS${fhr}i.tm00

#   echo creating $prdgfl file for fhr $fhr
#   cat >input${fhr}.prd <<EOF5
# WRFPRS${fhr}.tm00
# EOF5

#  export pgm=hiresw_prdgen;. prep_step
#  ln -sf $FIXhiresw/hiresw_wgt_${mdl}.g${ogrd}     fort.21

#  ln -sf master${fhr}.ctl            fort.10
#  ln -sf input${fhr}.prd             fort.621   #WCOSS CHANGE
 
#  ${EXEChiresw}/hiresw_prdgen < input${fhr}.prd > prdgen.out${fhr} 2>errfile
#  export err=$?; err_chk

  cp ${COMROOT}/date/t${cyc}z DATE

  if [ -s $prdgfl ];then  
    mv ${prdgfl} meso${rg}.NDFDf${fhr}  
    echo $prdgfl FOUND FOR FORECAST HOUR ${fhr}
  elif [ -s ${prdgfl}${fhr} ];then    # check for hawaii ???
    mv ${prdgfl}${fhr} meso${rg}.NDFDf${fhr}  
    echo $prdgfl${fhr} FOUND FOR FORECAST HOUR ${fhr}
  else
    echo $prdgfl NOT FOUND FOR FORECAST HOUR ${fhr}
    exit
  fi

  $GRB2INDEX meso${rg}.NDFDf${fhr} meso${rg}.NDFDif${fhr}

echo "DONE" > smartinitprdgendone${fhr}
datestr=`date`

done  #fhr loop

## rm -f fort.*


# how handle this now?

if [ ${fhr} -eq 0 ]
then
# cp PDY NMCDATE ncepdate startmsg postmsg null break err_exit errexit errchk err_chk prep_step tracer ../smartinit/
cp PDY NMCDATE ncepdate startmsg postmsg null break err_exit errexit errchk err_chk prep_step tracer ../
# cp DATE ../smartinit/
cp DATE ../
fi

cp  meso${rg}.NDFDf* meso${rg}.NDFDif* ../

if [ ${fhr} -gt 0 -a $sgrb -ne 999 ]
then
    cp  srefpcp${rg}_${SREF_PDY}${srefcyc}f0${pcphrl} srefpcp${rg}i_${SREF_PDY}${srefcyc}f0${pcphrl} ../
fi

if [ ${fhr} -gt 0 ]
then
    if [ $check -eq 0 -a $MODEL = "arw" ]
    then
     cp  3precip.${fhr}* 3snow.${fhr}* ../
    err=$?
	if [ $err -ne 0 ]
	then
	echo "BAD COPY OF 3precip.${fhr} 3snow.${fhr}"
        fi
    fi
fi

    if [ $check6 -eq 0 ];then 
cp  6precip.${fhr}* 6snow.${fhr}* ../
    err=$?
	if [ $err -ne 0 ]
	then
	echo "BAD COPY OF 6precip.${fhr} 6snow.${fhr}"
        fi
    fi

    if [ $mk12p -eq 12 ];then 
cp  12precip.${fhr}* 12snow.${fhr}* ../
    err=$?
	if [ $err -ne 0 ]
	then
	echo "BAD COPY OF 12precip.${fhr} 12snow.${fhr}"
        fi
    fi

cp WRFPRS* ../

cp  smartinitprdgendone${fhr} ../

exit
